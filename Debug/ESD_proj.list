
ESD_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080030d0  080030d0  000040d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a4  080031a4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ac  080031ac  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080031b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000005c  08003210  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003210  00005214  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008353  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f0  00000000  00000000  0000d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073b  00000000  00000000  0000f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f466  00000000  00000000  0000fd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1a2  00000000  00000000  0001f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff97  00000000  00000000  0002a36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008a302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002524  00000000  00000000  0008a348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0008c86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030b8 	.word	0x080030b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080030b8 	.word	0x080030b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_ldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d115      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d113      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000238:	2900      	cmp	r1, #0
 800023a:	db06      	blt.n	800024a <__aeabi_ldivmod+0x1a>
 800023c:	dc01      	bgt.n	8000242 <__aeabi_ldivmod+0x12>
 800023e:	2800      	cmp	r0, #0
 8000240:	d006      	beq.n	8000250 <__aeabi_ldivmod+0x20>
 8000242:	2000      	movs	r0, #0
 8000244:	43c0      	mvns	r0, r0
 8000246:	0841      	lsrs	r1, r0, #1
 8000248:	e002      	b.n	8000250 <__aeabi_ldivmod+0x20>
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	0609      	lsls	r1, r1, #24
 800024e:	2000      	movs	r0, #0
 8000250:	b407      	push	{r0, r1, r2}
 8000252:	4802      	ldr	r0, [pc, #8]	@ (800025c <__aeabi_ldivmod+0x2c>)
 8000254:	a101      	add	r1, pc, #4	@ (adr r1, 800025c <__aeabi_ldivmod+0x2c>)
 8000256:	1840      	adds	r0, r0, r1
 8000258:	9002      	str	r0, [sp, #8]
 800025a:	bd03      	pop	{r0, r1, pc}
 800025c:	ffffffd1 	.word	0xffffffd1
 8000260:	b403      	push	{r0, r1}
 8000262:	4668      	mov	r0, sp
 8000264:	b501      	push	{r0, lr}
 8000266:	9802      	ldr	r0, [sp, #8]
 8000268:	f000 f834 	bl	80002d4 <__gnu_ldivmod_helper>
 800026c:	9b01      	ldr	r3, [sp, #4]
 800026e:	469e      	mov	lr, r3
 8000270:	b002      	add	sp, #8
 8000272:	bc0c      	pop	{r2, r3}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			@ (mov r8, r8)

08000278 <__aeabi_lmul>:
 8000278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800027a:	46ce      	mov	lr, r9
 800027c:	4699      	mov	r9, r3
 800027e:	0c03      	lsrs	r3, r0, #16
 8000280:	469c      	mov	ip, r3
 8000282:	0413      	lsls	r3, r2, #16
 8000284:	4647      	mov	r7, r8
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0404      	lsls	r4, r0, #16
 8000290:	0c24      	lsrs	r4, r4, #16
 8000292:	b580      	push	{r7, lr}
 8000294:	0007      	movs	r7, r0
 8000296:	0c10      	lsrs	r0, r2, #16
 8000298:	434b      	muls	r3, r1
 800029a:	4365      	muls	r5, r4
 800029c:	4341      	muls	r1, r0
 800029e:	4360      	muls	r0, r4
 80002a0:	0c2c      	lsrs	r4, r5, #16
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	1824      	adds	r4, r4, r0
 80002a6:	468c      	mov	ip, r1
 80002a8:	42a3      	cmp	r3, r4
 80002aa:	d903      	bls.n	80002b4 <__aeabi_lmul+0x3c>
 80002ac:	2380      	movs	r3, #128	@ 0x80
 80002ae:	025b      	lsls	r3, r3, #9
 80002b0:	4698      	mov	r8, r3
 80002b2:	44c4      	add	ip, r8
 80002b4:	4649      	mov	r1, r9
 80002b6:	4379      	muls	r1, r7
 80002b8:	4356      	muls	r6, r2
 80002ba:	0c23      	lsrs	r3, r4, #16
 80002bc:	042d      	lsls	r5, r5, #16
 80002be:	0c2d      	lsrs	r5, r5, #16
 80002c0:	1989      	adds	r1, r1, r6
 80002c2:	4463      	add	r3, ip
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	1960      	adds	r0, r4, r5
 80002c8:	18c9      	adds	r1, r1, r3
 80002ca:	bcc0      	pop	{r6, r7}
 80002cc:	46b9      	mov	r9, r7
 80002ce:	46b0      	mov	r8, r6
 80002d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__gnu_ldivmod_helper>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	b580      	push	{r7, lr}
 80002dc:	4691      	mov	r9, r2
 80002de:	4698      	mov	r8, r3
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	f000 f832 	bl	800034c <__divdi3>
 80002e8:	0007      	movs	r7, r0
 80002ea:	000e      	movs	r6, r1
 80002ec:	0002      	movs	r2, r0
 80002ee:	000b      	movs	r3, r1
 80002f0:	4648      	mov	r0, r9
 80002f2:	4641      	mov	r1, r8
 80002f4:	f7ff ffc0 	bl	8000278 <__aeabi_lmul>
 80002f8:	1a24      	subs	r4, r4, r0
 80002fa:	418d      	sbcs	r5, r1
 80002fc:	9b08      	ldr	r3, [sp, #32]
 80002fe:	0038      	movs	r0, r7
 8000300:	0031      	movs	r1, r6
 8000302:	601c      	str	r4, [r3, #0]
 8000304:	605d      	str	r5, [r3, #4]
 8000306:	bcc0      	pop	{r6, r7}
 8000308:	46b9      	mov	r9, r7
 800030a:	46b0      	mov	r8, r6
 800030c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__clzsi2>:
 8000310:	211c      	movs	r1, #28
 8000312:	2301      	movs	r3, #1
 8000314:	041b      	lsls	r3, r3, #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d301      	bcc.n	800031e <__clzsi2+0xe>
 800031a:	0c00      	lsrs	r0, r0, #16
 800031c:	3910      	subs	r1, #16
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	4298      	cmp	r0, r3
 8000322:	d301      	bcc.n	8000328 <__clzsi2+0x18>
 8000324:	0a00      	lsrs	r0, r0, #8
 8000326:	3908      	subs	r1, #8
 8000328:	091b      	lsrs	r3, r3, #4
 800032a:	4298      	cmp	r0, r3
 800032c:	d301      	bcc.n	8000332 <__clzsi2+0x22>
 800032e:	0900      	lsrs	r0, r0, #4
 8000330:	3904      	subs	r1, #4
 8000332:	a202      	add	r2, pc, #8	@ (adr r2, 800033c <__clzsi2+0x2c>)
 8000334:	5c10      	ldrb	r0, [r2, r0]
 8000336:	1840      	adds	r0, r0, r1
 8000338:	4770      	bx	lr
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	02020304 	.word	0x02020304
 8000340:	01010101 	.word	0x01010101
	...

0800034c <__divdi3>:
 800034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034e:	46d6      	mov	lr, sl
 8000350:	464f      	mov	r7, r9
 8000352:	4646      	mov	r6, r8
 8000354:	b5c0      	push	{r6, r7, lr}
 8000356:	0004      	movs	r4, r0
 8000358:	000d      	movs	r5, r1
 800035a:	0010      	movs	r0, r2
 800035c:	0019      	movs	r1, r3
 800035e:	b082      	sub	sp, #8
 8000360:	2d00      	cmp	r5, #0
 8000362:	da00      	bge.n	8000366 <__divdi3+0x1a>
 8000364:	e087      	b.n	8000476 <__divdi3+0x12a>
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__divdi3+0x36>
 800036a:	0016      	movs	r6, r2
 800036c:	001f      	movs	r7, r3
 800036e:	42ab      	cmp	r3, r5
 8000370:	d919      	bls.n	80003a6 <__divdi3+0x5a>
 8000372:	2000      	movs	r0, #0
 8000374:	2100      	movs	r1, #0
 8000376:	b002      	add	sp, #8
 8000378:	bce0      	pop	{r5, r6, r7}
 800037a:	46ba      	mov	sl, r7
 800037c:	46b1      	mov	r9, r6
 800037e:	46a8      	mov	r8, r5
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	2700      	movs	r7, #0
 8000384:	4246      	negs	r6, r0
 8000386:	418f      	sbcs	r7, r1
 8000388:	42af      	cmp	r7, r5
 800038a:	d804      	bhi.n	8000396 <__divdi3+0x4a>
 800038c:	d000      	beq.n	8000390 <__divdi3+0x44>
 800038e:	e082      	b.n	8000496 <__divdi3+0x14a>
 8000390:	42a6      	cmp	r6, r4
 8000392:	d800      	bhi.n	8000396 <__divdi3+0x4a>
 8000394:	e07f      	b.n	8000496 <__divdi3+0x14a>
 8000396:	2000      	movs	r0, #0
 8000398:	2100      	movs	r1, #0
 800039a:	e08f      	b.n	80004bc <__divdi3+0x170>
 800039c:	2700      	movs	r7, #0
 800039e:	4246      	negs	r6, r0
 80003a0:	418f      	sbcs	r7, r1
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d8e5      	bhi.n	8000372 <__divdi3+0x26>
 80003a6:	42af      	cmp	r7, r5
 80003a8:	d100      	bne.n	80003ac <__divdi3+0x60>
 80003aa:	e098      	b.n	80004de <__divdi3+0x192>
 80003ac:	2300      	movs	r3, #0
 80003ae:	4699      	mov	r9, r3
 80003b0:	0039      	movs	r1, r7
 80003b2:	0030      	movs	r0, r6
 80003b4:	f000 f8bc 	bl	8000530 <__clzdi2>
 80003b8:	4680      	mov	r8, r0
 80003ba:	0029      	movs	r1, r5
 80003bc:	0020      	movs	r0, r4
 80003be:	f000 f8b7 	bl	8000530 <__clzdi2>
 80003c2:	4643      	mov	r3, r8
 80003c4:	1a1b      	subs	r3, r3, r0
 80003c6:	4698      	mov	r8, r3
 80003c8:	3b20      	subs	r3, #32
 80003ca:	d500      	bpl.n	80003ce <__divdi3+0x82>
 80003cc:	e07c      	b.n	80004c8 <__divdi3+0x17c>
 80003ce:	0031      	movs	r1, r6
 80003d0:	4099      	lsls	r1, r3
 80003d2:	469a      	mov	sl, r3
 80003d4:	000b      	movs	r3, r1
 80003d6:	0031      	movs	r1, r6
 80003d8:	4640      	mov	r0, r8
 80003da:	4081      	lsls	r1, r0
 80003dc:	000a      	movs	r2, r1
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d85f      	bhi.n	80004a2 <__divdi3+0x156>
 80003e2:	d05c      	beq.n	800049e <__divdi3+0x152>
 80003e4:	4651      	mov	r1, sl
 80003e6:	1aa4      	subs	r4, r4, r2
 80003e8:	419d      	sbcs	r5, r3
 80003ea:	2900      	cmp	r1, #0
 80003ec:	da00      	bge.n	80003f0 <__divdi3+0xa4>
 80003ee:	e093      	b.n	8000518 <__divdi3+0x1cc>
 80003f0:	2100      	movs	r1, #0
 80003f2:	2000      	movs	r0, #0
 80003f4:	2601      	movs	r6, #1
 80003f6:	9000      	str	r0, [sp, #0]
 80003f8:	9101      	str	r1, [sp, #4]
 80003fa:	4651      	mov	r1, sl
 80003fc:	408e      	lsls	r6, r1
 80003fe:	9601      	str	r6, [sp, #4]
 8000400:	4641      	mov	r1, r8
 8000402:	2601      	movs	r6, #1
 8000404:	408e      	lsls	r6, r1
 8000406:	4641      	mov	r1, r8
 8000408:	9600      	str	r6, [sp, #0]
 800040a:	2900      	cmp	r1, #0
 800040c:	d050      	beq.n	80004b0 <__divdi3+0x164>
 800040e:	07d9      	lsls	r1, r3, #31
 8000410:	0856      	lsrs	r6, r2, #1
 8000412:	430e      	orrs	r6, r1
 8000414:	085f      	lsrs	r7, r3, #1
 8000416:	4641      	mov	r1, r8
 8000418:	2201      	movs	r2, #1
 800041a:	2300      	movs	r3, #0
 800041c:	e00c      	b.n	8000438 <__divdi3+0xec>
 800041e:	42af      	cmp	r7, r5
 8000420:	d101      	bne.n	8000426 <__divdi3+0xda>
 8000422:	42a6      	cmp	r6, r4
 8000424:	d80a      	bhi.n	800043c <__divdi3+0xf0>
 8000426:	1ba4      	subs	r4, r4, r6
 8000428:	41bd      	sbcs	r5, r7
 800042a:	1924      	adds	r4, r4, r4
 800042c:	416d      	adcs	r5, r5
 800042e:	3901      	subs	r1, #1
 8000430:	18a4      	adds	r4, r4, r2
 8000432:	415d      	adcs	r5, r3
 8000434:	2900      	cmp	r1, #0
 8000436:	d006      	beq.n	8000446 <__divdi3+0xfa>
 8000438:	42af      	cmp	r7, r5
 800043a:	d9f0      	bls.n	800041e <__divdi3+0xd2>
 800043c:	3901      	subs	r1, #1
 800043e:	1924      	adds	r4, r4, r4
 8000440:	416d      	adcs	r5, r5
 8000442:	2900      	cmp	r1, #0
 8000444:	d1f8      	bne.n	8000438 <__divdi3+0xec>
 8000446:	9800      	ldr	r0, [sp, #0]
 8000448:	9901      	ldr	r1, [sp, #4]
 800044a:	4653      	mov	r3, sl
 800044c:	1900      	adds	r0, r0, r4
 800044e:	4169      	adcs	r1, r5
 8000450:	2b00      	cmp	r3, #0
 8000452:	db48      	blt.n	80004e6 <__divdi3+0x19a>
 8000454:	002e      	movs	r6, r5
 8000456:	002c      	movs	r4, r5
 8000458:	40de      	lsrs	r6, r3
 800045a:	4643      	mov	r3, r8
 800045c:	40dc      	lsrs	r4, r3
 800045e:	4653      	mov	r3, sl
 8000460:	2b00      	cmp	r3, #0
 8000462:	db50      	blt.n	8000506 <__divdi3+0x1ba>
 8000464:	0034      	movs	r4, r6
 8000466:	409c      	lsls	r4, r3
 8000468:	0023      	movs	r3, r4
 800046a:	4644      	mov	r4, r8
 800046c:	40a6      	lsls	r6, r4
 800046e:	0032      	movs	r2, r6
 8000470:	1a80      	subs	r0, r0, r2
 8000472:	4199      	sbcs	r1, r3
 8000474:	e01e      	b.n	80004b4 <__divdi3+0x168>
 8000476:	2300      	movs	r3, #0
 8000478:	4262      	negs	r2, r4
 800047a:	41ab      	sbcs	r3, r5
 800047c:	0014      	movs	r4, r2
 800047e:	001d      	movs	r5, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	db8b      	blt.n	800039c <__divdi3+0x50>
 8000484:	0006      	movs	r6, r0
 8000486:	000f      	movs	r7, r1
 8000488:	4299      	cmp	r1, r3
 800048a:	d900      	bls.n	800048e <__divdi3+0x142>
 800048c:	e771      	b.n	8000372 <__divdi3+0x26>
 800048e:	d102      	bne.n	8000496 <__divdi3+0x14a>
 8000490:	4290      	cmp	r0, r2
 8000492:	d900      	bls.n	8000496 <__divdi3+0x14a>
 8000494:	e76d      	b.n	8000372 <__divdi3+0x26>
 8000496:	2301      	movs	r3, #1
 8000498:	425b      	negs	r3, r3
 800049a:	4699      	mov	r9, r3
 800049c:	e788      	b.n	80003b0 <__divdi3+0x64>
 800049e:	42a1      	cmp	r1, r4
 80004a0:	d9a0      	bls.n	80003e4 <__divdi3+0x98>
 80004a2:	2100      	movs	r1, #0
 80004a4:	2000      	movs	r0, #0
 80004a6:	9000      	str	r0, [sp, #0]
 80004a8:	9101      	str	r1, [sp, #4]
 80004aa:	4641      	mov	r1, r8
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d1ae      	bne.n	800040e <__divdi3+0xc2>
 80004b0:	9800      	ldr	r0, [sp, #0]
 80004b2:	9901      	ldr	r1, [sp, #4]
 80004b4:	464b      	mov	r3, r9
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d100      	bne.n	80004bc <__divdi3+0x170>
 80004ba:	e75c      	b.n	8000376 <__divdi3+0x2a>
 80004bc:	0003      	movs	r3, r0
 80004be:	000c      	movs	r4, r1
 80004c0:	2100      	movs	r1, #0
 80004c2:	4258      	negs	r0, r3
 80004c4:	41a1      	sbcs	r1, r4
 80004c6:	e756      	b.n	8000376 <__divdi3+0x2a>
 80004c8:	4642      	mov	r2, r8
 80004ca:	0038      	movs	r0, r7
 80004cc:	469a      	mov	sl, r3
 80004ce:	2320      	movs	r3, #32
 80004d0:	0031      	movs	r1, r6
 80004d2:	4090      	lsls	r0, r2
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	40d9      	lsrs	r1, r3
 80004d8:	0003      	movs	r3, r0
 80004da:	430b      	orrs	r3, r1
 80004dc:	e77b      	b.n	80003d6 <__divdi3+0x8a>
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d800      	bhi.n	80004e4 <__divdi3+0x198>
 80004e2:	e763      	b.n	80003ac <__divdi3+0x60>
 80004e4:	e745      	b.n	8000372 <__divdi3+0x26>
 80004e6:	4642      	mov	r2, r8
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	002a      	movs	r2, r5
 80004ee:	409a      	lsls	r2, r3
 80004f0:	0026      	movs	r6, r4
 80004f2:	0013      	movs	r3, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	40d6      	lsrs	r6, r2
 80004f8:	002c      	movs	r4, r5
 80004fa:	431e      	orrs	r6, r3
 80004fc:	4643      	mov	r3, r8
 80004fe:	40dc      	lsrs	r4, r3
 8000500:	4653      	mov	r3, sl
 8000502:	2b00      	cmp	r3, #0
 8000504:	daae      	bge.n	8000464 <__divdi3+0x118>
 8000506:	4642      	mov	r2, r8
 8000508:	2320      	movs	r3, #32
 800050a:	0035      	movs	r5, r6
 800050c:	4094      	lsls	r4, r2
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	40dd      	lsrs	r5, r3
 8000512:	0023      	movs	r3, r4
 8000514:	432b      	orrs	r3, r5
 8000516:	e7a8      	b.n	800046a <__divdi3+0x11e>
 8000518:	4641      	mov	r1, r8
 800051a:	2620      	movs	r6, #32
 800051c:	2701      	movs	r7, #1
 800051e:	1a76      	subs	r6, r6, r1
 8000520:	2000      	movs	r0, #0
 8000522:	2100      	movs	r1, #0
 8000524:	40f7      	lsrs	r7, r6
 8000526:	9000      	str	r0, [sp, #0]
 8000528:	9101      	str	r1, [sp, #4]
 800052a:	9701      	str	r7, [sp, #4]
 800052c:	e768      	b.n	8000400 <__divdi3+0xb4>
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__clzdi2>:
 8000530:	b510      	push	{r4, lr}
 8000532:	2900      	cmp	r1, #0
 8000534:	d103      	bne.n	800053e <__clzdi2+0xe>
 8000536:	f7ff feeb 	bl	8000310 <__clzsi2>
 800053a:	3020      	adds	r0, #32
 800053c:	e002      	b.n	8000544 <__clzdi2+0x14>
 800053e:	0008      	movs	r0, r1
 8000540:	f7ff fee6 	bl	8000310 <__clzsi2>
 8000544:	bd10      	pop	{r4, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b08b      	sub	sp, #44	@ 0x2c
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000556:	2110      	movs	r1, #16
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2244      	movs	r2, #68	@ 0x44
 800055c:	18ba      	adds	r2, r7, r2
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2240      	movs	r2, #64	@ 0x40
 8000566:	18ba      	adds	r2, r7, r2
 8000568:	8812      	ldrh	r2, [r2, #0]
 800056a:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000570:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2338      	movs	r3, #56	@ 0x38
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 800057c:	000c      	movs	r4, r1
 800057e:	193b      	adds	r3, r7, r4
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f80a 	bl	80005ac <Lcd_init>

	return lcd;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	193a      	adds	r2, r7, r4
 800059c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800059e:	c313      	stmia	r3!, {r0, r1, r4}
 80005a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005a2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80005a4:	68f8      	ldr	r0, [r7, #12]
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b00b      	add	sp, #44	@ 0x2c
 80005aa:	bd90      	pop	{r4, r7, pc}

080005ac <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7d9b      	ldrb	r3, [r3, #22]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10f      	bne.n	80005dc <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2133      	movs	r1, #51	@ 0x33
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 f87c 	bl	80006be <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2132      	movs	r1, #50	@ 0x32
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 f877 	bl	80006be <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2128      	movs	r1, #40	@ 0x28
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 f872 	bl	80006be <lcd_write_command>
 80005da:	e004      	b.n	80005e6 <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2138      	movs	r1, #56	@ 0x38
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f86c 	bl	80006be <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f867 	bl	80006be <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	210c      	movs	r1, #12
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f862 	bl	80006be <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2106      	movs	r1, #6
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f85d 	bl	80006be <lcd_write_command>
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000616:	230f      	movs	r3, #15
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e00f      	b.n	8000640 <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 8000620:	240f      	movs	r4, #15
 8000622:	193b      	adds	r3, r7, r4
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	18d3      	adds	r3, r2, r3
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f876 	bl	8000722 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000636:	193b      	adds	r3, r7, r4
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	193b      	adds	r3, r7, r4
 800063c:	3201      	adds	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	230f      	movs	r3, #15
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	781c      	ldrb	r4, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd5d 	bl	8000108 <strlen>
 800064e:	0003      	movs	r3, r0
 8000650:	429c      	cmp	r4, r3
 8000652:	d3e5      	bcc.n	8000620 <Lcd_string+0x14>
	}
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b005      	add	sp, #20
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	0008      	movs	r0, r1
 800066a:	0011      	movs	r1, r2
 800066c:	1cfb      	adds	r3, r7, #3
 800066e:	1c02      	adds	r2, r0, #0
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	1cbb      	adds	r3, r7, #2
 8000674:	1c0a      	adds	r2, r1, #0
 8000676:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000678:	1cfb      	adds	r3, r7, #3
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <Lcd_cursor+0x40>)
 800067e:	5cd2      	ldrb	r2, [r2, r3]
 8000680:	1cbb      	adds	r3, r7, #2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	18d3      	adds	r3, r2, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	3b80      	subs	r3, #128	@ 0x80
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 f814 	bl	80006be <lcd_write_command>
	#endif
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	08003120 	.word	0x08003120

080006a4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2101      	movs	r1, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f804 	bl	80006be <lcd_write_command>
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}

080006be <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	000a      	movs	r2, r1
 80006c8:	1cfb      	adds	r3, r7, #3
 80006ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6898      	ldr	r0, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	899b      	ldrh	r3, [r3, #12]
 80006d4:	2200      	movs	r2, #0
 80006d6:	0019      	movs	r1, r3
 80006d8:	f001 fb33 	bl	8001d42 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7d9b      	ldrb	r3, [r3, #22]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d113      	bne.n	800070c <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006e4:	1cfb      	adds	r3, r7, #3
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	091b      	lsrs	r3, r3, #4
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 f848 	bl	8000786 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006f6:	1cfb      	adds	r3, r7, #3
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	220f      	movs	r2, #15
 80006fc:	4013      	ands	r3, r2
 80006fe:	b2d9      	uxtb	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2204      	movs	r2, #4
 8000704:	0018      	movs	r0, r3
 8000706:	f000 f83e 	bl	8000786 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800070a:	e006      	b.n	800071a <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 800070c:	1cfb      	adds	r3, r7, #3
 800070e:	7819      	ldrb	r1, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2208      	movs	r2, #8
 8000714:	0018      	movs	r0, r3
 8000716:	f000 f836 	bl	8000786 <lcd_write>
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}

08000722 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	000a      	movs	r2, r1
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	899b      	ldrh	r3, [r3, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	0019      	movs	r1, r3
 800073c:	f001 fb01 	bl	8001d42 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7d9b      	ldrb	r3, [r3, #22]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d113      	bne.n	8000770 <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000748:	1cfb      	adds	r3, r7, #3
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	091b      	lsrs	r3, r3, #4
 800074e:	b2d9      	uxtb	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2204      	movs	r2, #4
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f816 	bl	8000786 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800075a:	1cfb      	adds	r3, r7, #3
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	220f      	movs	r2, #15
 8000760:	4013      	ands	r3, r2
 8000762:	b2d9      	uxtb	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2204      	movs	r2, #4
 8000768:	0018      	movs	r0, r3
 800076a:	f000 f80c 	bl	8000786 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800076e:	e006      	b.n	800077e <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 8000770:	1cfb      	adds	r3, r7, #3
 8000772:	7819      	ldrb	r1, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2208      	movs	r2, #8
 8000778:	0018      	movs	r0, r3
 800077a:	f000 f804 	bl	8000786 <lcd_write>
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}

08000786 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000786:	b590      	push	{r4, r7, lr}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	0008      	movs	r0, r1
 8000790:	0011      	movs	r1, r2
 8000792:	1cfb      	adds	r3, r7, #3
 8000794:	1c02      	adds	r2, r0, #0
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	1c0a      	adds	r2, r1, #0
 800079c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 800079e:	230f      	movs	r3, #15
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e020      	b.n	80007ea <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	240f      	movs	r4, #15
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	18d3      	adds	r3, r2, r3
 80007c4:	8819      	ldrh	r1, [r3, #0]
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	411a      	asrs	r2, r3
 80007d0:	0013      	movs	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2201      	movs	r2, #1
 80007d6:	4013      	ands	r3, r2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	001a      	movs	r2, r3
 80007dc:	f001 fab1 	bl	8001d42 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	3201      	adds	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	230f      	movs	r3, #15
 80007ec:	18fa      	adds	r2, r7, r3
 80007ee:	1cbb      	adds	r3, r7, #2
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3d7      	bcc.n	80007a8 <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6918      	ldr	r0, [r3, #16]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	8a9b      	ldrh	r3, [r3, #20]
 8000800:	2201      	movs	r2, #1
 8000802:	0019      	movs	r1, r3
 8000804:	f001 fa9d 	bl	8001d42 <HAL_GPIO_WritePin>
	DELAY(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f001 f80b 	bl	8001824 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6918      	ldr	r0, [r3, #16]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	8a9b      	ldrh	r3, [r3, #20]
 8000816:	2200      	movs	r2, #0
 8000818:	0019      	movs	r1, r3
 800081a:	f001 fa92 	bl	8001d42 <HAL_GPIO_WritePin>
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b005      	add	sp, #20
 8000824:	bd90      	pop	{r4, r7, pc}
	...

08000828 <selectRow>:
};
uint8_t key_current=0;
uint8_t key_prev=0;

void selectRow(uint8_t row)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	701a      	strb	r2, [r3, #0]
	switch (row){
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b07      	cmp	r3, #7
 800083a:	d900      	bls.n	800083e <selectRow+0x16>
 800083c:	e0ac      	b.n	8000998 <selectRow+0x170>
 800083e:	009a      	lsls	r2, r3, #2
 8000840:	4b57      	ldr	r3, [pc, #348]	@ (80009a0 <selectRow+0x178>)
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	469f      	mov	pc, r3
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000848:	4b56      	ldr	r3, [pc, #344]	@ (80009a4 <selectRow+0x17c>)
 800084a:	2200      	movs	r2, #0
 800084c:	2102      	movs	r1, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fa77 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000854:	2390      	movs	r3, #144	@ 0x90
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2200      	movs	r2, #0
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fa70 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000862:	2390      	movs	r3, #144	@ 0x90
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2200      	movs	r2, #0
 8000868:	2140      	movs	r1, #64	@ 0x40
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fa69 	bl	8001d42 <HAL_GPIO_WritePin>
	break;
 8000870:	e092      	b.n	8000998 <selectRow+0x170>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000872:	4b4c      	ldr	r3, [pc, #304]	@ (80009a4 <selectRow+0x17c>)
 8000874:	2200      	movs	r2, #0
 8000876:	2102      	movs	r1, #2
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fa62 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800087e:	2390      	movs	r3, #144	@ 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2201      	movs	r2, #1
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fa5b 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800088c:	2390      	movs	r3, #144	@ 0x90
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fa54 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 800089a:	e07d      	b.n	8000998 <selectRow+0x170>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800089c:	4b41      	ldr	r3, [pc, #260]	@ (80009a4 <selectRow+0x17c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	2102      	movs	r1, #2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fa4d 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80008a8:	2390      	movs	r3, #144	@ 0x90
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa46 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80008b6:	2390      	movs	r3, #144	@ 0x90
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2201      	movs	r2, #1
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fa3f 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 80008c4:	e068      	b.n	8000998 <selectRow+0x170>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80008c6:	4b37      	ldr	r3, [pc, #220]	@ (80009a4 <selectRow+0x17c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fa38 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80008d2:	2390      	movs	r3, #144	@ 0x90
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2201      	movs	r2, #1
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fa31 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80008e0:	2390      	movs	r3, #144	@ 0x90
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	2201      	movs	r2, #1
 80008e6:	2140      	movs	r1, #64	@ 0x40
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fa2a 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 80008ee:	e053      	b.n	8000998 <selectRow+0x170>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80008f0:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <selectRow+0x17c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fa23 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80008fc:	2390      	movs	r3, #144	@ 0x90
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fa1c 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800090a:	2390      	movs	r3, #144	@ 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	@ 0x40
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fa15 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000918:	e03e      	b.n	8000998 <selectRow+0x170>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <selectRow+0x17c>)
 800091c:	2201      	movs	r2, #1
 800091e:	2102      	movs	r1, #2
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fa0e 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000926:	2390      	movs	r3, #144	@ 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	2201      	movs	r2, #1
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fa07 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	@ 0x40
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fa00 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000942:	e029      	b.n	8000998 <selectRow+0x170>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <selectRow+0x17c>)
 8000946:	2201      	movs	r2, #1
 8000948:	2102      	movs	r1, #2
 800094a:	0018      	movs	r0, r3
 800094c:	f001 f9f9 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000950:	2390      	movs	r3, #144	@ 0x90
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2200      	movs	r2, #0
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f9f2 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800095e:	2390      	movs	r3, #144	@ 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f9eb 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 800096c:	e014      	b.n	8000998 <selectRow+0x170>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <selectRow+0x17c>)
 8000970:	2201      	movs	r2, #1
 8000972:	2102      	movs	r1, #2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 f9e4 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800097a:	2390      	movs	r3, #144	@ 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f9dd 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000988:	2390      	movs	r3, #144	@ 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2140      	movs	r1, #64	@ 0x40
 8000990:	0018      	movs	r0, r3
 8000992:	f001 f9d6 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000996:	46c0      	nop			@ (mov r8, r8)
	}
};
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08003134 	.word	0x08003134
 80009a4:	48000400 	.word	0x48000400

080009a8 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	for (row=0 ; row<8 ; row ++)
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <Keypad_Getkey+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e04a      	b.n	8000a4a <Keypad_Getkey+0xa2>
	{
		selectRow(row);
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <Keypad_Getkey+0xb4>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff35 	bl	8000828 <selectRow>
		HAL_Delay(2);
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 ff30 	bl	8001824 <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	00da      	lsls	r2, r3, #3
 80009c8:	2390      	movs	r3, #144	@ 0x90
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 f99a 	bl	8001d08 <HAL_GPIO_ReadPin>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d113      	bne.n	8000a00 <Keypad_Getkey+0x58>
			{
				HAL_Delay(50);
 80009d8:	2032      	movs	r0, #50	@ 0x32
 80009da:	f000 ff23 	bl	8001824 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	00da      	lsls	r2, r3, #3
 80009e2:	2390      	movs	r3, #144	@ 0x90
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 f98d 	bl	8001d08 <HAL_GPIO_ReadPin>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d125      	bne.n	8000a3e <Keypad_Getkey+0x96>
					return key_code[row][0];
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <Keypad_Getkey+0xb4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <Keypad_Getkey+0xb8>)
 80009fa:	0052      	lsls	r2, r2, #1
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	e029      	b.n	8000a54 <Keypad_Getkey+0xac>
				}
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	009a      	lsls	r2, r3, #2
 8000a04:	2390      	movs	r3, #144	@ 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f97c 	bl	8001d08 <HAL_GPIO_ReadPin>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d114      	bne.n	8000a3e <Keypad_Getkey+0x96>
			{
				HAL_Delay(50);
 8000a14:	2032      	movs	r0, #50	@ 0x32
 8000a16:	f000 ff05 	bl	8001824 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){
 8000a1a:	2380      	movs	r3, #128	@ 0x80
 8000a1c:	009a      	lsls	r2, r3, #2
 8000a1e:	2390      	movs	r3, #144	@ 0x90
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 f96f 	bl	8001d08 <HAL_GPIO_ReadPin>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d107      	bne.n	8000a3e <Keypad_Getkey+0x96>
					return key_code[row][1];
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <Keypad_Getkey+0xb4>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <Keypad_Getkey+0xb8>)
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	e00a      	b.n	8000a54 <Keypad_Getkey+0xac>
	for (row=0 ; row<8 ; row ++)
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <Keypad_Getkey+0xb4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <Keypad_Getkey+0xb4>)
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <Keypad_Getkey+0xb4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d9b0      	bls.n	80009b4 <Keypad_Getkey+0xc>
				}
			}
	}
	return 0;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	200000c2 	.word	0x200000c2
 8000a60:	08003124 	.word	0x08003124

08000a64 <Result>:

const char keypad_layout[2][16]= {"789+456-123xs0=:", "g<>+def-abcxSc=:"};
bool splash = false;

int64_t Result(char * string){
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	b0a5      	sub	sp, #148	@ 0x94
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	int64_t temp_var[10] = {0,0,0,0,0,0,0,0,0,0};
 8000a6c:	2328      	movs	r3, #40	@ 0x28
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	2350      	movs	r3, #80	@ 0x50
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 face 	bl	8003018 <memset>
	uint8_t num = 0;
 8000a7c:	238f      	movs	r3, #143	@ 0x8f
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000a84:	2314      	movs	r3, #20
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	4adc      	ldr	r2, [pc, #880]	@ (8000dfc <Result+0x398>)
 8000a8a:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000a8c:	c343      	stmia	r3!, {r0, r1, r6}
 8000a8e:	6811      	ldr	r1, [r2, #0]
 8000a90:	6019      	str	r1, [r3, #0]
 8000a92:	8891      	ldrh	r1, [r2, #4]
 8000a94:	8099      	strh	r1, [r3, #4]
 8000a96:	7992      	ldrb	r2, [r2, #6]
 8000a98:	719a      	strb	r2, [r3, #6]
	uint8_t num_cnt = 0;
 8000a9a:	238e      	movs	r3, #142	@ 0x8e
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	uint8_t equaltion[9] = {0,0,0,0,0,0,0,0,0};
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	4ad6      	ldr	r2, [pc, #856]	@ (8000e00 <Result+0x39c>)
 8000aa8:	ca03      	ldmia	r2!, {r0, r1}
 8000aaa:	c303      	stmia	r3!, {r0, r1}
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < strlen(string); i++){
 8000ab0:	238d      	movs	r3, #141	@ 0x8d
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e0d4      	b.n	8000c64 <Result+0x200>
		int tempk = string[i]-'0';
 8000aba:	238d      	movs	r3, #141	@ 0x8d
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	18d3      	adds	r3, r2, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3b30      	subs	r3, #48	@ 0x30
 8000ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
		if (tempk < 10 && tempk >= 0){
 8000aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	dc10      	bgt.n	8000af2 <Result+0x8e>
 8000ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0d      	blt.n	8000af2 <Result+0x8e>
			tmp[num_cnt] = tempk;
 8000ad6:	208e      	movs	r0, #142	@ 0x8e
 8000ad8:	183b      	adds	r3, r7, r0
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000ade:	b2d1      	uxtb	r1, r2
 8000ae0:	2214      	movs	r2, #20
 8000ae2:	18ba      	adds	r2, r7, r2
 8000ae4:	54d1      	strb	r1, [r2, r3]
			num_cnt ++;
 8000ae6:	183b      	adds	r3, r7, r0
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	3201      	adds	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e0b2      	b.n	8000c58 <Result+0x1f4>
		}
		else {
			if (string[i] == '+'){
 8000af2:	238d      	movs	r3, #141	@ 0x8d
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8000b00:	d107      	bne.n	8000b12 <Result+0xae>
				equaltion[num] = 1;
 8000b02:	238f      	movs	r3, #143	@ 0x8f
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2208      	movs	r2, #8
 8000b0a:	18ba      	adds	r2, r7, r2
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	54d1      	strb	r1, [r2, r3]
 8000b10:	e02e      	b.n	8000b70 <Result+0x10c>
			}
			else if (string[i] == '-') {
 8000b12:	238d      	movs	r3, #141	@ 0x8d
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000b20:	d107      	bne.n	8000b32 <Result+0xce>
				equaltion[num] = 2;
 8000b22:	238f      	movs	r3, #143	@ 0x8f
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2208      	movs	r2, #8
 8000b2a:	18ba      	adds	r2, r7, r2
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	54d1      	strb	r1, [r2, r3]
 8000b30:	e01e      	b.n	8000b70 <Result+0x10c>
			}
			else if (string[i] == 'x') {
 8000b32:	238d      	movs	r3, #141	@ 0x8d
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b78      	cmp	r3, #120	@ 0x78
 8000b40:	d107      	bne.n	8000b52 <Result+0xee>
				equaltion[num] = 3;
 8000b42:	238f      	movs	r3, #143	@ 0x8f
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2208      	movs	r2, #8
 8000b4a:	18ba      	adds	r2, r7, r2
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	54d1      	strb	r1, [r2, r3]
 8000b50:	e00e      	b.n	8000b70 <Result+0x10c>
			}
			else if (string[i] == ':') {
 8000b52:	238d      	movs	r3, #141	@ 0x8d
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	18d3      	adds	r3, r2, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000b60:	d106      	bne.n	8000b70 <Result+0x10c>
				equaltion[num] = 4;
 8000b62:	238f      	movs	r3, #143	@ 0x8f
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2208      	movs	r2, #8
 8000b6a:	18ba      	adds	r2, r7, r2
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	54d1      	strb	r1, [r2, r3]
			}
			for(uint8_t j = 0; j < num_cnt; j++){
 8000b70:	238c      	movs	r3, #140	@ 0x8c
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e05d      	b.n	8000c36 <Result+0x1d2>
				uint64_t tempkk = tmp[j];
 8000b7a:	238c      	movs	r3, #140	@ 0x8c
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2214      	movs	r2, #20
 8000b82:	18ba      	adds	r2, r7, r2
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	18ba      	adds	r2, r7, r2
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2284      	movs	r2, #132	@ 0x84
 8000b90:	18ba      	adds	r2, r7, r2
 8000b92:	6013      	str	r3, [r2, #0]
				for(uint8_t k =0; k < num_cnt-j-1; k++){
 8000b94:	237f      	movs	r3, #127	@ 0x7f
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e019      	b.n	8000bd2 <Result+0x16e>
					tempkk = tempkk*10;
 8000b9e:	2380      	movs	r3, #128	@ 0x80
 8000ba0:	18fa      	adds	r2, r7, r3
 8000ba2:	6810      	ldr	r0, [r2, #0]
 8000ba4:	6851      	ldr	r1, [r2, #4]
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	000b      	movs	r3, r1
 8000baa:	0f96      	lsrs	r6, r2, #30
 8000bac:	009d      	lsls	r5, r3, #2
 8000bae:	4335      	orrs	r5, r6
 8000bb0:	0094      	lsls	r4, r2, #2
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	000b      	movs	r3, r1
 8000bb6:	1912      	adds	r2, r2, r4
 8000bb8:	416b      	adcs	r3, r5
 8000bba:	1892      	adds	r2, r2, r2
 8000bbc:	415b      	adcs	r3, r3
 8000bbe:	2180      	movs	r1, #128	@ 0x80
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	600a      	str	r2, [r1, #0]
 8000bc4:	604b      	str	r3, [r1, #4]
				for(uint8_t k =0; k < num_cnt-j-1; k++){
 8000bc6:	217f      	movs	r1, #127	@ 0x7f
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	3201      	adds	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	237f      	movs	r3, #127	@ 0x7f
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	238e      	movs	r3, #142	@ 0x8e
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	7819      	ldrb	r1, [r3, #0]
 8000bde:	268c      	movs	r6, #140	@ 0x8c
 8000be0:	19bb      	adds	r3, r7, r6
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	1acb      	subs	r3, r1, r3
 8000be6:	3b01      	subs	r3, #1
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbd8      	blt.n	8000b9e <Result+0x13a>
				}
				temp_var[num] = temp_var[num] + tempkk;
 8000bec:	238f      	movs	r3, #143	@ 0x8f
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2228      	movs	r2, #40	@ 0x28
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	0010      	movs	r0, r2
 8000c00:	0019      	movs	r1, r3
 8000c02:	2380      	movs	r3, #128	@ 0x80
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	1812      	adds	r2, r2, r0
 8000c0c:	414b      	adcs	r3, r1
 8000c0e:	218f      	movs	r1, #143	@ 0x8f
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	7809      	ldrb	r1, [r1, #0]
 8000c14:	2028      	movs	r0, #40	@ 0x28
 8000c16:	1838      	adds	r0, r7, r0
 8000c18:	00c9      	lsls	r1, r1, #3
 8000c1a:	1841      	adds	r1, r0, r1
 8000c1c:	600a      	str	r2, [r1, #0]
 8000c1e:	604b      	str	r3, [r1, #4]
				tmp[j] = 0;
 8000c20:	19bb      	adds	r3, r7, r6
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2214      	movs	r2, #20
 8000c26:	18ba      	adds	r2, r7, r2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t j = 0; j < num_cnt; j++){
 8000c2c:	19bb      	adds	r3, r7, r6
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	19bb      	adds	r3, r7, r6
 8000c32:	3201      	adds	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	238c      	movs	r3, #140	@ 0x8c
 8000c38:	18fa      	adds	r2, r7, r3
 8000c3a:	218e      	movs	r1, #142	@ 0x8e
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d399      	bcc.n	8000b7a <Result+0x116>
			}
			num_cnt = 0;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			num ++;
 8000c4c:	218f      	movs	r1, #143	@ 0x8f
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	3201      	adds	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < strlen(string); i++){
 8000c58:	218d      	movs	r1, #141	@ 0x8d
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	238d      	movs	r3, #141	@ 0x8d
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781e      	ldrb	r6, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fa4b 	bl	8000108 <strlen>
 8000c72:	0003      	movs	r3, r0
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d200      	bcs.n	8000c7a <Result+0x216>
 8000c78:	e71f      	b.n	8000aba <Result+0x56>
		}
	}
	for(uint8_t i = 0; i < 10; i++){
 8000c7a:	237e      	movs	r3, #126	@ 0x7e
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e08c      	b.n	8000d9e <Result+0x33a>
		if (equaltion[i] == 3) {
 8000c84:	257e      	movs	r5, #126	@ 0x7e
 8000c86:	197b      	adds	r3, r7, r5
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2008      	movs	r0, #8
 8000c8c:	183a      	adds	r2, r7, r0
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d13b      	bne.n	8000d0c <Result+0x2a8>
			temp_var[i+1] = temp_var[i] * temp_var[i+1];
 8000c94:	197b      	adds	r3, r7, r5
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2628      	movs	r6, #40	@ 0x28
 8000c9a:	19ba      	adds	r2, r7, r6
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	18d3      	adds	r3, r2, r3
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	6859      	ldr	r1, [r3, #4]
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	19ba      	adds	r2, r7, r6
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	197c      	adds	r4, r7, r5
 8000cb6:	7824      	ldrb	r4, [r4, #0]
 8000cb8:	3401      	adds	r4, #1
 8000cba:	f7ff fadd 	bl	8000278 <__aeabi_lmul>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	000b      	movs	r3, r1
 8000cc2:	19b8      	adds	r0, r7, r6
 8000cc4:	00e1      	lsls	r1, r4, #3
 8000cc6:	1841      	adds	r1, r0, r1
 8000cc8:	600a      	str	r2, [r1, #0]
 8000cca:	604b      	str	r3, [r1, #4]
			temp_var[i] = 0;
 8000ccc:	197b      	adds	r3, r7, r5
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	19ba      	adds	r2, r7, r6
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	18d1      	adds	r1, r2, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	600a      	str	r2, [r1, #0]
 8000cdc:	604b      	str	r3, [r1, #4]
			if (i>0){
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00a      	beq.n	8000cfc <Result+0x298>
				equaltion[i] = equaltion[i-1];
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	197b      	adds	r3, r7, r5
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	1839      	adds	r1, r7, r0
 8000cf4:	5c89      	ldrb	r1, [r1, r2]
 8000cf6:	183a      	adds	r2, r7, r0
 8000cf8:	54d1      	strb	r1, [r2, r3]
 8000cfa:	e04a      	b.n	8000d92 <Result+0x32e>
			}
			else equaltion[i] = 1;
 8000cfc:	237e      	movs	r3, #126	@ 0x7e
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2208      	movs	r2, #8
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	2101      	movs	r1, #1
 8000d08:	54d1      	strb	r1, [r2, r3]
 8000d0a:	e042      	b.n	8000d92 <Result+0x32e>
		}
		else if (equaltion[i] == 4) {
 8000d0c:	257e      	movs	r5, #126	@ 0x7e
 8000d0e:	197b      	adds	r3, r7, r5
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2008      	movs	r0, #8
 8000d14:	183a      	adds	r2, r7, r0
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d13a      	bne.n	8000d92 <Result+0x32e>
			temp_var[i+1] = temp_var[i] / temp_var[i+1];
 8000d1c:	197b      	adds	r3, r7, r5
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2628      	movs	r6, #40	@ 0x28
 8000d22:	19ba      	adds	r2, r7, r6
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	6859      	ldr	r1, [r3, #4]
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	19ba      	adds	r2, r7, r6
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	197c      	adds	r4, r7, r5
 8000d3e:	7824      	ldrb	r4, [r4, #0]
 8000d40:	3401      	adds	r4, #1
 8000d42:	f7ff fa75 	bl	8000230 <__aeabi_ldivmod>
 8000d46:	0002      	movs	r2, r0
 8000d48:	000b      	movs	r3, r1
 8000d4a:	19b8      	adds	r0, r7, r6
 8000d4c:	00e1      	lsls	r1, r4, #3
 8000d4e:	1841      	adds	r1, r0, r1
 8000d50:	600a      	str	r2, [r1, #0]
 8000d52:	604b      	str	r3, [r1, #4]
			temp_var[i] = 0;
 8000d54:	197b      	adds	r3, r7, r5
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	19ba      	adds	r2, r7, r6
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	18d1      	adds	r1, r2, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2300      	movs	r3, #0
 8000d62:	600a      	str	r2, [r1, #0]
 8000d64:	604b      	str	r3, [r1, #4]
			if (i>0){
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00a      	beq.n	8000d84 <Result+0x320>
				equaltion[i] = equaltion[i-1];
 8000d6e:	197b      	adds	r3, r7, r5
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	197b      	adds	r3, r7, r5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2008      	movs	r0, #8
 8000d7a:	1839      	adds	r1, r7, r0
 8000d7c:	5c89      	ldrb	r1, [r1, r2]
 8000d7e:	183a      	adds	r2, r7, r0
 8000d80:	54d1      	strb	r1, [r2, r3]
 8000d82:	e006      	b.n	8000d92 <Result+0x32e>
			}
			else equaltion[i] = 1;
 8000d84:	237e      	movs	r3, #126	@ 0x7e
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	18ba      	adds	r2, r7, r2
 8000d8e:	2101      	movs	r1, #1
 8000d90:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 10; i++){
 8000d92:	217e      	movs	r1, #126	@ 0x7e
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	3201      	adds	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	237e      	movs	r3, #126	@ 0x7e
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b09      	cmp	r3, #9
 8000da6:	d800      	bhi.n	8000daa <Result+0x346>
 8000da8:	e76c      	b.n	8000c84 <Result+0x220>
		}
	}
	for(uint8_t i = 0; i < 10; i++){
 8000daa:	237d      	movs	r3, #125	@ 0x7d
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e063      	b.n	8000e7c <Result+0x418>
		if (equaltion[i] == 1) {
 8000db4:	247d      	movs	r4, #125	@ 0x7d
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2208      	movs	r2, #8
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d11f      	bne.n	8000e04 <Result+0x3a0>
			temp_var[i+1] = temp_var[i] + temp_var[i+1];
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2528      	movs	r5, #40	@ 0x28
 8000dca:	197a      	adds	r2, r7, r5
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	197a      	adds	r2, r7, r5
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	7824      	ldrb	r4, [r4, #0]
 8000de8:	3401      	adds	r4, #1
 8000dea:	1812      	adds	r2, r2, r0
 8000dec:	414b      	adcs	r3, r1
 8000dee:	1978      	adds	r0, r7, r5
 8000df0:	00e1      	lsls	r1, r4, #3
 8000df2:	1841      	adds	r1, r0, r1
 8000df4:	600a      	str	r2, [r1, #0]
 8000df6:	604b      	str	r3, [r1, #4]
 8000df8:	e03a      	b.n	8000e70 <Result+0x40c>
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	080030d0 	.word	0x080030d0
 8000e00:	080030e4 	.word	0x080030e4
		}
		else if (equaltion[i] == 2) {
 8000e04:	247d      	movs	r4, #125	@ 0x7d
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	18ba      	adds	r2, r7, r2
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d11c      	bne.n	8000e4e <Result+0x3ea>
			temp_var[i+1] = temp_var[i] - temp_var[i+1];
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2528      	movs	r5, #40	@ 0x28
 8000e1a:	197a      	adds	r2, r7, r5
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	18d3      	adds	r3, r2, r3
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	197a      	adds	r2, r7, r5
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	7824      	ldrb	r4, [r4, #0]
 8000e38:	3401      	adds	r4, #1
 8000e3a:	1a80      	subs	r0, r0, r2
 8000e3c:	4199      	sbcs	r1, r3
 8000e3e:	0002      	movs	r2, r0
 8000e40:	000b      	movs	r3, r1
 8000e42:	1978      	adds	r0, r7, r5
 8000e44:	00e1      	lsls	r1, r4, #3
 8000e46:	1841      	adds	r1, r0, r1
 8000e48:	600a      	str	r2, [r1, #0]
 8000e4a:	604b      	str	r3, [r1, #4]
 8000e4c:	e010      	b.n	8000e70 <Result+0x40c>
		}
		else if (equaltion[i] == 0) {
 8000e4e:	217d      	movs	r1, #125	@ 0x7d
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2208      	movs	r2, #8
 8000e56:	18ba      	adds	r2, r7, r2
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d108      	bne.n	8000e70 <Result+0x40c>
			return temp_var[i];
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2228      	movs	r2, #40	@ 0x28
 8000e64:	18ba      	adds	r2, r7, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	e00a      	b.n	8000e86 <Result+0x422>
	for(uint8_t i = 0; i < 10; i++){
 8000e70:	217d      	movs	r1, #125	@ 0x7d
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	3201      	adds	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	237d      	movs	r3, #125	@ 0x7d
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b09      	cmp	r3, #9
 8000e84:	d996      	bls.n	8000db4 <Result+0x350>
		}
	}
}
 8000e86:	0010      	movs	r0, r2
 8000e88:	0019      	movs	r1, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b025      	add	sp, #148	@ 0x94
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e90 <reverse>:

// A utility function to reverse a string
void reverse(char str[], int length)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    int start = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
    int end = length - 1;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
    while (start < end) {
 8000ea4:	e01a      	b.n	8000edc <reverse+0x4c>
        char temp = str[start];
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	18d2      	adds	r2, r2, r3
 8000eac:	200f      	movs	r0, #15
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]
        str[start] = str[end];
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	18d2      	adds	r2, r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	18cb      	adds	r3, r1, r3
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	183a      	adds	r2, r7, r0
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	701a      	strb	r2, [r3, #0]
        end--;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
        start++;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
    while (start < end) {
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbe0      	blt.n	8000ea6 <reverse+0x16>
    }
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b006      	add	sp, #24
 8000eec:	bd80      	pop	{r7, pc}

08000eee <citoa>:
// Implementation of citoa()
char* citoa(int64_t num, char* str, int base)
{
 8000eee:	b5b0      	push	{r4, r5, r7, lr}
 8000ef0:	b08a      	sub	sp, #40	@ 0x28
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6138      	str	r0, [r7, #16]
 8000ef6:	6179      	str	r1, [r7, #20]
 8000ef8:	60fa      	str	r2, [r7, #12]
 8000efa:	60bb      	str	r3, [r7, #8]
    int i = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    bool isNegative = false;
 8000f00:	231b      	movs	r3, #27
 8000f02:	2208      	movs	r2, #8
 8000f04:	189b      	adds	r3, r3, r2
 8000f06:	19db      	adds	r3, r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

    /* Handle 0 explicitly, otherwise empty string is
     * printed for 0 */
    if (num == 0) {
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	d10e      	bne.n	8000f32 <citoa+0x44>
        str[i++] = '0';
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	189b      	adds	r3, r3, r2
 8000f20:	2230      	movs	r2, #48	@ 0x30
 8000f22:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	18d3      	adds	r3, r2, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
        return str;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	e062      	b.n	8000ff8 <citoa+0x10a>
    }

    // In standard itoa(), negative numbers are handled
    // only with base 10. Otherwise numbers are
    // considered unsigned.
    if (num < 0 && base == 10) {
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da40      	bge.n	8000fba <citoa+0xcc>
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d13d      	bne.n	8000fba <citoa+0xcc>
        isNegative = true;
 8000f3e:	231b      	movs	r3, #27
 8000f40:	2208      	movs	r2, #8
 8000f42:	189b      	adds	r3, r3, r2
 8000f44:	19db      	adds	r3, r3, r7
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
        num = -num;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	1a80      	subs	r0, r0, r2
 8000f54:	4199      	sbcs	r1, r3
 8000f56:	0002      	movs	r2, r0
 8000f58:	000b      	movs	r3, r1
 8000f5a:	613a      	str	r2, [r7, #16]
 8000f5c:	617b      	str	r3, [r7, #20]
    }

    // Process individual digits
    while (num != 0) {
 8000f5e:	e02c      	b.n	8000fba <citoa+0xcc>
        int rem = num % base;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	001c      	movs	r4, r3
 8000f64:	17db      	asrs	r3, r3, #31
 8000f66:	001d      	movs	r5, r3
 8000f68:	6938      	ldr	r0, [r7, #16]
 8000f6a:	6979      	ldr	r1, [r7, #20]
 8000f6c:	0022      	movs	r2, r4
 8000f6e:	002b      	movs	r3, r5
 8000f70:	f7ff f95e 	bl	8000230 <__aeabi_ldivmod>
 8000f74:	0013      	movs	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	dd04      	ble.n	8000f88 <citoa+0x9a>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3357      	adds	r3, #87	@ 0x57
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e003      	b.n	8000f90 <citoa+0xa2>
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3330      	adds	r3, #48	@ 0x30
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f92:	1c51      	adds	r1, r2, #1
 8000f94:	6279      	str	r1, [r7, #36]	@ 0x24
 8000f96:	0011      	movs	r1, r2
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	1852      	adds	r2, r2, r1
 8000f9c:	7013      	strb	r3, [r2, #0]
        num = num / base;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	17db      	asrs	r3, r3, #31
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6938      	ldr	r0, [r7, #16]
 8000fac:	6979      	ldr	r1, [r7, #20]
 8000fae:	f7ff f93f 	bl	8000230 <__aeabi_ldivmod>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	000b      	movs	r3, r1
 8000fb6:	613a      	str	r2, [r7, #16]
 8000fb8:	617b      	str	r3, [r7, #20]
    while (num != 0) {
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	d1ce      	bne.n	8000f60 <citoa+0x72>
    }

    // If number is negative, append '-'
    if (isNegative)
 8000fc2:	231b      	movs	r3, #27
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	189b      	adds	r3, r3, r2
 8000fc8:	19db      	adds	r3, r3, r7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <citoa+0xf2>
        str[i++] = '-';
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	222d      	movs	r2, #45	@ 0x2d
 8000fde:	701a      	strb	r2, [r3, #0]

    str[i] = '\0'; // Append string terminator
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	18d3      	adds	r3, r2, r3
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

    // Reverse the string
    reverse(str, i);
 8000fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff4d 	bl	8000e90 <reverse>

    return str;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00a      	add	sp, #40	@ 0x28
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	b0a5      	sub	sp, #148	@ 0x94
 8001004:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fba9 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f987 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fa27 	bl	8001460 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001012:	f000 f9cd 	bl	80013b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8001016:	2360      	movs	r3, #96	@ 0x60
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	4ab5      	ldr	r2, [pc, #724]	@ (80012f0 <main+0x2f0>)
 800101c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800101e:	c313      	stmia	r3!, {r0, r1, r4}
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	601a      	str	r2, [r3, #0]
  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 8001024:	2258      	movs	r2, #88	@ 0x58
 8001026:	18bb      	adds	r3, r7, r2
 8001028:	4ab2      	ldr	r2, [pc, #712]	@ (80012f4 <main+0x2f4>)
 800102a:	ca03      	ldmia	r2!, {r0, r1}
 800102c:	c303      	stmia	r3!, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_E_Pin, LCD_4_BIT_MODE);
 800102e:	2640      	movs	r6, #64	@ 0x40
 8001030:	19bd      	adds	r5, r7, r6
 8001032:	0038      	movs	r0, r7
 8001034:	2390      	movs	r3, #144	@ 0x90
 8001036:	05dc      	lsls	r4, r3, #23
 8001038:	2258      	movs	r2, #88	@ 0x58
 800103a:	18ba      	adds	r2, r7, r2
 800103c:	2360      	movs	r3, #96	@ 0x60
 800103e:	18f9      	adds	r1, r7, r3
 8001040:	2300      	movs	r3, #0
 8001042:	9303      	str	r3, [sp, #12]
 8001044:	2302      	movs	r3, #2
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2390      	movs	r3, #144	@ 0x90
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2301      	movs	r3, #1
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	0023      	movs	r3, r4
 8001054:	f7ff fa78 	bl	8000548 <Lcd_create>
 8001058:	003a      	movs	r2, r7
 800105a:	002b      	movs	r3, r5
 800105c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800105e:	c313      	stmia	r3!, {r0, r1, r4}
 8001060:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001062:	c313      	stmia	r3!, {r0, r1, r4}

  Lcd_cursor(&lcd, 0, 0);
 8001064:	19bb      	adds	r3, r7, r6
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff faf8 	bl	8000660 <Lcd_cursor>
  Lcd_string(&lcd, "BTL ESD NHOM 18");
 8001070:	4aa1      	ldr	r2, [pc, #644]	@ (80012f8 <main+0x2f8>)
 8001072:	19bb      	adds	r3, r7, r6
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fac8 	bl	800060c <Lcd_string>
  HAL_Delay(1500);
 800107c:	4b9f      	ldr	r3, [pc, #636]	@ (80012fc <main+0x2fc>)
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fbd0 	bl	8001824 <HAL_Delay>
  Lcd_clear(&lcd);
 8001084:	19bb      	adds	r3, r7, r6
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fb0c 	bl	80006a4 <Lcd_clear>

  HAL_TIM_Base_Start_IT(&htim3);
 800108c:	4b9c      	ldr	r3, [pc, #624]	@ (8001300 <main+0x300>)
 800108e:	0018      	movs	r0, r3
 8001090:	f001 fb68 	bl	8002764 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001094:	4b9a      	ldr	r3, [pc, #616]	@ (8001300 <main+0x300>)
 8001096:	0018      	movs	r0, r3
 8001098:	f001 fb26 	bl	80026e8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cursor_cnt = 0;
 800109c:	237f      	movs	r3, #127	@ 0x7f
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  uint8_t splash_cnt = 0;
 80010a4:	237e      	movs	r3, #126	@ 0x7e
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  uint8_t cursor_max = 0;
 80010ac:	237d      	movs	r3, #125	@ 0x7d
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
  uint8_t lcd_zero = 0;
 80010b4:	237c      	movs	r3, #124	@ 0x7c
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
  uint8_t current_layout = 0;
 80010bc:	237b      	movs	r3, #123	@ 0x7b
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  char s;
  char *lcd_buffer=(char*) malloc(200+1);
 80010c4:	20c9      	movs	r0, #201	@ 0xc9
 80010c6:	f001 feeb 	bl	8002ea0 <malloc>
 80010ca:	0003      	movs	r3, r0
 80010cc:	677b      	str	r3, [r7, #116]	@ 0x74
  memset(lcd_buffer,0,strlen(lcd_buffer));
 80010ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff f819 	bl	8000108 <strlen>
 80010d6:	0002      	movs	r2, r0
 80010d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010da:	2100      	movs	r1, #0
 80010dc:	0018      	movs	r0, r3
 80010de:	f001 ff9b 	bl	8003018 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  key_current = Keypad_Getkey();
 80010e2:	f7ff fc61 	bl	80009a8 <Keypad_Getkey>
 80010e6:	0003      	movs	r3, r0
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b86      	ldr	r3, [pc, #536]	@ (8001304 <main+0x304>)
 80010ec:	701a      	strb	r2, [r3, #0]
	  if(key_current != 0 && key_current != key_prev) {
 80010ee:	4b85      	ldr	r3, [pc, #532]	@ (8001304 <main+0x304>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d100      	bne.n	80010f8 <main+0xf8>
 80010f6:	e0d3      	b.n	80012a0 <main+0x2a0>
 80010f8:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <main+0x304>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b82      	ldr	r3, [pc, #520]	@ (8001308 <main+0x308>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d100      	bne.n	8001106 <main+0x106>
 8001104:	e0cc      	b.n	80012a0 <main+0x2a0>
		  s = keypad_layout[current_layout][key_current-1];
 8001106:	247b      	movs	r4, #123	@ 0x7b
 8001108:	193b      	adds	r3, r7, r4
 800110a:	7819      	ldrb	r1, [r3, #0]
 800110c:	4b7d      	ldr	r3, [pc, #500]	@ (8001304 <main+0x304>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	2573      	movs	r5, #115	@ 0x73
 8001114:	197b      	adds	r3, r7, r5
 8001116:	487d      	ldr	r0, [pc, #500]	@ (800130c <main+0x30c>)
 8001118:	0109      	lsls	r1, r1, #4
 800111a:	1841      	adds	r1, r0, r1
 800111c:	5c8a      	ldrb	r2, [r1, r2]
 800111e:	701a      	strb	r2, [r3, #0]

		  if (s == keypad_layout[0][12]) {
 8001120:	2273      	movs	r2, #115	@ 0x73
 8001122:	197b      	adds	r3, r7, r5
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4293      	cmp	r3, r2
 8001128:	d103      	bne.n	8001132 <main+0x132>
			  current_layout = 1;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e07b      	b.n	800122a <main+0x22a>
		  }
		  else if (s == keypad_layout[1][12]) {
 8001132:	2253      	movs	r2, #83	@ 0x53
 8001134:	2373      	movs	r3, #115	@ 0x73
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4293      	cmp	r3, r2
 800113c:	d104      	bne.n	8001148 <main+0x148>
			  current_layout = 0;
 800113e:	237b      	movs	r3, #123	@ 0x7b
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e070      	b.n	800122a <main+0x22a>
		  }
		  else if (s == keypad_layout[1][13]) {
 8001148:	2263      	movs	r2, #99	@ 0x63
 800114a:	2373      	movs	r3, #115	@ 0x73
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	d113      	bne.n	800117c <main+0x17c>
			  Lcd_clear(&lcd);
 8001154:	2340      	movs	r3, #64	@ 0x40
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff faa3 	bl	80006a4 <Lcd_clear>
			  cursor_cnt = 0;
 800115e:	237f      	movs	r3, #127	@ 0x7f
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
			  memset(lcd_buffer,0,strlen(lcd_buffer));
 8001166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001168:	0018      	movs	r0, r3
 800116a:	f7fe ffcd 	bl	8000108 <strlen>
 800116e:	0002      	movs	r2, r0
 8001170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001172:	2100      	movs	r1, #0
 8001174:	0018      	movs	r0, r3
 8001176:	f001 ff4f 	bl	8003018 <memset>
 800117a:	e056      	b.n	800122a <main+0x22a>
		  }
		  else if (s == keypad_layout[0][14]) {
 800117c:	223d      	movs	r2, #61	@ 0x3d
 800117e:	2173      	movs	r1, #115	@ 0x73
 8001180:	187b      	adds	r3, r7, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d11e      	bne.n	80011c6 <main+0x1c6>
			  char snum[19];
			  lcd_buffer[cursor_max] = s;
 8001188:	237d      	movs	r3, #125	@ 0x7d
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	187a      	adds	r2, r7, r1
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	701a      	strb	r2, [r3, #0]
			  citoa(Result(lcd_buffer), snum, 10);
 8001198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fc62 	bl	8000a64 <Result>
 80011a0:	241c      	movs	r4, #28
 80011a2:	193a      	adds	r2, r7, r4
 80011a4:	230a      	movs	r3, #10
 80011a6:	f7ff fea2 	bl	8000eee <citoa>
			  Lcd_cursor(&lcd, 1, 0);
 80011aa:	2540      	movs	r5, #64	@ 0x40
 80011ac:	197b      	adds	r3, r7, r5
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff fa54 	bl	8000660 <Lcd_cursor>
			  Lcd_string(&lcd, snum);
 80011b8:	193a      	adds	r2, r7, r4
 80011ba:	197b      	adds	r3, r7, r5
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fa24 	bl	800060c <Lcd_string>
 80011c4:	e031      	b.n	800122a <main+0x22a>
		  }
		  else if (s == '<') {
 80011c6:	2373      	movs	r3, #115	@ 0x73
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b3c      	cmp	r3, #60	@ 0x3c
 80011ce:	d106      	bne.n	80011de <main+0x1de>
			  cursor_cnt --;
 80011d0:	217f      	movs	r1, #127	@ 0x7f
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	3a01      	subs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e025      	b.n	800122a <main+0x22a>
		  }
		  else if (s == '>') {
 80011de:	2373      	movs	r3, #115	@ 0x73
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80011e6:	d10d      	bne.n	8001204 <main+0x204>
			  if (cursor_cnt < cursor_max) {
 80011e8:	217f      	movs	r1, #127	@ 0x7f
 80011ea:	187a      	adds	r2, r7, r1
 80011ec:	237d      	movs	r3, #125	@ 0x7d
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d218      	bcs.n	800122a <main+0x22a>
				  cursor_cnt ++;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	3201      	adds	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e012      	b.n	800122a <main+0x22a>
			  }
		  }
		  else {
			  lcd_buffer[cursor_cnt] = s;
 8001204:	217f      	movs	r1, #127	@ 0x7f
 8001206:	187b      	adds	r3, r7, r1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	2273      	movs	r2, #115	@ 0x73
 8001210:	18ba      	adds	r2, r7, r2
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	701a      	strb	r2, [r3, #0]

			  cursor_cnt ++;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	187b      	adds	r3, r7, r1
 800121c:	3201      	adds	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
			  cursor_max = cursor_cnt;
 8001220:	237d      	movs	r3, #125	@ 0x7d
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	187a      	adds	r2, r7, r1
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	701a      	strb	r2, [r3, #0]
		  }
		  // print lcd
		  if (cursor_cnt>15){
 800122a:	227f      	movs	r2, #127	@ 0x7f
 800122c:	18bb      	adds	r3, r7, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d906      	bls.n	8001242 <main+0x242>
			  lcd_zero = cursor_cnt-15;
 8001234:	237c      	movs	r3, #124	@ 0x7c
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	18ba      	adds	r2, r7, r2
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	3a0f      	subs	r2, #15
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e003      	b.n	800124a <main+0x24a>
		  }
		  else {
			  lcd_zero = 0;
 8001242:	237c      	movs	r3, #124	@ 0x7c
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		  }
		  char subbuff[16];
		  memcpy( subbuff, &lcd_buffer[lcd_zero], 15 );
 800124a:	237c      	movs	r3, #124	@ 0x7c
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001252:	18d1      	adds	r1, r2, r3
 8001254:	2430      	movs	r4, #48	@ 0x30
 8001256:	193b      	adds	r3, r7, r4
 8001258:	220f      	movs	r2, #15
 800125a:	0018      	movs	r0, r3
 800125c:	f001 ff22 	bl	80030a4 <memcpy>
		  subbuff[15] = '\0';
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2200      	movs	r2, #0
 8001264:	73da      	strb	r2, [r3, #15]
		  Lcd_cursor(&lcd, 0, 0);
 8001266:	2540      	movs	r5, #64	@ 0x40
 8001268:	197b      	adds	r3, r7, r5
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff f9f6 	bl	8000660 <Lcd_cursor>
		  Lcd_string(&lcd, subbuff);
 8001274:	193a      	adds	r2, r7, r4
 8001276:	197b      	adds	r3, r7, r5
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff f9c6 	bl	800060c <Lcd_string>

		  if (cursor_cnt>15){
 8001280:	237f      	movs	r3, #127	@ 0x7f
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d904      	bls.n	8001294 <main+0x294>
			  	  splash_cnt = 15;
 800128a:	237e      	movs	r3, #126	@ 0x7e
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	220f      	movs	r2, #15
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e005      	b.n	80012a0 <main+0x2a0>
			 }
		  else splash_cnt = cursor_cnt;
 8001294:	237e      	movs	r3, #126	@ 0x7e
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	227f      	movs	r2, #127	@ 0x7f
 800129a:	18ba      	adds	r2, r7, r2
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	701a      	strb	r2, [r3, #0]

	  }
	  if (splash){
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <main+0x310>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00f      	beq.n	80012c8 <main+0x2c8>
		  Lcd_cursor(&lcd, 0, splash_cnt);
 80012a8:	237e      	movs	r3, #126	@ 0x7e
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	2440      	movs	r4, #64	@ 0x40
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2100      	movs	r1, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff f9d3 	bl	8000660 <Lcd_cursor>
		  Lcd_string(&lcd, " ");
 80012ba:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <main+0x314>)
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff f9a3 	bl	800060c <Lcd_string>
 80012c6:	e00e      	b.n	80012e6 <main+0x2e6>
	  }
	  else {
		  Lcd_cursor(&lcd, 0, splash_cnt);
 80012c8:	237e      	movs	r3, #126	@ 0x7e
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	2440      	movs	r4, #64	@ 0x40
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	2100      	movs	r1, #0
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff f9c3 	bl	8000660 <Lcd_cursor>
		  Lcd_string(&lcd, "_");
 80012da:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <main+0x318>)
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff f993 	bl	800060c <Lcd_string>

	  }
	  key_prev = key_current;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <main+0x304>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <main+0x308>)
 80012ec:	701a      	strb	r2, [r3, #0]
	  key_current = Keypad_Getkey();
 80012ee:	e6f8      	b.n	80010e2 <main+0xe2>
 80012f0:	08003108 	.word	0x08003108
 80012f4:	08003118 	.word	0x08003118
 80012f8:	080030f0 	.word	0x080030f0
 80012fc:	000005dc 	.word	0x000005dc
 8001300:	20000078 	.word	0x20000078
 8001304:	200000c0 	.word	0x200000c0
 8001308:	200000c1 	.word	0x200000c1
 800130c:	08003154 	.word	0x08003154
 8001310:	200000c3 	.word	0x200000c3
 8001314:	08003100 	.word	0x08003100
 8001318:	08003104 	.word	0x08003104

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b091      	sub	sp, #68	@ 0x44
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	2410      	movs	r4, #16
 8001324:	193b      	adds	r3, r7, r4
 8001326:	0018      	movs	r0, r3
 8001328:	2330      	movs	r3, #48	@ 0x30
 800132a:	001a      	movs	r2, r3
 800132c:	2100      	movs	r1, #0
 800132e:	f001 fe73 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001332:	003b      	movs	r3, r7
 8001334:	0018      	movs	r0, r3
 8001336:	2310      	movs	r3, #16
 8001338:	001a      	movs	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f001 fe6c 	bl	8003018 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	0021      	movs	r1, r4
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2201      	movs	r2, #1
 800134c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2202      	movs	r2, #2
 8001352:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0252      	lsls	r2, r2, #9
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	0352      	lsls	r2, r2, #13
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	187b      	adds	r3, r7, r1
 800136c:	0018      	movs	r0, r3
 800136e:	f000 fd05 	bl	8001d7c <HAL_RCC_OscConfig>
 8001372:	1e03      	subs	r3, r0, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001376:	f000 f913 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	003b      	movs	r3, r7
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	003b      	movs	r3, r7
 8001382:	2202      	movs	r2, #2
 8001384:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	003b      	movs	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138c:	003b      	movs	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001392:	003b      	movs	r3, r7
 8001394:	2101      	movs	r1, #1
 8001396:	0018      	movs	r0, r3
 8001398:	f001 f80a 	bl	80023b0 <HAL_RCC_ClockConfig>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013a0:	f000 f8fe 	bl	80015a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013a4:	f001 f8d2 	bl	800254c <HAL_RCC_EnableCSS>
}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b011      	add	sp, #68	@ 0x44
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	2308      	movs	r3, #8
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	0018      	movs	r0, r3
 80013bc:	2310      	movs	r3, #16
 80013be:	001a      	movs	r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	f001 fe29 	bl	8003018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	003b      	movs	r3, r7
 80013c8:	0018      	movs	r0, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f001 fe22 	bl	8003018 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <MX_TIM3_Init+0xa4>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <MX_TIM3_Init+0xa8>)
 80013de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e8:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <MX_TIM3_Init+0xac>)
 80013ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f001 f923 	bl	8002646 <HAL_TIM_Base_Init>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001404:	f000 f8cc 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	2108      	movs	r1, #8
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	0152      	lsls	r2, r2, #5
 8001410:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001412:	187a      	adds	r2, r7, r1
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_TIM3_Init+0xa0>)
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f001 fad7 	bl	80029cc <HAL_TIM_ConfigClockSource>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001422:	f000 f8bd 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	003b      	movs	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	003b      	movs	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001432:	003a      	movs	r2, r7
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_TIM3_Init+0xa0>)
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f001 fccf 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 f8ad 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b006      	add	sp, #24
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	20000078 	.word	0x20000078
 8001454:	40000400 	.word	0x40000400
 8001458:	000018ff 	.word	0x000018ff
 800145c:	00001388 	.word	0x00001388

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	240c      	movs	r4, #12
 8001468:	193b      	adds	r3, r7, r4
 800146a:	0018      	movs	r0, r3
 800146c:	2314      	movs	r3, #20
 800146e:	001a      	movs	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	f001 fdd1 	bl	8003018 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b39      	ldr	r3, [pc, #228]	@ (800155c <MX_GPIO_Init+0xfc>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	4b38      	ldr	r3, [pc, #224]	@ (800155c <MX_GPIO_Init+0xfc>)
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	03c9      	lsls	r1, r1, #15
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b35      	ldr	r3, [pc, #212]	@ (800155c <MX_GPIO_Init+0xfc>)
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	03db      	lsls	r3, r3, #15
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b32      	ldr	r3, [pc, #200]	@ (800155c <MX_GPIO_Init+0xfc>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b31      	ldr	r3, [pc, #196]	@ (800155c <MX_GPIO_Init+0xfc>)
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	0289      	lsls	r1, r1, #10
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <MX_GPIO_Init+0xfc>)
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_GPIO_Init+0xfc>)
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <MX_GPIO_Init+0xfc>)
 80014b4:	2180      	movs	r1, #128	@ 0x80
 80014b6:	02c9      	lsls	r1, r1, #11
 80014b8:	430a      	orrs	r2, r1
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <MX_GPIO_Init+0xfc>)
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	02db      	lsls	r3, r3, #11
 80014c4:	4013      	ands	r3, r2
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80014ca:	2390      	movs	r3, #144	@ 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2200      	movs	r2, #0
 80014d0:	21ff      	movs	r1, #255	@ 0xff
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fc35 	bl	8001d42 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_GPIO_Init+0x100>)
 80014da:	2200      	movs	r2, #0
 80014dc:	2102      	movs	r1, #2
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 fc2f 	bl	8001d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	22ff      	movs	r2, #255	@ 0xff
 80014e8:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2201      	movs	r2, #1
 80014ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	193a      	adds	r2, r7, r4
 80014fe:	2390      	movs	r3, #144	@ 0x90
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f000 fa8f 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : R0_Pin */
  GPIO_InitStruct.Pin = R0_Pin;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2201      	movs	r2, #1
 8001514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 8001522:	193b      	adds	r3, r7, r4
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <MX_GPIO_Init+0x100>)
 8001526:	0019      	movs	r1, r3
 8001528:	0010      	movs	r0, r2
 800152a:	f000 fa7d 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800152e:	0021      	movs	r1, r4
 8001530:	187b      	adds	r3, r7, r1
 8001532:	22c0      	movs	r2, #192	@ 0xc0
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2201      	movs	r2, #1
 8001542:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	187a      	adds	r2, r7, r1
 8001546:	2390      	movs	r3, #144	@ 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f000 fa6b 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b009      	add	sp, #36	@ 0x24
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d10d      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0x2c>
		splash = !splash;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	4193      	sbcs	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2201      	movs	r2, #1
 8001580:	4053      	eors	r3, r2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	1c1a      	adds	r2, r3, #0
 8001586:	2301      	movs	r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800158e:	701a      	strb	r2, [r3, #0]
	}
}
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000078 	.word	0x20000078
 800159c:	200000c3 	.word	0x200000c3

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_MspInit+0x44>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_MspInit+0x44>)
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	0549      	lsls	r1, r1, #21
 80015d4:	430a      	orrs	r2, r1
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_MspInit+0x44>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_TIM_Base_MspInit+0x44>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d113      	bne.n	800162e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_TIM_Base_MspInit+0x48>)
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_TIM_Base_MspInit+0x48>)
 800160c:	2102      	movs	r1, #2
 800160e:	430a      	orrs	r2, r1
 8001610:	61da      	str	r2, [r3, #28]
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_TIM_Base_MspInit+0x48>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2010      	movs	r0, #16
 8001624:	f000 f9ce 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001628:	2010      	movs	r0, #16
 800162a:	f000 f9e0 	bl	80019ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	40000400 	.word	0x40000400
 800163c:	40021000 	.word	0x40021000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001644:	f000 ffe6 	bl	8002614 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x8>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	46c0      	nop			@ (mov r8, r8)
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f8be 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	46c0      	nop			@ (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <TIM3_IRQHandler+0x14>)
 800167e:	0018      	movs	r0, r3
 8001680:	f001 f8b6 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	20000078 	.word	0x20000078

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	18d3      	adds	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f001 fcc4 	bl	800304c <__errno>
 80016c4:	0003      	movs	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	425b      	negs	r3, r3
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	18d2      	adds	r2, r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <_sbrk+0x64>)
 80016e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b006      	add	sp, #24
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20001000 	.word	0x20001000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	20000218 	.word	0x20000218

080016fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800170a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800170c:	f7ff fff6 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopForever+0xe>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopForever+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001736:	f001 fc8f 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800173a:	f7ff fc61 	bl	8001000 <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   r0, =_estack
 8001740:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800174c:	080031b4 	.word	0x080031b4
  ldr r2, =_sbss
 8001750:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001754:	20000214 	.word	0x20000214

08001758 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_IRQHandler>
	...

0800175c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_Init+0x24>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_Init+0x24>)
 8001766:	2110      	movs	r1, #16
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f809 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001772:	f7ff ff1b 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_InitTick+0x5c>)
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_InitTick+0x60>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	0019      	movs	r1, r3
 8001796:	23fa      	movs	r3, #250	@ 0xfa
 8001798:	0098      	lsls	r0, r3, #2
 800179a:	f7fe fcbd 	bl	8000118 <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	0019      	movs	r1, r3
 80017a2:	0020      	movs	r0, r4
 80017a4:	f7fe fcb8 	bl	8000118 <__udivsi3>
 80017a8:	0003      	movs	r3, r0
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f92f 	bl	8001a0e <HAL_SYSTICK_Config>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00f      	b.n	80017d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d80b      	bhi.n	80017d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2301      	movs	r3, #1
 80017c2:	425b      	negs	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f8fc 	bl	80019c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_InitTick+0x64>)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b003      	add	sp, #12
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_IncTick+0x1c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_IncTick+0x20>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	18d2      	adds	r2, r2, r3
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_IncTick+0x20>)
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	20000008 	.word	0x20000008
 800180c:	200000c8 	.word	0x200000c8

08001810 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b02      	ldr	r3, [pc, #8]	@ (8001820 <HAL_GetTick+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	200000c8 	.word	0x200000c8

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff fff0 	bl	8001810 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	001a      	movs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	189b      	adds	r3, r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	f7ff ffe0 	bl	8001810 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	20000008 	.word	0x20000008

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b7f      	cmp	r3, #127	@ 0x7f
 800187e:	d809      	bhi.n	8001894 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	001a      	movs	r2, r3
 8001886:	231f      	movs	r3, #31
 8001888:	401a      	ands	r2, r3
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_EnableIRQ+0x30>)
 800188c:	2101      	movs	r1, #1
 800188e:	4091      	lsls	r1, r2
 8001890:	000a      	movs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
  }
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	0002      	movs	r2, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80018b4:	d828      	bhi.n	8001908 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001974 <__NVIC_SetPriority+0xd4>)
 80018b8:	1dfb      	adds	r3, r7, #7
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	33c0      	adds	r3, #192	@ 0xc0
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	589b      	ldr	r3, [r3, r2]
 80018c6:	1dfa      	adds	r2, r7, #7
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	0011      	movs	r1, r2
 80018cc:	2203      	movs	r2, #3
 80018ce:	400a      	ands	r2, r1
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	21ff      	movs	r1, #255	@ 0xff
 80018d4:	4091      	lsls	r1, r2
 80018d6:	000a      	movs	r2, r1
 80018d8:	43d2      	mvns	r2, r2
 80018da:	401a      	ands	r2, r3
 80018dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	22ff      	movs	r2, #255	@ 0xff
 80018e4:	401a      	ands	r2, r3
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	2303      	movs	r3, #3
 80018ee:	4003      	ands	r3, r0
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f4:	481f      	ldr	r0, [pc, #124]	@ (8001974 <__NVIC_SetPriority+0xd4>)
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	430a      	orrs	r2, r1
 8001900:	33c0      	adds	r3, #192	@ 0xc0
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001906:	e031      	b.n	800196c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001908:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <__NVIC_SetPriority+0xd8>)
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	0019      	movs	r1, r3
 8001910:	230f      	movs	r3, #15
 8001912:	400b      	ands	r3, r1
 8001914:	3b08      	subs	r3, #8
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3306      	adds	r3, #6
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	3304      	adds	r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1dfa      	adds	r2, r7, #7
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	0011      	movs	r1, r2
 8001928:	2203      	movs	r2, #3
 800192a:	400a      	ands	r2, r1
 800192c:	00d2      	lsls	r2, r2, #3
 800192e:	21ff      	movs	r1, #255	@ 0xff
 8001930:	4091      	lsls	r1, r2
 8001932:	000a      	movs	r2, r1
 8001934:	43d2      	mvns	r2, r2
 8001936:	401a      	ands	r2, r3
 8001938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	22ff      	movs	r2, #255	@ 0xff
 8001940:	401a      	ands	r2, r3
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	0018      	movs	r0, r3
 8001948:	2303      	movs	r3, #3
 800194a:	4003      	ands	r3, r0
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001950:	4809      	ldr	r0, [pc, #36]	@ (8001978 <__NVIC_SetPriority+0xd8>)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	001c      	movs	r4, r3
 8001958:	230f      	movs	r3, #15
 800195a:	4023      	ands	r3, r4
 800195c:	3b08      	subs	r3, #8
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	430a      	orrs	r2, r1
 8001962:	3306      	adds	r3, #6
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	18c3      	adds	r3, r0, r3
 8001968:	3304      	adds	r3, #4
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b003      	add	sp, #12
 8001972:	bd90      	pop	{r4, r7, pc}
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	045b      	lsls	r3, r3, #17
 800198c:	429a      	cmp	r2, r3
 800198e:	d301      	bcc.n	8001994 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001990:	2301      	movs	r3, #1
 8001992:	e010      	b.n	80019b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <SysTick_Config+0x44>)
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	3a01      	subs	r2, #1
 800199a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199c:	2301      	movs	r3, #1
 800199e:	425b      	negs	r3, r3
 80019a0:	2103      	movs	r1, #3
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff7c 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x44>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x44>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	210f      	movs	r1, #15
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	1c02      	adds	r2, r0, #0
 80019d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b004      	add	sp, #16
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	0002      	movs	r2, r0
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff33 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff ffaf 	bl	800197c <SysTick_Config>
 8001a1e:	0003      	movs	r3, r0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e14f      	b.n	8001cd8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x28>
 8001a4e:	e140      	b.n	8001cd2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	400b      	ands	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	23c0      	movs	r3, #192	@ 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x174>
 8001b9a:	e09a      	b.n	8001cd2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <HAL_GPIO_Init+0x2c8>)
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <HAL_GPIO_Init+0x2c8>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	619a      	str	r2, [r3, #24]
 8001ba8:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <HAL_GPIO_Init+0x2c8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	589b      	ldr	r3, [r3, r2]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	2390      	movs	r3, #144	@ 0x90
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x1e2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x1de>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a43      	ldr	r2, [pc, #268]	@ (8001cfc <HAL_GPIO_Init+0x2d4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x1da>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <HAL_GPIO_Init+0x2d8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x1d6>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	2103      	movs	r1, #3
 8001c10:	400a      	ands	r2, r1
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	035b      	lsls	r3, r3, #13
 8001c42:	4013      	ands	r3, r2
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	039b      	lsls	r3, r3, #14
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	029b      	lsls	r3, r3, #10
 8001c96:	4013      	ands	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	40da      	lsrs	r2, r3
 8001ce0:	1e13      	subs	r3, r2, #0
 8001ce2:	d000      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
 8001ce4:	e6a8      	b.n	8001a38 <HAL_GPIO_Init+0x10>
  } 
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46c0      	nop			@ (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	000a      	movs	r2, r1
 8001d12:	1cbb      	adds	r3, r7, #2
 8001d14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	1cba      	adds	r2, r7, #2
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d22:	230f      	movs	r3, #15
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e003      	b.n	8001d34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d34:	230f      	movs	r3, #15
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
  }
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	0008      	movs	r0, r1
 8001d4c:	0011      	movs	r1, r2
 8001d4e:	1cbb      	adds	r3, r7, #2
 8001d50:	1c02      	adds	r2, r0, #0
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	1c7b      	adds	r3, r7, #1
 8001d56:	1c0a      	adds	r2, r1, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5a:	1c7b      	adds	r3, r7, #1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d62:	1cbb      	adds	r3, r7, #2
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6c:	1cbb      	adds	r3, r7, #2
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e301      	b.n	8002392 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1e>
 8001d98:	e08d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d9a:	4bc3      	ldr	r3, [pc, #780]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d00e      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da6:	4bc0      	ldr	r3, [pc, #768]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	220c      	movs	r2, #12
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x64>
 8001db2:	4bbd      	ldr	r3, [pc, #756]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	401a      	ands	r2, r3
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4bb8      	ldr	r3, [pc, #736]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x56>
 8001dd0:	e070      	b.n	8001eb4 <HAL_RCC_OscConfig+0x138>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d000      	beq.n	8001ddc <HAL_RCC_OscConfig+0x60>
 8001dda:	e06b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e2d8      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x7c>
 8001de8:	4baf      	ldr	r3, [pc, #700]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4bae      	ldr	r3, [pc, #696]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	0249      	lsls	r1, r1, #9
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e02f      	b.n	8001e58 <HAL_RCC_OscConfig+0xdc>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x9e>
 8001e00:	4ba9      	ldr	r3, [pc, #676]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4ba8      	ldr	r3, [pc, #672]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	49a9      	ldr	r1, [pc, #676]	@ (80020ac <HAL_RCC_OscConfig+0x330>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4ba6      	ldr	r3, [pc, #664]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4ba5      	ldr	r3, [pc, #660]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	49a7      	ldr	r1, [pc, #668]	@ (80020b0 <HAL_RCC_OscConfig+0x334>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e01e      	b.n	8001e58 <HAL_RCC_OscConfig+0xdc>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d10e      	bne.n	8001e40 <HAL_RCC_OscConfig+0xc4>
 8001e22:	4ba1      	ldr	r3, [pc, #644]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4ba0      	ldr	r3, [pc, #640]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	02c9      	lsls	r1, r1, #11
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b9d      	ldr	r3, [pc, #628]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b9c      	ldr	r3, [pc, #624]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e36:	2180      	movs	r1, #128	@ 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xdc>
 8001e40:	4b99      	ldr	r3, [pc, #612]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b98      	ldr	r3, [pc, #608]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	4999      	ldr	r1, [pc, #612]	@ (80020ac <HAL_RCC_OscConfig+0x330>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b95      	ldr	r3, [pc, #596]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	4997      	ldr	r1, [pc, #604]	@ (80020b0 <HAL_RCC_OscConfig+0x334>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d014      	beq.n	8001e8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fcd6 	bl	8001810 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fcd1 	bl	8001810 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	@ 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e28a      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0xee>
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fcc1 	bl	8001810 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fcbc 	bl	8001810 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e275      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x118>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x146>
 8001ec0:	e069      	b.n	8001f96 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ec2:	4b79      	ldr	r3, [pc, #484]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ecc:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d11c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x196>
 8001ed8:	4b73      	ldr	r3, [pc, #460]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d116      	bne.n	8001f12 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee4:	4b70      	ldr	r3, [pc, #448]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x17e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e24b      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	22f8      	movs	r2, #248	@ 0xf8
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	00da      	lsls	r2, r3, #3
 8001f0a:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	e041      	b.n	8001f96 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1a:	4b63      	ldr	r3, [pc, #396]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b62      	ldr	r3, [pc, #392]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	2101      	movs	r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fc73 	bl	8001810 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fc6e 	bl	8001810 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e227      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f1      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b56      	ldr	r3, [pc, #344]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	22f8      	movs	r2, #248	@ 0xf8
 8001f52:	4393      	bics	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	4b52      	ldr	r3, [pc, #328]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e018      	b.n	8001f96 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc4e 	bl	8001810 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc49 	bl	8001810 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e202      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8c:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d1f1      	bne.n	8001f7a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d036      	beq.n	800200e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fac:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fc2c 	bl	8001810 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fc27 	bl	8001810 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1e0      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d0f1      	beq.n	8001fbe <HAL_RCC_OscConfig+0x242>
 8001fda:	e018      	b.n	800200e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fc12 	bl	8001810 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc0d 	bl	8001810 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1c6      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d1f1      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2204      	movs	r2, #4
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x29e>
 8002018:	e0b4      	b.n	8002184 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	201f      	movs	r0, #31
 800201c:	183b      	adds	r3, r7, r0
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	4013      	ands	r3, r2
 800202c:	d110      	bne.n	8002050 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	0549      	lsls	r1, r1, #21
 8002038:	430a      	orrs	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	055b      	lsls	r3, r3, #21
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800204a:	183b      	adds	r3, r7, r0
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_RCC_OscConfig+0x338>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d11a      	bne.n	8002092 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205c:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_RCC_OscConfig+0x338>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_RCC_OscConfig+0x338>)
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	0049      	lsls	r1, r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff fbd1 	bl	8001810 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7ff fbcc 	bl	8001810 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e185      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_OscConfig+0x338>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d10e      	bne.n	80020b8 <HAL_RCC_OscConfig+0x33c>
 800209a:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	4b02      	ldr	r3, [pc, #8]	@ (80020a8 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	621a      	str	r2, [r3, #32]
 80020a6:	e035      	b.n	8002114 <HAL_RCC_OscConfig+0x398>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	fffeffff 	.word	0xfffeffff
 80020b0:	fffbffff 	.word	0xfffbffff
 80020b4:	40007000 	.word	0x40007000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x35e>
 80020c0:	4bb6      	ldr	r3, [pc, #728]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4bb5      	ldr	r3, [pc, #724]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	438a      	bics	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	4bb3      	ldr	r3, [pc, #716]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4bb2      	ldr	r3, [pc, #712]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020d2:	2104      	movs	r1, #4
 80020d4:	438a      	bics	r2, r1
 80020d6:	621a      	str	r2, [r3, #32]
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x398>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x380>
 80020e2:	4bae      	ldr	r3, [pc, #696]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4bad      	ldr	r3, [pc, #692]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020e8:	2104      	movs	r1, #4
 80020ea:	430a      	orrs	r2, r1
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	4bab      	ldr	r3, [pc, #684]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	4baa      	ldr	r3, [pc, #680]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	430a      	orrs	r2, r1
 80020f8:	621a      	str	r2, [r3, #32]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x398>
 80020fc:	4ba7      	ldr	r3, [pc, #668]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	4ba6      	ldr	r3, [pc, #664]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	621a      	str	r2, [r3, #32]
 8002108:	4ba4      	ldr	r3, [pc, #656]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4ba3      	ldr	r3, [pc, #652]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800210e:	2104      	movs	r1, #4
 8002110:	438a      	bics	r2, r1
 8002112:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d014      	beq.n	8002146 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff fb78 	bl	8001810 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	e009      	b.n	800213a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff fb73 	bl	8001810 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a9b      	ldr	r2, [pc, #620]	@ (80023a0 <HAL_RCC_OscConfig+0x624>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e12b      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b98      	ldr	r3, [pc, #608]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x3aa>
 8002144:	e013      	b.n	800216e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fb63 	bl	8001810 <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	e009      	b.n	8002164 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff fb5e 	bl	8001810 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	4a91      	ldr	r2, [pc, #580]	@ (80023a0 <HAL_RCC_OscConfig+0x624>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e116      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b8d      	ldr	r3, [pc, #564]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800216e:	231f      	movs	r3, #31
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b88      	ldr	r3, [pc, #544]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	4b87      	ldr	r3, [pc, #540]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800217e:	4989      	ldr	r1, [pc, #548]	@ (80023a4 <HAL_RCC_OscConfig+0x628>)
 8002180:	400a      	ands	r2, r1
 8002182:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2210      	movs	r2, #16
 800218a:	4013      	ands	r3, r2
 800218c:	d063      	beq.n	8002256 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d12a      	bne.n	80021ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002196:	4b81      	ldr	r3, [pc, #516]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800219c:	2104      	movs	r1, #4
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021a2:	4b7e      	ldr	r3, [pc, #504]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a6:	4b7d      	ldr	r3, [pc, #500]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fb2f 	bl	8001810 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021b8:	f7ff fb2a 	bl	8001810 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0e3      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ca:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f1      	beq.n	80021b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021d4:	4b71      	ldr	r3, [pc, #452]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	22f8      	movs	r2, #248	@ 0xf8
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	00da      	lsls	r2, r3, #3
 80021e4:	4b6d      	ldr	r3, [pc, #436]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ea:	e034      	b.n	8002256 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	3305      	adds	r3, #5
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021f4:	4b69      	ldr	r3, [pc, #420]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80021fa:	2104      	movs	r1, #4
 80021fc:	438a      	bics	r2, r1
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002200:	4b66      	ldr	r3, [pc, #408]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	22f8      	movs	r2, #248	@ 0xf8
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	00da      	lsls	r2, r3, #3
 8002210:	4b62      	ldr	r3, [pc, #392]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002212:	430a      	orrs	r2, r1
 8002214:	635a      	str	r2, [r3, #52]	@ 0x34
 8002216:	e01e      	b.n	8002256 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002218:	4b60      	ldr	r3, [pc, #384]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800221a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221c:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800221e:	2104      	movs	r1, #4
 8002220:	430a      	orrs	r2, r1
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002224:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002228:	4b5c      	ldr	r3, [pc, #368]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff faee 	bl	8001810 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800223a:	f7ff fae9 	bl	8001810 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0a2      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800224c:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800224e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002250:	2202      	movs	r2, #2
 8002252:	4013      	ands	r3, r2
 8002254:	d1f1      	bne.n	800223a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d100      	bne.n	8002260 <HAL_RCC_OscConfig+0x4e4>
 800225e:	e097      	b.n	8002390 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	220c      	movs	r2, #12
 8002266:	4013      	ands	r3, r2
 8002268:	2b08      	cmp	r3, #8
 800226a:	d100      	bne.n	800226e <HAL_RCC_OscConfig+0x4f2>
 800226c:	e06b      	b.n	8002346 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d14c      	bne.n	8002310 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b48      	ldr	r3, [pc, #288]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800227c:	494a      	ldr	r1, [pc, #296]	@ (80023a8 <HAL_RCC_OscConfig+0x62c>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fac5 	bl	8001810 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff fac0 	bl	8001810 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e079      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	049b      	lsls	r3, r3, #18
 80022a6:	4013      	ands	r3, r2
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022aa:	4b3c      	ldr	r3, [pc, #240]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	220f      	movs	r2, #15
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b8:	4b38      	ldr	r3, [pc, #224]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a3a      	ldr	r2, [pc, #232]	@ (80023ac <HAL_RCC_OscConfig+0x630>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	431a      	orrs	r2, r3
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	0449      	lsls	r1, r1, #17
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fa93 	bl	8001810 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fa8e 	bl	8001810 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e047      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x574>
 800230e:	e03f      	b.n	8002390 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b22      	ldr	r3, [pc, #136]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002316:	4924      	ldr	r1, [pc, #144]	@ (80023a8 <HAL_RCC_OscConfig+0x62c>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fa78 	bl	8001810 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff fa73 	bl	8001810 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e02c      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	4b18      	ldr	r3, [pc, #96]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	049b      	lsls	r3, r3, #18
 8002340:	4013      	ands	r3, r2
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x5aa>
 8002344:	e024      	b.n	8002390 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e01f      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_RCC_OscConfig+0x620>)
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	429a      	cmp	r2, r3
 800236c:	d10e      	bne.n	800238c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	220f      	movs	r2, #15
 8002372:	401a      	ands	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	23f0      	movs	r3, #240	@ 0xf0
 8002380:	039b      	lsls	r3, r3, #14
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b008      	add	sp, #32
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	40021000 	.word	0x40021000
 80023a0:	00001388 	.word	0x00001388
 80023a4:	efffffff 	.word	0xefffffff
 80023a8:	feffffff 	.word	0xfeffffff
 80023ac:	ffc2ffff 	.word	0xffc2ffff

080023b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b3      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d911      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4393      	bics	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	4b55      	ldr	r3, [pc, #340]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09a      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d015      	beq.n	800242c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2204      	movs	r2, #4
 8002406:	4013      	ands	r3, r2
 8002408:	d006      	beq.n	8002418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800240a:	4b4b      	ldr	r3, [pc, #300]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002410:	21e0      	movs	r1, #224	@ 0xe0
 8002412:	00c9      	lsls	r1, r1, #3
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	22f0      	movs	r2, #240	@ 0xf0
 800241e:	4393      	bics	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	4013      	ands	r3, r2
 8002448:	d114      	bne.n	8002474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06e      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d108      	bne.n	8002474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e062      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e05b      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002474:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	4393      	bics	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff f9c2 	bl	8001810 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	e009      	b.n	80024a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7ff f9bd 	bl	8001810 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_RCC_ClockConfig+0x18c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e042      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	220c      	movs	r2, #12
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d211      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4393      	bics	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <HAL_RCC_ClockConfig+0x184>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e020      	b.n	800252c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_RCC_ClockConfig+0x190>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002508:	f000 f82e 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 800250c:	0001      	movs	r1, r0
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x188>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	220f      	movs	r2, #15
 8002516:	4013      	ands	r3, r2
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x194>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	000a      	movs	r2, r1
 800251e:	40da      	lsrs	r2, r3
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x198>)
 8002522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002524:	2003      	movs	r0, #3
 8002526:	f7ff f92d 	bl	8001784 <HAL_InitTick>
  
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	00001388 	.word	0x00001388
 8002540:	fffff8ff 	.word	0xfffff8ff
 8002544:	08003174 	.word	0x08003174
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_RCC_EnableCSS+0x18>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_EnableCSS+0x18>)
 8002556:	2180      	movs	r1, #128	@ 0x80
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	2b04      	cmp	r3, #4
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x30>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x36>
 8002596:	e02c      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa0>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	e02c      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	220f      	movs	r2, #15
 80025a4:	4013      	ands	r3, r2
 80025a6:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025ac:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	220f      	movs	r2, #15
 80025b2:	4013      	ands	r3, r2
 80025b4:	4a16      	ldr	r2, [pc, #88]	@ (8002610 <HAL_RCC_GetSysClockFreq+0xa8>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	4013      	ands	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4810      	ldr	r0, [pc, #64]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025c8:	f7fd fda6 	bl	8000118 <__udivsi3>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4353      	muls	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	000a      	movs	r2, r1
 80025dc:	0152      	lsls	r2, r2, #5
 80025de:	1a52      	subs	r2, r2, r1
 80025e0:	0193      	lsls	r3, r2, #6
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	185b      	adds	r3, r3, r1
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
      break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f2:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f4:	613b      	str	r3, [r7, #16]
      break;
 80025f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025f8:	693b      	ldr	r3, [r7, #16]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b006      	add	sp, #24
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	08003184 	.word	0x08003184
 8002610:	08003194 	.word	0x08003194

08002614 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCC_NMI_IRQHandler+0x20>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	4013      	ands	r3, r2
 8002620:	2b80      	cmp	r3, #128	@ 0x80
 8002622:	d104      	bne.n	800262e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002624:	f000 f80a 	bl	800263c <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCC_NMI_IRQHandler+0x24>)
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	701a      	strb	r2, [r3, #0]
  }
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	4002100a 	.word	0x4002100a

0800263c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e042      	b.n	80026de <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	223d      	movs	r2, #61	@ 0x3d
 800265c:	5c9b      	ldrb	r3, [r3, r2]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	223c      	movs	r2, #60	@ 0x3c
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f7fe ffc0 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223d      	movs	r2, #61	@ 0x3d
 8002678:	2102      	movs	r1, #2
 800267a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	0019      	movs	r1, r3
 8002686:	0010      	movs	r0, r2
 8002688:	f000 fa94 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2246      	movs	r2, #70	@ 0x46
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223e      	movs	r2, #62	@ 0x3e
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223f      	movs	r2, #63	@ 0x3f
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	@ 0x40
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2241      	movs	r2, #65	@ 0x41
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2242      	movs	r2, #66	@ 0x42
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2243      	movs	r2, #67	@ 0x43
 80026c0:	2101      	movs	r1, #1
 80026c2:	5499      	strb	r1, [r3, r2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2244      	movs	r2, #68	@ 0x44
 80026c8:	2101      	movs	r1, #1
 80026ca:	5499      	strb	r1, [r3, r2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2245      	movs	r2, #69	@ 0x45
 80026d0:	2101      	movs	r1, #1
 80026d2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	223d      	movs	r2, #61	@ 0x3d
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	223d      	movs	r2, #61	@ 0x3d
 80026f4:	5c9b      	ldrb	r3, [r3, r2]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d001      	beq.n	8002700 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e028      	b.n	8002752 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	223d      	movs	r2, #61	@ 0x3d
 8002704:	2102      	movs	r1, #2
 8002706:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	@ (800275c <HAL_TIM_Base_Start+0x74>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIM_Base_Start+0x34>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_TIM_Base_Start+0x78>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d111      	bne.n	8002740 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2207      	movs	r2, #7
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d010      	beq.n	8002750 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	e007      	b.n	8002750 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223d      	movs	r2, #61	@ 0x3d
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e030      	b.n	80027de <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223d      	movs	r2, #61	@ 0x3d
 8002780:	2102      	movs	r1, #2
 8002782:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a13      	ldr	r2, [pc, #76]	@ (80027e8 <HAL_TIM_Base_Start_IT+0x84>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0x44>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <HAL_TIM_Base_Start_IT+0x88>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d111      	bne.n	80027cc <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d010      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	e007      	b.n	80027dc <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d021      	beq.n	8002854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d01d      	beq.n	8002854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2203      	movs	r2, #3
 800281e:	4252      	negs	r2, r2
 8002820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2203      	movs	r2, #3
 8002830:	4013      	ands	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 f9a4 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 800283c:	e007      	b.n	800284e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f997 	bl	8002b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f9a3 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
 8002862:	d01e      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2205      	movs	r2, #5
 800286a:	4252      	negs	r2, r2
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	23c0      	movs	r3, #192	@ 0xc0
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f97d 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 800288a:	e007      	b.n	800289c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f970 	bl	8002b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f97c 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	d021      	beq.n	80028ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2209      	movs	r2, #9
 80028b8:	4252      	negs	r2, r2
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4013      	ands	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f957 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f94a 	bl	8002b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f956 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d022      	beq.n	800293c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2210      	movs	r2, #16
 80028fa:	4013      	ands	r3, r2
 80028fc:	d01e      	beq.n	800293c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2211      	movs	r2, #17
 8002904:	4252      	negs	r2, r2
 8002906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2208      	movs	r2, #8
 800290c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	23c0      	movs	r3, #192	@ 0xc0
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f000 f930 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 8002924:	e007      	b.n	8002936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f923 	bl	8002b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f92f 	bl	8002b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2201      	movs	r2, #1
 8002940:	4013      	ands	r3, r2
 8002942:	d00c      	beq.n	800295e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	d008      	beq.n	800295e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2202      	movs	r2, #2
 8002952:	4252      	negs	r2, r2
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe fe03 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2280      	movs	r2, #128	@ 0x80
 8002962:	4013      	ands	r3, r2
 8002964:	d00c      	beq.n	8002980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2280      	movs	r2, #128	@ 0x80
 800296a:	4013      	ands	r3, r2
 800296c:	d008      	beq.n	8002980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2281      	movs	r2, #129	@ 0x81
 8002974:	4252      	negs	r2, r2
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fa88 	bl	8002e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2240      	movs	r2, #64	@ 0x40
 8002984:	4013      	ands	r3, r2
 8002986:	d00c      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	@ 0x40
 800298c:	4013      	ands	r3, r2
 800298e:	d008      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2241      	movs	r2, #65	@ 0x41
 8002996:	4252      	negs	r2, r2
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f901 	bl	8002ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00c      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	4013      	ands	r3, r2
 80029b0:	d008      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2221      	movs	r2, #33	@ 0x21
 80029b8:	4252      	negs	r2, r2
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 fa5e 	bl	8002e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	230f      	movs	r3, #15
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223c      	movs	r2, #60	@ 0x3c
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_ConfigClockSource+0x20>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0bc      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x19a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223c      	movs	r2, #60	@ 0x3c
 80029f0:	2101      	movs	r1, #1
 80029f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	223d      	movs	r2, #61	@ 0x3d
 80029f8:	2102      	movs	r1, #2
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2277      	movs	r2, #119	@ 0x77
 8002a08:	4393      	bics	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4a58      	ldr	r2, [pc, #352]	@ (8002b70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	0192      	lsls	r2, r2, #6
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d040      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xde>
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0192      	lsls	r2, r2, #6
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d900      	bls.n	8002a32 <HAL_TIM_ConfigClockSource+0x66>
 8002a30:	e088      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a32:	2280      	movs	r2, #128	@ 0x80
 8002a34:	0152      	lsls	r2, r2, #5
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d100      	bne.n	8002a3c <HAL_TIM_ConfigClockSource+0x70>
 8002a3a:	e088      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x182>
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	0152      	lsls	r2, r2, #5
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d900      	bls.n	8002a46 <HAL_TIM_ConfigClockSource+0x7a>
 8002a44:	e07e      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a46:	2b70      	cmp	r3, #112	@ 0x70
 8002a48:	d018      	beq.n	8002a7c <HAL_TIM_ConfigClockSource+0xb0>
 8002a4a:	d900      	bls.n	8002a4e <HAL_TIM_ConfigClockSource+0x82>
 8002a4c:	e07a      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a4e:	2b60      	cmp	r3, #96	@ 0x60
 8002a50:	d04f      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x126>
 8002a52:	d900      	bls.n	8002a56 <HAL_TIM_ConfigClockSource+0x8a>
 8002a54:	e076      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a56:	2b50      	cmp	r3, #80	@ 0x50
 8002a58:	d03b      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x106>
 8002a5a:	d900      	bls.n	8002a5e <HAL_TIM_ConfigClockSource+0x92>
 8002a5c:	e072      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a5e:	2b40      	cmp	r3, #64	@ 0x40
 8002a60:	d057      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x146>
 8002a62:	d900      	bls.n	8002a66 <HAL_TIM_ConfigClockSource+0x9a>
 8002a64:	e06e      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a66:	2b30      	cmp	r3, #48	@ 0x30
 8002a68:	d063      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x166>
 8002a6a:	d86b      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d060      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x166>
 8002a70:	d868      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d05d      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x166>
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d05b      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x166>
 8002a7a:	e063      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a8c:	f000 f986 	bl	8002d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2277      	movs	r2, #119	@ 0x77
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
      break;
 8002aa8:	e052      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	f000 f96f 	bl	8002d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	01c9      	lsls	r1, r1, #7
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
      break;
 8002ad0:	e03e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	001a      	movs	r2, r3
 8002ae0:	f000 f8e2 	bl	8002ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2150      	movs	r1, #80	@ 0x50
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 f93c 	bl	8002d68 <TIM_ITRx_SetConfig>
      break;
 8002af0:	e02e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	001a      	movs	r2, r3
 8002b00:	f000 f900 	bl	8002d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2160      	movs	r1, #96	@ 0x60
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f92c 	bl	8002d68 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e01e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	001a      	movs	r2, r3
 8002b20:	f000 f8c2 	bl	8002ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2140      	movs	r1, #64	@ 0x40
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f91c 	bl	8002d68 <TIM_ITRx_SetConfig>
      break;
 8002b30:	e00e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f000 f913 	bl	8002d68 <TIM_ITRx_SetConfig>
      break;
 8002b42:	e005      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b4e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223d      	movs	r2, #61	@ 0x3d
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223c      	movs	r2, #60	@ 0x3c
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]

  return status;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	ffff00ff 	.word	0xffff00ff

08002b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <TIM_Base_SetConfig+0x20>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a31      	ldr	r2, [pc, #196]	@ (8002c94 <TIM_Base_SetConfig+0xe0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2270      	movs	r2, #112	@ 0x70
 8002bd8:	4393      	bics	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <TIM_Base_SetConfig+0xe0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <TIM_Base_SetConfig+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <TIM_Base_SetConfig+0xe8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a25      	ldr	r2, [pc, #148]	@ (8002ca0 <TIM_Base_SetConfig+0xec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <TIM_Base_SetConfig+0xf0>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	4393      	bics	r3, r2
 8002c26:	001a      	movs	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0xaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <TIM_Base_SetConfig+0xe8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0xaa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a11      	ldr	r2, [pc, #68]	@ (8002ca0 <TIM_Base_SetConfig+0xec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4393      	bics	r3, r2
 8002c80:	001a      	movs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
  }
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40002000 	.word	0x40002000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800
 8002ca4:	fffffcff 	.word	0xfffffcff

08002ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	22f0      	movs	r2, #240	@ 0xf0
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	220a      	movs	r2, #10
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	621a      	str	r2, [r3, #32]
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	001a      	movs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <TIM_TI2_ConfigInputStage+0x60>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	22a0      	movs	r2, #160	@ 0xa0
 8002d40:	4393      	bics	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	ffff0fff 	.word	0xffff0fff

08002d68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2270      	movs	r2, #112	@ 0x70
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	2207      	movs	r2, #7
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	609a      	str	r2, [r3, #8]
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <TIM_ETR_SetConfig+0x3c>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b006      	add	sp, #24
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	ffff00ff 	.word	0xffff00ff

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	223c      	movs	r2, #60	@ 0x3c
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e03c      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	223c      	movs	r2, #60	@ 0x3c
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223d      	movs	r2, #61	@ 0x3d
 8002e00:	2102      	movs	r1, #2
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2270      	movs	r2, #112	@ 0x70
 8002e18:	4393      	bics	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	4393      	bics	r3, r2
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	223d      	movs	r2, #61	@ 0x3d
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	223c      	movs	r2, #60	@ 0x3c
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b004      	add	sp, #16
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400

08002e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <malloc>:
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <malloc+0x10>)
 8002ea4:	0001      	movs	r1, r0
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f000 f826 	bl	8002ef8 <_malloc_r>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	2000000c 	.word	0x2000000c

08002eb4 <sbrk_aligned>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8002ef4 <sbrk_aligned+0x40>)
 8002eb8:	000d      	movs	r5, r1
 8002eba:	6831      	ldr	r1, [r6, #0]
 8002ebc:	0004      	movs	r4, r0
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d102      	bne.n	8002ec8 <sbrk_aligned+0x14>
 8002ec2:	f000 f8b1 	bl	8003028 <_sbrk_r>
 8002ec6:	6030      	str	r0, [r6, #0]
 8002ec8:	0029      	movs	r1, r5
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f000 f8ac 	bl	8003028 <_sbrk_r>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d103      	bne.n	8002edc <sbrk_aligned+0x28>
 8002ed4:	2501      	movs	r5, #1
 8002ed6:	426d      	negs	r5, r5
 8002ed8:	0028      	movs	r0, r5
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	2303      	movs	r3, #3
 8002ede:	1cc5      	adds	r5, r0, #3
 8002ee0:	439d      	bics	r5, r3
 8002ee2:	42a8      	cmp	r0, r5
 8002ee4:	d0f8      	beq.n	8002ed8 <sbrk_aligned+0x24>
 8002ee6:	1a29      	subs	r1, r5, r0
 8002ee8:	0020      	movs	r0, r4
 8002eea:	f000 f89d 	bl	8003028 <_sbrk_r>
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d1f2      	bne.n	8002ed8 <sbrk_aligned+0x24>
 8002ef2:	e7ef      	b.n	8002ed4 <sbrk_aligned+0x20>
 8002ef4:	200000cc 	.word	0x200000cc

08002ef8 <_malloc_r>:
 8002ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002efa:	2203      	movs	r2, #3
 8002efc:	1ccb      	adds	r3, r1, #3
 8002efe:	4393      	bics	r3, r2
 8002f00:	3308      	adds	r3, #8
 8002f02:	0005      	movs	r5, r0
 8002f04:	001f      	movs	r7, r3
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d234      	bcs.n	8002f74 <_malloc_r+0x7c>
 8002f0a:	270c      	movs	r7, #12
 8002f0c:	42b9      	cmp	r1, r7
 8002f0e:	d833      	bhi.n	8002f78 <_malloc_r+0x80>
 8002f10:	0028      	movs	r0, r5
 8002f12:	f000 f871 	bl	8002ff8 <__malloc_lock>
 8002f16:	4e37      	ldr	r6, [pc, #220]	@ (8002ff4 <_malloc_r+0xfc>)
 8002f18:	6833      	ldr	r3, [r6, #0]
 8002f1a:	001c      	movs	r4, r3
 8002f1c:	2c00      	cmp	r4, #0
 8002f1e:	d12f      	bne.n	8002f80 <_malloc_r+0x88>
 8002f20:	0039      	movs	r1, r7
 8002f22:	0028      	movs	r0, r5
 8002f24:	f7ff ffc6 	bl	8002eb4 <sbrk_aligned>
 8002f28:	0004      	movs	r4, r0
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	d15f      	bne.n	8002fee <_malloc_r+0xf6>
 8002f2e:	6834      	ldr	r4, [r6, #0]
 8002f30:	9400      	str	r4, [sp, #0]
 8002f32:	9b00      	ldr	r3, [sp, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d14a      	bne.n	8002fce <_malloc_r+0xd6>
 8002f38:	2c00      	cmp	r4, #0
 8002f3a:	d052      	beq.n	8002fe2 <_malloc_r+0xea>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	0028      	movs	r0, r5
 8002f40:	18e3      	adds	r3, r4, r3
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	f000 f86f 	bl	8003028 <_sbrk_r>
 8002f4a:	9b01      	ldr	r3, [sp, #4]
 8002f4c:	4283      	cmp	r3, r0
 8002f4e:	d148      	bne.n	8002fe2 <_malloc_r+0xea>
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	0028      	movs	r0, r5
 8002f54:	1aff      	subs	r7, r7, r3
 8002f56:	0039      	movs	r1, r7
 8002f58:	f7ff ffac 	bl	8002eb4 <sbrk_aligned>
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d040      	beq.n	8002fe2 <_malloc_r+0xea>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	19db      	adds	r3, r3, r7
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	6833      	ldr	r3, [r6, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d133      	bne.n	8002fd6 <_malloc_r+0xde>
 8002f6e:	9b00      	ldr	r3, [sp, #0]
 8002f70:	6033      	str	r3, [r6, #0]
 8002f72:	e019      	b.n	8002fa8 <_malloc_r+0xb0>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	dac9      	bge.n	8002f0c <_malloc_r+0x14>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	602b      	str	r3, [r5, #0]
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f80:	6821      	ldr	r1, [r4, #0]
 8002f82:	1bc9      	subs	r1, r1, r7
 8002f84:	d420      	bmi.n	8002fc8 <_malloc_r+0xd0>
 8002f86:	290b      	cmp	r1, #11
 8002f88:	d90a      	bls.n	8002fa0 <_malloc_r+0xa8>
 8002f8a:	19e2      	adds	r2, r4, r7
 8002f8c:	6027      	str	r7, [r4, #0]
 8002f8e:	42a3      	cmp	r3, r4
 8002f90:	d104      	bne.n	8002f9c <_malloc_r+0xa4>
 8002f92:	6032      	str	r2, [r6, #0]
 8002f94:	6863      	ldr	r3, [r4, #4]
 8002f96:	6011      	str	r1, [r2, #0]
 8002f98:	6053      	str	r3, [r2, #4]
 8002f9a:	e005      	b.n	8002fa8 <_malloc_r+0xb0>
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	e7f9      	b.n	8002f94 <_malloc_r+0x9c>
 8002fa0:	6862      	ldr	r2, [r4, #4]
 8002fa2:	42a3      	cmp	r3, r4
 8002fa4:	d10e      	bne.n	8002fc4 <_malloc_r+0xcc>
 8002fa6:	6032      	str	r2, [r6, #0]
 8002fa8:	0028      	movs	r0, r5
 8002faa:	f000 f82d 	bl	8003008 <__malloc_unlock>
 8002fae:	0020      	movs	r0, r4
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	300b      	adds	r0, #11
 8002fb4:	1d23      	adds	r3, r4, #4
 8002fb6:	4390      	bics	r0, r2
 8002fb8:	1ac2      	subs	r2, r0, r3
 8002fba:	4298      	cmp	r0, r3
 8002fbc:	d0df      	beq.n	8002f7e <_malloc_r+0x86>
 8002fbe:	1a1b      	subs	r3, r3, r0
 8002fc0:	50a3      	str	r3, [r4, r2]
 8002fc2:	e7dc      	b.n	8002f7e <_malloc_r+0x86>
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	e7ef      	b.n	8002fa8 <_malloc_r+0xb0>
 8002fc8:	0023      	movs	r3, r4
 8002fca:	6864      	ldr	r4, [r4, #4]
 8002fcc:	e7a6      	b.n	8002f1c <_malloc_r+0x24>
 8002fce:	9c00      	ldr	r4, [sp, #0]
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	e7ad      	b.n	8002f32 <_malloc_r+0x3a>
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	d1fb      	bne.n	8002fd6 <_malloc_r+0xde>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e7da      	b.n	8002f98 <_malloc_r+0xa0>
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	0028      	movs	r0, r5
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	f000 f80e 	bl	8003008 <__malloc_unlock>
 8002fec:	e7c6      	b.n	8002f7c <_malloc_r+0x84>
 8002fee:	6007      	str	r7, [r0, #0]
 8002ff0:	e7da      	b.n	8002fa8 <_malloc_r+0xb0>
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	200000d0 	.word	0x200000d0

08002ff8 <__malloc_lock>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4802      	ldr	r0, [pc, #8]	@ (8003004 <__malloc_lock+0xc>)
 8002ffc:	f000 f850 	bl	80030a0 <__retarget_lock_acquire_recursive>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	20000210 	.word	0x20000210

08003008 <__malloc_unlock>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4802      	ldr	r0, [pc, #8]	@ (8003014 <__malloc_unlock+0xc>)
 800300c:	f000 f849 	bl	80030a2 <__retarget_lock_release_recursive>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	20000210 	.word	0x20000210

08003018 <memset>:
 8003018:	0003      	movs	r3, r0
 800301a:	1882      	adds	r2, r0, r2
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	7019      	strb	r1, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_sbrk_r>:
 8003028:	2300      	movs	r3, #0
 800302a:	b570      	push	{r4, r5, r6, lr}
 800302c:	4d06      	ldr	r5, [pc, #24]	@ (8003048 <_sbrk_r+0x20>)
 800302e:	0004      	movs	r4, r0
 8003030:	0008      	movs	r0, r1
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	f7fe fb2c 	bl	8001690 <_sbrk>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d103      	bne.n	8003044 <_sbrk_r+0x1c>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d000      	beq.n	8003044 <_sbrk_r+0x1c>
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	2000020c 	.word	0x2000020c

0800304c <__errno>:
 800304c:	4b01      	ldr	r3, [pc, #4]	@ (8003054 <__errno+0x8>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	4770      	bx	lr
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	2000000c 	.word	0x2000000c

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	2600      	movs	r6, #0
 800305c:	4c0c      	ldr	r4, [pc, #48]	@ (8003090 <__libc_init_array+0x38>)
 800305e:	4d0d      	ldr	r5, [pc, #52]	@ (8003094 <__libc_init_array+0x3c>)
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	2600      	movs	r6, #0
 800306a:	f000 f825 	bl	80030b8 <_init>
 800306e:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <__libc_init_array+0x40>)
 8003070:	4d0a      	ldr	r5, [pc, #40]	@ (800309c <__libc_init_array+0x44>)
 8003072:	1b64      	subs	r4, r4, r5
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	00b3      	lsls	r3, r6, #2
 800307e:	58eb      	ldr	r3, [r5, r3]
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	00b3      	lsls	r3, r6, #2
 8003088:	58eb      	ldr	r3, [r5, r3]
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	080031ac 	.word	0x080031ac
 8003094:	080031ac 	.word	0x080031ac
 8003098:	080031b0 	.word	0x080031b0
 800309c:	080031ac 	.word	0x080031ac

080030a0 <__retarget_lock_acquire_recursive>:
 80030a0:	4770      	bx	lr

080030a2 <__retarget_lock_release_recursive>:
 80030a2:	4770      	bx	lr

080030a4 <memcpy>:
 80030a4:	2300      	movs	r3, #0
 80030a6:	b510      	push	{r4, lr}
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d100      	bne.n	80030ae <memcpy+0xa>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	5ccc      	ldrb	r4, [r1, r3]
 80030b0:	54c4      	strb	r4, [r0, r3]
 80030b2:	3301      	adds	r3, #1
 80030b4:	e7f8      	b.n	80030a8 <memcpy+0x4>
	...

080030b8 <_init>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr

080030c4 <_fini>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr
