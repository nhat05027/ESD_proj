
ESD_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080025b8  080025b8  000035b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c0  080025c0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c0  080025c0  000035c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080025c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08002624  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002624  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031d7  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111e  00000000  00000000  0000725b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00008380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ce  00000000  00000000  00008770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e70a  00000000  00000000  00008a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ede  00000000  00000000  00017148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000577f4  00000000  00000000  0001d026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007481a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001034  00000000  00000000  00074860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00075894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024b4 	.word	0x080024b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080024b4 	.word	0x080024b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1824      	adds	r4, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	42a3      	cmp	r3, r4
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0424      	lsls	r4, r4, #16
 80002be:	1960      	adds	r0, r4, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8d8 	bl	80004a0 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8d3 	bl	80004a0 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzsi2>:
 8000464:	211c      	movs	r1, #28
 8000466:	2301      	movs	r3, #1
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0xe>
 800046e:	0c00      	lsrs	r0, r0, #16
 8000470:	3910      	subs	r1, #16
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	4298      	cmp	r0, r3
 8000476:	d301      	bcc.n	800047c <__clzsi2+0x18>
 8000478:	0a00      	lsrs	r0, r0, #8
 800047a:	3908      	subs	r1, #8
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0x22>
 8000482:	0900      	lsrs	r0, r0, #4
 8000484:	3904      	subs	r1, #4
 8000486:	a202      	add	r2, pc, #8	@ (adr r2, 8000490 <__clzsi2+0x2c>)
 8000488:	5c10      	ldrb	r0, [r2, r0]
 800048a:	1840      	adds	r0, r0, r1
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	02020304 	.word	0x02020304
 8000494:	01010101 	.word	0x01010101
	...

080004a0 <__clzdi2>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d103      	bne.n	80004ae <__clzdi2+0xe>
 80004a6:	f7ff ffdd 	bl	8000464 <__clzsi2>
 80004aa:	3020      	adds	r0, #32
 80004ac:	e002      	b.n	80004b4 <__clzdi2+0x14>
 80004ae:	0008      	movs	r0, r1
 80004b0:	f7ff ffd8 	bl	8000464 <__clzsi2>
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08b      	sub	sp, #44	@ 0x2c
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80004c6:	2110      	movs	r1, #16
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2244      	movs	r2, #68	@ 0x44
 80004cc:	18ba      	adds	r2, r7, r2
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2240      	movs	r2, #64	@ 0x40
 80004d6:	18ba      	adds	r2, r7, r2
 80004d8:	8812      	ldrh	r2, [r2, #0]
 80004da:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80004e0:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 80004e2:	187a      	adds	r2, r7, r1
 80004e4:	2338      	movs	r3, #56	@ 0x38
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 80004ec:	000c      	movs	r4, r1
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f80a 	bl	800051c <Lcd_init>

	return lcd;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	193a      	adds	r2, r7, r4
 800050c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800050e:	c313      	stmia	r3!, {r0, r1, r4}
 8000510:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000512:	c313      	stmia	r3!, {r0, r1, r4}
}
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	46bd      	mov	sp, r7
 8000518:	b00b      	add	sp, #44	@ 0x2c
 800051a:	bd90      	pop	{r4, r7, pc}

0800051c <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	7d9b      	ldrb	r3, [r3, #22]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10f      	bne.n	800054c <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2133      	movs	r1, #51	@ 0x33
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f87c 	bl	800062e <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2132      	movs	r1, #50	@ 0x32
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f877 	bl	800062e <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2128      	movs	r1, #40	@ 0x28
 8000544:	0018      	movs	r0, r3
 8000546:	f000 f872 	bl	800062e <lcd_write_command>
 800054a:	e004      	b.n	8000556 <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2138      	movs	r1, #56	@ 0x38
 8000550:	0018      	movs	r0, r3
 8000552:	f000 f86c 	bl	800062e <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2101      	movs	r1, #1
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f867 	bl	800062e <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	210c      	movs	r1, #12
 8000564:	0018      	movs	r0, r3
 8000566:	f000 f862 	bl	800062e <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2106      	movs	r1, #6
 800056e:	0018      	movs	r0, r3
 8000570:	f000 f85d 	bl	800062e <lcd_write_command>
}
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e00f      	b.n	80005b0 <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 8000590:	240f      	movs	r4, #15
 8000592:	193b      	adds	r3, r7, r4
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	18d3      	adds	r3, r2, r3
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 f876 	bl	8000692 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	3201      	adds	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	230f      	movs	r3, #15
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	781c      	ldrb	r4, [r3, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fda5 	bl	8000108 <strlen>
 80005be:	0003      	movs	r3, r0
 80005c0:	429c      	cmp	r4, r3
 80005c2:	d3e5      	bcc.n	8000590 <Lcd_string+0x14>
	}
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b005      	add	sp, #20
 80005cc:	bd90      	pop	{r4, r7, pc}
	...

080005d0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	0008      	movs	r0, r1
 80005da:	0011      	movs	r1, r2
 80005dc:	1cfb      	adds	r3, r7, #3
 80005de:	1c02      	adds	r2, r0, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	1cbb      	adds	r3, r7, #2
 80005e4:	1c0a      	adds	r2, r1, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80005e8:	1cfb      	adds	r3, r7, #3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <Lcd_cursor+0x40>)
 80005ee:	5cd2      	ldrb	r2, [r2, r3]
 80005f0:	1cbb      	adds	r3, r7, #2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	18d3      	adds	r3, r2, r3
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	3b80      	subs	r3, #128	@ 0x80
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f814 	bl	800062e <lcd_write_command>
	#endif
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	0800250c 	.word	0x0800250c

08000614 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2101      	movs	r1, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f804 	bl	800062e <lcd_write_command>
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}

0800062e <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	000a      	movs	r2, r1
 8000638:	1cfb      	adds	r3, r7, #3
 800063a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6898      	ldr	r0, [r3, #8]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	0019      	movs	r1, r3
 8000648:	f001 f955 	bl	80018f6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7d9b      	ldrb	r3, [r3, #22]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d113      	bne.n	800067c <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	b2d9      	uxtb	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2204      	movs	r2, #4
 8000660:	0018      	movs	r0, r3
 8000662:	f000 f848 	bl	80006f6 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000666:	1cfb      	adds	r3, r7, #3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	220f      	movs	r2, #15
 800066c:	4013      	ands	r3, r2
 800066e:	b2d9      	uxtb	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2204      	movs	r2, #4
 8000674:	0018      	movs	r0, r3
 8000676:	f000 f83e 	bl	80006f6 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800067a:	e006      	b.n	800068a <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 800067c:	1cfb      	adds	r3, r7, #3
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2208      	movs	r2, #8
 8000684:	0018      	movs	r0, r3
 8000686:	f000 f836 	bl	80006f6 <lcd_write>
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	000a      	movs	r2, r1
 800069c:	1cfb      	adds	r3, r7, #3
 800069e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	899b      	ldrh	r3, [r3, #12]
 80006a8:	2201      	movs	r2, #1
 80006aa:	0019      	movs	r1, r3
 80006ac:	f001 f923 	bl	80018f6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7d9b      	ldrb	r3, [r3, #22]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d113      	bne.n	80006e0 <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80006b8:	1cfb      	adds	r3, r7, #3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	b2d9      	uxtb	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2204      	movs	r2, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 f816 	bl	80006f6 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	220f      	movs	r2, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	b2d9      	uxtb	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2204      	movs	r2, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 f80c 	bl	80006f6 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80006de:	e006      	b.n	80006ee <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 80006e0:	1cfb      	adds	r3, r7, #3
 80006e2:	7819      	ldrb	r1, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2208      	movs	r2, #8
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 f804 	bl	80006f6 <lcd_write>
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	0008      	movs	r0, r1
 8000700:	0011      	movs	r1, r2
 8000702:	1cfb      	adds	r3, r7, #3
 8000704:	1c02      	adds	r2, r0, #0
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	1cbb      	adds	r3, r7, #2
 800070a:	1c0a      	adds	r2, r1, #0
 800070c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 800070e:	230f      	movs	r3, #15
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	e020      	b.n	800075a <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	240f      	movs	r4, #15
 800071e:	193b      	adds	r3, r7, r4
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	193b      	adds	r3, r7, r4
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	18d3      	adds	r3, r2, r3
 8000734:	8819      	ldrh	r1, [r3, #0]
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	193b      	adds	r3, r7, r4
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	411a      	asrs	r2, r3
 8000740:	0013      	movs	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2201      	movs	r2, #1
 8000746:	4013      	ands	r3, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	001a      	movs	r2, r3
 800074c:	f001 f8d3 	bl	80018f6 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000750:	193b      	adds	r3, r7, r4
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	193b      	adds	r3, r7, r4
 8000756:	3201      	adds	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	230f      	movs	r3, #15
 800075c:	18fa      	adds	r2, r7, r3
 800075e:	1cbb      	adds	r3, r7, #2
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3d7      	bcc.n	8000718 <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6918      	ldr	r0, [r3, #16]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	8a9b      	ldrh	r3, [r3, #20]
 8000770:	2201      	movs	r2, #1
 8000772:	0019      	movs	r1, r3
 8000774:	f001 f8bf 	bl	80018f6 <HAL_GPIO_WritePin>
	DELAY(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fe57 	bl	800142c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6918      	ldr	r0, [r3, #16]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	8a9b      	ldrh	r3, [r3, #20]
 8000786:	2200      	movs	r2, #0
 8000788:	0019      	movs	r1, r3
 800078a:	f001 f8b4 	bl	80018f6 <HAL_GPIO_WritePin>
}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b005      	add	sp, #20
 8000794:	bd90      	pop	{r4, r7, pc}
	...

08000798 <selectRow>:
};
uint8_t key_current=0;
uint8_t key_prev=0;

void selectRow(uint8_t row)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
	switch (row){
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d900      	bls.n	80007ae <selectRow+0x16>
 80007ac:	e0ac      	b.n	8000908 <selectRow+0x170>
 80007ae:	009a      	lsls	r2, r3, #2
 80007b0:	4b57      	ldr	r3, [pc, #348]	@ (8000910 <selectRow+0x178>)
 80007b2:	18d3      	adds	r3, r2, r3
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	469f      	mov	pc, r3
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80007b8:	4b56      	ldr	r3, [pc, #344]	@ (8000914 <selectRow+0x17c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 f899 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80007c4:	2390      	movs	r3, #144	@ 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2200      	movs	r2, #0
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f892 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80007d2:	2390      	movs	r3, #144	@ 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2140      	movs	r1, #64	@ 0x40
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f88b 	bl	80018f6 <HAL_GPIO_WritePin>
	break;
 80007e0:	e092      	b.n	8000908 <selectRow+0x170>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80007e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000914 <selectRow+0x17c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f884 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80007ee:	2390      	movs	r3, #144	@ 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 f87d 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80007fc:	2390      	movs	r3, #144	@ 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2200      	movs	r2, #0
 8000802:	2140      	movs	r1, #64	@ 0x40
 8000804:	0018      	movs	r0, r3
 8000806:	f001 f876 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 800080a:	e07d      	b.n	8000908 <selectRow+0x170>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800080c:	4b41      	ldr	r3, [pc, #260]	@ (8000914 <selectRow+0x17c>)
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f86f 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000818:	2390      	movs	r3, #144	@ 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	0018      	movs	r0, r3
 8000822:	f001 f868 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000826:	2390      	movs	r3, #144	@ 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	@ 0x40
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f861 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 8000834:	e068      	b.n	8000908 <selectRow+0x170>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000836:	4b37      	ldr	r3, [pc, #220]	@ (8000914 <selectRow+0x17c>)
 8000838:	2200      	movs	r2, #0
 800083a:	2102      	movs	r1, #2
 800083c:	0018      	movs	r0, r3
 800083e:	f001 f85a 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000842:	2390      	movs	r3, #144	@ 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2201      	movs	r2, #1
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	0018      	movs	r0, r3
 800084c:	f001 f853 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000850:	2390      	movs	r3, #144	@ 0x90
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2201      	movs	r2, #1
 8000856:	2140      	movs	r1, #64	@ 0x40
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f84c 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 800085e:	e053      	b.n	8000908 <selectRow+0x170>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000860:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <selectRow+0x17c>)
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 f845 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800086c:	2390      	movs	r3, #144	@ 0x90
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	2200      	movs	r2, #0
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f83e 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800087a:	2390      	movs	r3, #144	@ 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f837 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 8000888:	e03e      	b.n	8000908 <selectRow+0x170>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <selectRow+0x17c>)
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f830 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000896:	2390      	movs	r3, #144	@ 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2201      	movs	r2, #1
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f829 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80008a4:	2390      	movs	r3, #144	@ 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2200      	movs	r2, #0
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f822 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 80008b2:	e029      	b.n	8000908 <selectRow+0x170>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <selectRow+0x17c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	2102      	movs	r1, #2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 f81b 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80008c0:	2390      	movs	r3, #144	@ 0x90
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2200      	movs	r2, #0
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 f814 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80008ce:	2390      	movs	r3, #144	@ 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	@ 0x40
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 f80d 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 80008dc:	e014      	b.n	8000908 <selectRow+0x170>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <selectRow+0x17c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	2102      	movs	r1, #2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 f806 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80008ea:	2390      	movs	r3, #144	@ 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2201      	movs	r2, #1
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 ffff 	bl	80018f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80008f8:	2390      	movs	r3, #144	@ 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2201      	movs	r2, #1
 80008fe:	2140      	movs	r1, #64	@ 0x40
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fff8 	bl	80018f6 <HAL_GPIO_WritePin>
		break;
 8000906:	46c0      	nop			@ (mov r8, r8)
	}
};
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08002520 	.word	0x08002520
 8000914:	48000400 	.word	0x48000400

08000918 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	for (row=0 ; row<8 ; row ++)
 800091c:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <Keypad_Getkey+0xb4>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e04a      	b.n	80009ba <Keypad_Getkey+0xa2>
	{
		selectRow(row);
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <Keypad_Getkey+0xb4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ff35 	bl	8000798 <selectRow>
		HAL_Delay(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 fd7c 	bl	800142c <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	00da      	lsls	r2, r3, #3
 8000938:	2390      	movs	r3, #144	@ 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 ffbc 	bl	80018bc <HAL_GPIO_ReadPin>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d113      	bne.n	8000970 <Keypad_Getkey+0x58>
			{
				HAL_Delay(50);
 8000948:	2032      	movs	r0, #50	@ 0x32
 800094a:	f000 fd6f 	bl	800142c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	00da      	lsls	r2, r3, #3
 8000952:	2390      	movs	r3, #144	@ 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 ffaf 	bl	80018bc <HAL_GPIO_ReadPin>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d125      	bne.n	80009ae <Keypad_Getkey+0x96>
					return key_code[row][0];
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <Keypad_Getkey+0xb4>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001a      	movs	r2, r3
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <Keypad_Getkey+0xb8>)
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	e029      	b.n	80009c4 <Keypad_Getkey+0xac>
				}
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	009a      	lsls	r2, r3, #2
 8000974:	2390      	movs	r3, #144	@ 0x90
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 ff9e 	bl	80018bc <HAL_GPIO_ReadPin>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d114      	bne.n	80009ae <Keypad_Getkey+0x96>
			{
				HAL_Delay(50);
 8000984:	2032      	movs	r0, #50	@ 0x32
 8000986:	f000 fd51 	bl	800142c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	009a      	lsls	r2, r3, #2
 800098e:	2390      	movs	r3, #144	@ 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 ff91 	bl	80018bc <HAL_GPIO_ReadPin>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d107      	bne.n	80009ae <Keypad_Getkey+0x96>
					return key_code[row][1];
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <Keypad_Getkey+0xb4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <Keypad_Getkey+0xb8>)
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	e00a      	b.n	80009c4 <Keypad_Getkey+0xac>
	for (row=0 ; row<8 ; row ++)
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <Keypad_Getkey+0xb4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <Keypad_Getkey+0xb4>)
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <Keypad_Getkey+0xb4>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	d9b0      	bls.n	8000924 <Keypad_Getkey+0xc>
				}
			}
	}
	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	2000007a 	.word	0x2000007a
 80009d0:	08002510 	.word	0x08002510

080009d4 <Result>:

const char keypad_layout[2][16]= {"789+456-123xs0=:", "g<>+def-abcxSc=:"};

uint64_t Result(char * string)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b0a3      	sub	sp, #140	@ 0x8c
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint64_t temp_var[10] = {0,0,0,0,0,0,0,0,0,0};
 80009dc:	2320      	movs	r3, #32
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	2350      	movs	r3, #80	@ 0x50
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f001 fd14 	bl	8002414 <memset>
	uint8_t num = 0;
 80009ec:	2387      	movs	r3, #135	@ 0x87
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[10] = {0,0,0,0,0,0,0,0,0,0};
 80009f4:	2314      	movs	r3, #20
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	4ad4      	ldr	r2, [pc, #848]	@ (8000d4c <Result+0x378>)
 80009fa:	ca03      	ldmia	r2!, {r0, r1}
 80009fc:	c303      	stmia	r3!, {r0, r1}
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	801a      	strh	r2, [r3, #0]
	uint8_t num_cnt = 0;
 8000a02:	2386      	movs	r3, #134	@ 0x86
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	uint8_t equaltion[9] = {0,0,0,0,0,0,0,0,0};
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	4ad0      	ldr	r2, [pc, #832]	@ (8000d50 <Result+0x37c>)
 8000a10:	ca03      	ldmia	r2!, {r0, r1}
 8000a12:	c303      	stmia	r3!, {r0, r1}
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < strlen(string); i++){
 8000a18:	2385      	movs	r3, #133	@ 0x85
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e0c8      	b.n	8000bb4 <Result+0x1e0>
		int tempk = string[i]-'0';
 8000a22:	2385      	movs	r3, #133	@ 0x85
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3b30      	subs	r3, #48	@ 0x30
 8000a30:	673b      	str	r3, [r7, #112]	@ 0x70
		if (tempk < 10 && tempk >= 0){
 8000a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	dc10      	bgt.n	8000a5a <Result+0x86>
 8000a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0d      	blt.n	8000a5a <Result+0x86>
			tmp[num_cnt] = tempk;
 8000a3e:	2086      	movs	r0, #134	@ 0x86
 8000a40:	183b      	adds	r3, r7, r0
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000a46:	b2d1      	uxtb	r1, r2
 8000a48:	2214      	movs	r2, #20
 8000a4a:	18ba      	adds	r2, r7, r2
 8000a4c:	54d1      	strb	r1, [r2, r3]
			num_cnt ++;
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	183b      	adds	r3, r7, r0
 8000a54:	3201      	adds	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e0a6      	b.n	8000ba8 <Result+0x1d4>
		}
		else {
			if (string[i] == '+'){
 8000a5a:	2385      	movs	r3, #133	@ 0x85
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	18d3      	adds	r3, r2, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b2b      	cmp	r3, #43	@ 0x2b
 8000a68:	d107      	bne.n	8000a7a <Result+0xa6>
				equaltion[num] = 1;
 8000a6a:	2387      	movs	r3, #135	@ 0x87
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2208      	movs	r2, #8
 8000a72:	18ba      	adds	r2, r7, r2
 8000a74:	2101      	movs	r1, #1
 8000a76:	54d1      	strb	r1, [r2, r3]
 8000a78:	e02e      	b.n	8000ad8 <Result+0x104>
			}
			else if (string[i] == '-') {
 8000a7a:	2385      	movs	r3, #133	@ 0x85
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b2d      	cmp	r3, #45	@ 0x2d
 8000a88:	d107      	bne.n	8000a9a <Result+0xc6>
				equaltion[num] = 2;
 8000a8a:	2387      	movs	r3, #135	@ 0x87
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2208      	movs	r2, #8
 8000a92:	18ba      	adds	r2, r7, r2
 8000a94:	2102      	movs	r1, #2
 8000a96:	54d1      	strb	r1, [r2, r3]
 8000a98:	e01e      	b.n	8000ad8 <Result+0x104>
			}
			else if (string[i] == 'x') {
 8000a9a:	2385      	movs	r3, #133	@ 0x85
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	18d3      	adds	r3, r2, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b78      	cmp	r3, #120	@ 0x78
 8000aa8:	d107      	bne.n	8000aba <Result+0xe6>
				equaltion[num] = 3;
 8000aaa:	2387      	movs	r3, #135	@ 0x87
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	18ba      	adds	r2, r7, r2
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	54d1      	strb	r1, [r2, r3]
 8000ab8:	e00e      	b.n	8000ad8 <Result+0x104>
			}
			else if (string[i] == ':') {
 8000aba:	2385      	movs	r3, #133	@ 0x85
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	18d3      	adds	r3, r2, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ac8:	d106      	bne.n	8000ad8 <Result+0x104>
				equaltion[num] = 4;
 8000aca:	2387      	movs	r3, #135	@ 0x87
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	18ba      	adds	r2, r7, r2
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	54d1      	strb	r1, [r2, r3]
			}
			for(uint8_t j = 0; j < num_cnt; j++){
 8000ad8:	2384      	movs	r3, #132	@ 0x84
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e051      	b.n	8000b86 <Result+0x1b2>
				uint64_t tempkk = tmp[j];
 8000ae2:	2384      	movs	r3, #132	@ 0x84
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2214      	movs	r2, #20
 8000aea:	18ba      	adds	r2, r7, r2
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000af0:	2300      	movs	r3, #0
 8000af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
				for(uint8_t k =0; k < num_cnt-j-1; k++){
 8000af4:	2377      	movs	r3, #119	@ 0x77
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e015      	b.n	8000b2a <Result+0x156>
					tempkk = tempkk*10;
 8000afe:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000b00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000b02:	0002      	movs	r2, r0
 8000b04:	000b      	movs	r3, r1
 8000b06:	0f96      	lsrs	r6, r2, #30
 8000b08:	009d      	lsls	r5, r3, #2
 8000b0a:	4335      	orrs	r5, r6
 8000b0c:	0094      	lsls	r4, r2, #2
 8000b0e:	0002      	movs	r2, r0
 8000b10:	000b      	movs	r3, r1
 8000b12:	1912      	adds	r2, r2, r4
 8000b14:	416b      	adcs	r3, r5
 8000b16:	1892      	adds	r2, r2, r2
 8000b18:	415b      	adcs	r3, r3
 8000b1a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
				for(uint8_t k =0; k < num_cnt-j-1; k++){
 8000b1e:	2177      	movs	r1, #119	@ 0x77
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	3201      	adds	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	2377      	movs	r3, #119	@ 0x77
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	2386      	movs	r3, #134	@ 0x86
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	2084      	movs	r0, #132	@ 0x84
 8000b38:	183b      	adds	r3, r7, r0
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	1acb      	subs	r3, r1, r3
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbdc      	blt.n	8000afe <Result+0x12a>
				}
				temp_var[num] = temp_var[num] + tempkk;
 8000b44:	2687      	movs	r6, #135	@ 0x87
 8000b46:	19bb      	adds	r3, r7, r6
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	6859      	ldr	r1, [r3, #4]
 8000b56:	19bb      	adds	r3, r7, r6
 8000b58:	781e      	ldrb	r6, [r3, #0]
 8000b5a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000b5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b5e:	1812      	adds	r2, r2, r0
 8000b60:	414b      	adcs	r3, r1
 8000b62:	2120      	movs	r1, #32
 8000b64:	1878      	adds	r0, r7, r1
 8000b66:	00f1      	lsls	r1, r6, #3
 8000b68:	1841      	adds	r1, r0, r1
 8000b6a:	600a      	str	r2, [r1, #0]
 8000b6c:	604b      	str	r3, [r1, #4]
				tmp[j] = 0;
 8000b6e:	2084      	movs	r0, #132	@ 0x84
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2214      	movs	r2, #20
 8000b76:	18ba      	adds	r2, r7, r2
 8000b78:	2100      	movs	r1, #0
 8000b7a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t j = 0; j < num_cnt; j++){
 8000b7c:	183b      	adds	r3, r7, r0
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	183b      	adds	r3, r7, r0
 8000b82:	3201      	adds	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	2384      	movs	r3, #132	@ 0x84
 8000b88:	18fa      	adds	r2, r7, r3
 8000b8a:	2186      	movs	r1, #134	@ 0x86
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3a5      	bcc.n	8000ae2 <Result+0x10e>
			}
			num_cnt = 0;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
			num ++;
 8000b9c:	2187      	movs	r1, #135	@ 0x87
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < strlen(string); i++){
 8000ba8:	2185      	movs	r1, #133	@ 0x85
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	2385      	movs	r3, #133	@ 0x85
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781e      	ldrb	r6, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff faa3 	bl	8000108 <strlen>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	429e      	cmp	r6, r3
 8000bc6:	d200      	bcs.n	8000bca <Result+0x1f6>
 8000bc8:	e72b      	b.n	8000a22 <Result+0x4e>
		}
	}
	for(uint8_t i = 0; i < 10; i++){
 8000bca:	2376      	movs	r3, #118	@ 0x76
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e08c      	b.n	8000cee <Result+0x31a>
		if (equaltion[i] == 3) {
 8000bd4:	2576      	movs	r5, #118	@ 0x76
 8000bd6:	197b      	adds	r3, r7, r5
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2008      	movs	r0, #8
 8000bdc:	183a      	adds	r2, r7, r0
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d13b      	bne.n	8000c5c <Result+0x288>
			temp_var[i+1] = temp_var[i] * temp_var[i+1];
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2620      	movs	r6, #32
 8000bea:	19ba      	adds	r2, r7, r6
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	6859      	ldr	r1, [r3, #4]
 8000bf4:	197b      	adds	r3, r7, r5
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	19ba      	adds	r2, r7, r6
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	197c      	adds	r4, r7, r5
 8000c06:	7824      	ldrb	r4, [r4, #0]
 8000c08:	3401      	adds	r4, #1
 8000c0a:	f7ff fb31 	bl	8000270 <__aeabi_lmul>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	000b      	movs	r3, r1
 8000c12:	19b8      	adds	r0, r7, r6
 8000c14:	00e1      	lsls	r1, r4, #3
 8000c16:	1841      	adds	r1, r0, r1
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	604b      	str	r3, [r1, #4]
			temp_var[i] = 0;
 8000c1c:	197b      	adds	r3, r7, r5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	19ba      	adds	r2, r7, r6
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	18d1      	adds	r1, r2, r3
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	600a      	str	r2, [r1, #0]
 8000c2c:	604b      	str	r3, [r1, #4]
			if (i>0){
 8000c2e:	197b      	adds	r3, r7, r5
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00a      	beq.n	8000c4c <Result+0x278>
				equaltion[i] = equaltion[i-1];
 8000c36:	197b      	adds	r3, r7, r5
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2008      	movs	r0, #8
 8000c42:	1839      	adds	r1, r7, r0
 8000c44:	5c89      	ldrb	r1, [r1, r2]
 8000c46:	183a      	adds	r2, r7, r0
 8000c48:	54d1      	strb	r1, [r2, r3]
 8000c4a:	e04a      	b.n	8000ce2 <Result+0x30e>
			}
			else equaltion[i] = 1;
 8000c4c:	2376      	movs	r3, #118	@ 0x76
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2208      	movs	r2, #8
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	2101      	movs	r1, #1
 8000c58:	54d1      	strb	r1, [r2, r3]
 8000c5a:	e042      	b.n	8000ce2 <Result+0x30e>
		}
		else if (equaltion[i] == 4) {
 8000c5c:	2576      	movs	r5, #118	@ 0x76
 8000c5e:	197b      	adds	r3, r7, r5
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2008      	movs	r0, #8
 8000c64:	183a      	adds	r2, r7, r0
 8000c66:	5cd3      	ldrb	r3, [r2, r3]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d13a      	bne.n	8000ce2 <Result+0x30e>
			temp_var[i+1] = temp_var[i] / temp_var[i+1];
 8000c6c:	197b      	adds	r3, r7, r5
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2620      	movs	r6, #32
 8000c72:	19ba      	adds	r2, r7, r6
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	6859      	ldr	r1, [r3, #4]
 8000c7c:	197b      	adds	r3, r7, r5
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	19ba      	adds	r2, r7, r6
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	197c      	adds	r4, r7, r5
 8000c8e:	7824      	ldrb	r4, [r4, #0]
 8000c90:	3401      	adds	r4, #1
 8000c92:	f7ff facd 	bl	8000230 <__aeabi_uldivmod>
 8000c96:	0002      	movs	r2, r0
 8000c98:	000b      	movs	r3, r1
 8000c9a:	19b8      	adds	r0, r7, r6
 8000c9c:	00e1      	lsls	r1, r4, #3
 8000c9e:	1841      	adds	r1, r0, r1
 8000ca0:	600a      	str	r2, [r1, #0]
 8000ca2:	604b      	str	r3, [r1, #4]
			temp_var[i] = 0;
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	19ba      	adds	r2, r7, r6
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	18d1      	adds	r1, r2, r3
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	600a      	str	r2, [r1, #0]
 8000cb4:	604b      	str	r3, [r1, #4]
			if (i>0){
 8000cb6:	197b      	adds	r3, r7, r5
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00a      	beq.n	8000cd4 <Result+0x300>
				equaltion[i] = equaltion[i-1];
 8000cbe:	197b      	adds	r3, r7, r5
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	197b      	adds	r3, r7, r5
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2008      	movs	r0, #8
 8000cca:	1839      	adds	r1, r7, r0
 8000ccc:	5c89      	ldrb	r1, [r1, r2]
 8000cce:	183a      	adds	r2, r7, r0
 8000cd0:	54d1      	strb	r1, [r2, r3]
 8000cd2:	e006      	b.n	8000ce2 <Result+0x30e>
			}
			else equaltion[i] = 1;
 8000cd4:	2376      	movs	r3, #118	@ 0x76
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2208      	movs	r2, #8
 8000cdc:	18ba      	adds	r2, r7, r2
 8000cde:	2101      	movs	r1, #1
 8000ce0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 10; i++){
 8000ce2:	2176      	movs	r1, #118	@ 0x76
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	3201      	adds	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	2376      	movs	r3, #118	@ 0x76
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	d800      	bhi.n	8000cfa <Result+0x326>
 8000cf8:	e76c      	b.n	8000bd4 <Result+0x200>
		}
	}
	for(uint8_t i = 0; i < 10; i++){
 8000cfa:	2375      	movs	r3, #117	@ 0x75
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e063      	b.n	8000dcc <Result+0x3f8>
		if (equaltion[i] == 1) {
 8000d04:	2475      	movs	r4, #117	@ 0x75
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d11f      	bne.n	8000d54 <Result+0x380>
			temp_var[i+1] = temp_var[i] + temp_var[i+1];
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2520      	movs	r5, #32
 8000d1a:	197a      	adds	r2, r7, r5
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	18d3      	adds	r3, r2, r3
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	6859      	ldr	r1, [r3, #4]
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	197a      	adds	r2, r7, r5
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	7824      	ldrb	r4, [r4, #0]
 8000d38:	3401      	adds	r4, #1
 8000d3a:	1812      	adds	r2, r2, r0
 8000d3c:	414b      	adcs	r3, r1
 8000d3e:	1978      	adds	r0, r7, r5
 8000d40:	00e1      	lsls	r1, r4, #3
 8000d42:	1841      	adds	r1, r0, r1
 8000d44:	600a      	str	r2, [r1, #0]
 8000d46:	604b      	str	r3, [r1, #4]
 8000d48:	e03a      	b.n	8000dc0 <Result+0x3ec>
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	080024cc 	.word	0x080024cc
 8000d50:	080024d8 	.word	0x080024d8
		}
		else if (equaltion[i] == 2) {
 8000d54:	2475      	movs	r4, #117	@ 0x75
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	18ba      	adds	r2, r7, r2
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d11c      	bne.n	8000d9e <Result+0x3ca>
			temp_var[i+1] = temp_var[i] - temp_var[i+1];
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2520      	movs	r5, #32
 8000d6a:	197a      	adds	r2, r7, r5
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	18d3      	adds	r3, r2, r3
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	6859      	ldr	r1, [r3, #4]
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	197a      	adds	r2, r7, r5
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	18d3      	adds	r3, r2, r3
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	7824      	ldrb	r4, [r4, #0]
 8000d88:	3401      	adds	r4, #1
 8000d8a:	1a80      	subs	r0, r0, r2
 8000d8c:	4199      	sbcs	r1, r3
 8000d8e:	0002      	movs	r2, r0
 8000d90:	000b      	movs	r3, r1
 8000d92:	1978      	adds	r0, r7, r5
 8000d94:	00e1      	lsls	r1, r4, #3
 8000d96:	1841      	adds	r1, r0, r1
 8000d98:	600a      	str	r2, [r1, #0]
 8000d9a:	604b      	str	r3, [r1, #4]
 8000d9c:	e010      	b.n	8000dc0 <Result+0x3ec>
		}
		else if (equaltion[i] == 0) {
 8000d9e:	2175      	movs	r1, #117	@ 0x75
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2208      	movs	r2, #8
 8000da6:	18ba      	adds	r2, r7, r2
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <Result+0x3ec>
			return temp_var[i];
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2220      	movs	r2, #32
 8000db4:	18ba      	adds	r2, r7, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	e00a      	b.n	8000dd6 <Result+0x402>
	for(uint8_t i = 0; i < 10; i++){
 8000dc0:	2175      	movs	r1, #117	@ 0x75
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	3201      	adds	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	2375      	movs	r3, #117	@ 0x75
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d996      	bls.n	8000d04 <Result+0x330>
		}
	}
}
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	0019      	movs	r1, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b023      	add	sp, #140	@ 0x8c
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b0a3      	sub	sp, #140	@ 0x8c
 8000de4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fabd 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f943 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 f98b 	bl	8001108 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000df2:	235c      	movs	r3, #92	@ 0x5c
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	4a98      	ldr	r2, [pc, #608]	@ (8001058 <main+0x278>)
 8000df8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000dfa:	c313      	stmia	r3!, {r0, r1, r4}
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	601a      	str	r2, [r3, #0]
  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 8000e00:	2254      	movs	r2, #84	@ 0x54
 8000e02:	18bb      	adds	r3, r7, r2
 8000e04:	4a95      	ldr	r2, [pc, #596]	@ (800105c <main+0x27c>)
 8000e06:	ca03      	ldmia	r2!, {r0, r1}
 8000e08:	c303      	stmia	r3!, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_E_Pin, LCD_4_BIT_MODE);
 8000e0a:	263c      	movs	r6, #60	@ 0x3c
 8000e0c:	19bd      	adds	r5, r7, r6
 8000e0e:	0038      	movs	r0, r7
 8000e10:	2390      	movs	r3, #144	@ 0x90
 8000e12:	05dc      	lsls	r4, r3, #23
 8000e14:	2254      	movs	r2, #84	@ 0x54
 8000e16:	18ba      	adds	r2, r7, r2
 8000e18:	235c      	movs	r3, #92	@ 0x5c
 8000e1a:	18f9      	adds	r1, r7, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9303      	str	r3, [sp, #12]
 8000e20:	2302      	movs	r3, #2
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2390      	movs	r3, #144	@ 0x90
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	0023      	movs	r3, r4
 8000e30:	f7ff fb42 	bl	80004b8 <Lcd_create>
 8000e34:	003a      	movs	r2, r7
 8000e36:	002b      	movs	r3, r5
 8000e38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e3a:	c313      	stmia	r3!, {r0, r1, r4}
 8000e3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e3e:	c313      	stmia	r3!, {r0, r1, r4}

  Lcd_cursor(&lcd, 0, 0);
 8000e40:	19bb      	adds	r3, r7, r6
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff fbc2 	bl	80005d0 <Lcd_cursor>
  Lcd_string(&lcd, "BTL ESD NHOM XX");
 8000e4c:	4a84      	ldr	r2, [pc, #528]	@ (8001060 <main+0x280>)
 8000e4e:	19bb      	adds	r3, r7, r6
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff fb92 	bl	800057c <Lcd_string>
  HAL_Delay(1500);
 8000e58:	4b82      	ldr	r3, [pc, #520]	@ (8001064 <main+0x284>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fae6 	bl	800142c <HAL_Delay>
  Lcd_clear(&lcd);
 8000e60:	19bb      	adds	r3, r7, r6
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fbd6 	bl	8000614 <Lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cursor_cnt = 0;
 8000e68:	2377      	movs	r3, #119	@ 0x77
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  uint8_t cursor_max = 0;
 8000e70:	2376      	movs	r3, #118	@ 0x76
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  uint8_t lcd_zero = 0;
 8000e78:	2375      	movs	r3, #117	@ 0x75
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  uint8_t current_layout = 0;
 8000e80:	2374      	movs	r3, #116	@ 0x74
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
  char s;
  char *lcd_buffer=(char*) malloc(200+1);
 8000e88:	20c9      	movs	r0, #201	@ 0xc9
 8000e8a:	f001 f9d3 	bl	8002234 <malloc>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	673b      	str	r3, [r7, #112]	@ 0x70
  memset(lcd_buffer,0,strlen(lcd_buffer));
 8000e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff f937 	bl	8000108 <strlen>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 fab7 	bl	8002414 <memset>
  while (1)
  {
    /* USER CODE END WHILE */
	  key_current = Keypad_Getkey();
 8000ea6:	f7ff fd37 	bl	8000918 <Keypad_Getkey>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b6e      	ldr	r3, [pc, #440]	@ (8001068 <main+0x288>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	  if(key_current != 0 && key_current != key_prev) {
 8000eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001068 <main+0x288>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <main+0xdc>
 8000eba:	e0c7      	b.n	800104c <main+0x26c>
 8000ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8001068 <main+0x288>)
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800106c <main+0x28c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d100      	bne.n	8000eca <main+0xea>
 8000ec8:	e0c0      	b.n	800104c <main+0x26c>
		  s = keypad_layout[current_layout][key_current-1];
 8000eca:	2474      	movs	r4, #116	@ 0x74
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	7819      	ldrb	r1, [r3, #0]
 8000ed0:	4b65      	ldr	r3, [pc, #404]	@ (8001068 <main+0x288>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	256f      	movs	r5, #111	@ 0x6f
 8000ed8:	197b      	adds	r3, r7, r5
 8000eda:	4865      	ldr	r0, [pc, #404]	@ (8001070 <main+0x290>)
 8000edc:	0109      	lsls	r1, r1, #4
 8000ede:	1841      	adds	r1, r0, r1
 8000ee0:	5c8a      	ldrb	r2, [r1, r2]
 8000ee2:	701a      	strb	r2, [r3, #0]

		  if (s == keypad_layout[0][12]) {
 8000ee4:	2273      	movs	r2, #115	@ 0x73
 8000ee6:	197b      	adds	r3, r7, r5
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d103      	bne.n	8000ef6 <main+0x116>
			  current_layout = 1;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e07f      	b.n	8000ff6 <main+0x216>
		  }
		  else if (s == keypad_layout[1][12]) {
 8000ef6:	2253      	movs	r2, #83	@ 0x53
 8000ef8:	236f      	movs	r3, #111	@ 0x6f
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d104      	bne.n	8000f0c <main+0x12c>
			  current_layout = 0;
 8000f02:	2374      	movs	r3, #116	@ 0x74
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e074      	b.n	8000ff6 <main+0x216>
		  }
		  else if (s == keypad_layout[1][13]) {
 8000f0c:	2263      	movs	r2, #99	@ 0x63
 8000f0e:	236f      	movs	r3, #111	@ 0x6f
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d113      	bne.n	8000f40 <main+0x160>
			  Lcd_clear(&lcd);
 8000f18:	233c      	movs	r3, #60	@ 0x3c
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fb79 	bl	8000614 <Lcd_clear>
			  cursor_cnt = 0;
 8000f22:	2377      	movs	r3, #119	@ 0x77
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			  memset(lcd_buffer,0,strlen(lcd_buffer));
 8000f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff f8eb 	bl	8000108 <strlen>
 8000f32:	0002      	movs	r2, r0
 8000f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f36:	2100      	movs	r1, #0
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 fa6b 	bl	8002414 <memset>
 8000f3e:	e05a      	b.n	8000ff6 <main+0x216>
		  }
		  else if (s == keypad_layout[0][14]) {
 8000f40:	223d      	movs	r2, #61	@ 0x3d
 8000f42:	216f      	movs	r1, #111	@ 0x6f
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d122      	bne.n	8000f92 <main+0x1b2>
			  char snum[16];
			  lcd_buffer[cursor_cnt] = s;
 8000f4c:	2377      	movs	r3, #119	@ 0x77
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	187a      	adds	r2, r7, r1
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
			  itoa(Result(lcd_buffer), snum, 10);
 8000f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fd38 	bl	80009d4 <Result>
 8000f64:	0002      	movs	r2, r0
 8000f66:	000b      	movs	r3, r1
 8000f68:	0010      	movs	r0, r2
 8000f6a:	2418      	movs	r4, #24
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	220a      	movs	r2, #10
 8000f70:	0019      	movs	r1, r3
 8000f72:	f001 f95a 	bl	800222a <itoa>
			  Lcd_cursor(&lcd, 1, 0);
 8000f76:	253c      	movs	r5, #60	@ 0x3c
 8000f78:	197b      	adds	r3, r7, r5
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fb26 	bl	80005d0 <Lcd_cursor>
			  Lcd_string(&lcd, snum);
 8000f84:	193a      	adds	r2, r7, r4
 8000f86:	197b      	adds	r3, r7, r5
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff faf6 	bl	800057c <Lcd_string>
 8000f90:	e031      	b.n	8000ff6 <main+0x216>
		  }
		  else if (s == '<') {
 8000f92:	236f      	movs	r3, #111	@ 0x6f
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f9a:	d106      	bne.n	8000faa <main+0x1ca>
			  cursor_cnt --;
 8000f9c:	2177      	movs	r1, #119	@ 0x77
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e025      	b.n	8000ff6 <main+0x216>
		  }
		  else if (s == '>') {
 8000faa:	236f      	movs	r3, #111	@ 0x6f
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8000fb2:	d10d      	bne.n	8000fd0 <main+0x1f0>
			  if (cursor_cnt < cursor_max) {
 8000fb4:	2177      	movs	r1, #119	@ 0x77
 8000fb6:	187a      	adds	r2, r7, r1
 8000fb8:	2376      	movs	r3, #118	@ 0x76
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d218      	bcs.n	8000ff6 <main+0x216>
				  cursor_cnt ++;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	3201      	adds	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e012      	b.n	8000ff6 <main+0x216>
			  }
		  }
		  else {
			  lcd_buffer[cursor_cnt] = s;
 8000fd0:	2177      	movs	r1, #119	@ 0x77
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	226f      	movs	r2, #111	@ 0x6f
 8000fdc:	18ba      	adds	r2, r7, r2
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	701a      	strb	r2, [r3, #0]

			  cursor_cnt ++;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	3201      	adds	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
			  cursor_max = cursor_cnt;
 8000fec:	2376      	movs	r3, #118	@ 0x76
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	187a      	adds	r2, r7, r1
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	701a      	strb	r2, [r3, #0]
		  }

		  // print lcd
		  if (cursor_cnt>16){
 8000ff6:	2277      	movs	r2, #119	@ 0x77
 8000ff8:	18bb      	adds	r3, r7, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d906      	bls.n	800100e <main+0x22e>
			  lcd_zero = cursor_cnt-16;
 8001000:	2375      	movs	r3, #117	@ 0x75
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	3a10      	subs	r2, #16
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e003      	b.n	8001016 <main+0x236>
		  }
		  else {
			  lcd_zero = 0;
 800100e:	2375      	movs	r3, #117	@ 0x75
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
		  }
		  char subbuff[17];
		  memcpy( subbuff, &lcd_buffer[lcd_zero], 16 );
 8001016:	2375      	movs	r3, #117	@ 0x75
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800101e:	18d1      	adds	r1, r2, r3
 8001020:	2428      	movs	r4, #40	@ 0x28
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2210      	movs	r2, #16
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fa3a 	bl	80024a0 <memcpy>
		  subbuff[16] = '\0';
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2200      	movs	r2, #0
 8001030:	741a      	strb	r2, [r3, #16]
		  Lcd_cursor(&lcd, 0, 0);
 8001032:	253c      	movs	r5, #60	@ 0x3c
 8001034:	197b      	adds	r3, r7, r5
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fac8 	bl	80005d0 <Lcd_cursor>
		  Lcd_string(&lcd, subbuff);
 8001040:	193a      	adds	r2, r7, r4
 8001042:	197b      	adds	r3, r7, r5
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fa98 	bl	800057c <Lcd_string>
	  }
	  key_prev = key_current;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <main+0x288>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <main+0x28c>)
 8001052:	701a      	strb	r2, [r3, #0]
	  key_current = Keypad_Getkey();
 8001054:	e727      	b.n	8000ea6 <main+0xc6>
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	080024f4 	.word	0x080024f4
 800105c:	08002504 	.word	0x08002504
 8001060:	080024e4 	.word	0x080024e4
 8001064:	000005dc 	.word	0x000005dc
 8001068:	20000078 	.word	0x20000078
 800106c:	20000079 	.word	0x20000079
 8001070:	08002540 	.word	0x08002540

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b091      	sub	sp, #68	@ 0x44
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	2410      	movs	r4, #16
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	2330      	movs	r3, #48	@ 0x30
 8001082:	001a      	movs	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f001 f9c5 	bl	8002414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108a:	003b      	movs	r3, r7
 800108c:	0018      	movs	r0, r3
 800108e:	2310      	movs	r3, #16
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f001 f9be 	bl	8002414 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	0021      	movs	r1, r4
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2201      	movs	r2, #1
 80010a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	0252      	lsls	r2, r2, #9
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 fc34 	bl	8001930 <HAL_RCC_OscConfig>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f89e 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	003b      	movs	r3, r7
 80010d2:	2207      	movs	r2, #7
 80010d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	003b      	movs	r3, r7
 80010d8:	2202      	movs	r2, #2
 80010da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	003b      	movs	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	003b      	movs	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e8:	003b      	movs	r3, r7
 80010ea:	2100      	movs	r1, #0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 ff39 	bl	8001f64 <HAL_RCC_ClockConfig>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80010f6:	f000 f889 	bl	800120c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010fa:	f001 f801 	bl	8002100 <HAL_RCC_EnableCSS>
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b011      	add	sp, #68	@ 0x44
 8001104:	bd90      	pop	{r4, r7, pc}
	...

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	240c      	movs	r4, #12
 8001110:	193b      	adds	r3, r7, r4
 8001112:	0018      	movs	r0, r3
 8001114:	2314      	movs	r3, #20
 8001116:	001a      	movs	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	f001 f97b 	bl	8002414 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111e:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <MX_GPIO_Init+0xfc>)
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <MX_GPIO_Init+0xfc>)
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	03c9      	lsls	r1, r1, #15
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <MX_GPIO_Init+0xfc>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	03db      	lsls	r3, r3, #15
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <MX_GPIO_Init+0xfc>)
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xfc>)
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	0289      	lsls	r1, r1, #10
 8001144:	430a      	orrs	r2, r1
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xfc>)
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_GPIO_Init+0xfc>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xfc>)
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	02c9      	lsls	r1, r1, #11
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xfc>)
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	02db      	lsls	r3, r3, #11
 800116c:	4013      	ands	r3, r2
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001172:	2390      	movs	r3, #144	@ 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	2200      	movs	r2, #0
 8001178:	21ff      	movs	r1, #255	@ 0xff
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fbbb 	bl	80018f6 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_GPIO_Init+0x100>)
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fbb5 	bl	80018f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 800118c:	193b      	adds	r3, r7, r4
 800118e:	22ff      	movs	r2, #255	@ 0xff
 8001190:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	193b      	adds	r3, r7, r4
 8001194:	2201      	movs	r2, #1
 8001196:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	193a      	adds	r2, r7, r4
 80011a6:	2390      	movs	r3, #144	@ 0x90
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 fa15 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : R0_Pin */
  GPIO_InitStruct.Pin = R0_Pin;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2202      	movs	r2, #2
 80011b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2201      	movs	r2, #1
 80011bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <MX_GPIO_Init+0x100>)
 80011ce:	0019      	movs	r1, r3
 80011d0:	0010      	movs	r0, r2
 80011d2:	f000 fa03 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 80011d6:	0021      	movs	r1, r4
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	22c0      	movs	r2, #192	@ 0xc0
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2201      	movs	r2, #1
 80011ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	187a      	adds	r2, r7, r1
 80011ee:	2390      	movs	r3, #144	@ 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f9f1 	bl	80015dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b009      	add	sp, #36	@ 0x24
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	e7fd      	b.n	8001214 <Error_Handler+0x8>

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x44>)
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_MspInit+0x44>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_MspInit+0x44>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_MspInit+0x44>)
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0549      	lsls	r1, r1, #21
 8001240:	430a      	orrs	r2, r1
 8001242:	61da      	str	r2, [r3, #28]
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_MspInit+0x44>)
 8001246:	69da      	ldr	r2, [r3, #28]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	055b      	lsls	r3, r3, #21
 800124c:	4013      	ands	r3, r2
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001264:	f000 ffb0 	bl	80021c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x8>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 f8b2 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f001 f8be 	bl	8002448 <__errno>
 80012cc:	0003      	movs	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	18d2      	adds	r2, r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <_sbrk+0x64>)
 80012e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20001000 	.word	0x20001000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	2000007c 	.word	0x2000007c
 8001300:	200001d0 	.word	0x200001d0

08001304 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001312:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f7ff fff6 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	@ (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	@ (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133e:	f001 f889 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff fd4d 	bl	8000de0 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
  ldr   r0, =_estack
 8001348:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001354:	080025c8 	.word	0x080025c8
  ldr r2, =_sbss
 8001358:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800135c:	200001cc 	.word	0x200001cc

08001360 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_IRQHandler>
	...

08001364 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <HAL_Init+0x24>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_Init+0x24>)
 800136e:	2110      	movs	r1, #16
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f809 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137a:	f7ff ff4d 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <HAL_InitTick+0x5c>)
 8001396:	681c      	ldr	r4, [r3, #0]
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_InitTick+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	0019      	movs	r1, r3
 800139e:	23fa      	movs	r3, #250	@ 0xfa
 80013a0:	0098      	lsls	r0, r3, #2
 80013a2:	f7fe feb9 	bl	8000118 <__udivsi3>
 80013a6:	0003      	movs	r3, r0
 80013a8:	0019      	movs	r1, r3
 80013aa:	0020      	movs	r0, r4
 80013ac:	f7fe feb4 	bl	8000118 <__udivsi3>
 80013b0:	0003      	movs	r3, r0
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f905 	bl	80015c2 <HAL_SYSTICK_Config>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00f      	b.n	80013e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d80b      	bhi.n	80013de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2301      	movs	r3, #1
 80013ca:	425b      	negs	r3, r3
 80013cc:	2200      	movs	r2, #0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 f8e2 	bl	8001598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_InitTick+0x64>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b003      	add	sp, #12
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	001a      	movs	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	18d2      	adds	r2, r2, r3
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_IncTick+0x20>)
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	20000008 	.word	0x20000008
 8001414:	20000080 	.word	0x20000080

08001418 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	@ (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000080 	.word	0x20000080

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	001a      	movs	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	189b      	adds	r3, r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	20000008 	.word	0x20000008

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b7f      	cmp	r3, #127	@ 0x7f
 8001488:	d828      	bhi.n	80014dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	4a2f      	ldr	r2, [pc, #188]	@ (8001548 <__NVIC_SetPriority+0xd4>)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	33c0      	adds	r3, #192	@ 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	589b      	ldr	r3, [r3, r2]
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	0011      	movs	r1, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	400a      	ands	r2, r1
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	21ff      	movs	r1, #255	@ 0xff
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	22ff      	movs	r2, #255	@ 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	2303      	movs	r3, #3
 80014c2:	4003      	ands	r3, r0
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	481f      	ldr	r0, [pc, #124]	@ (8001548 <__NVIC_SetPriority+0xd4>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	430a      	orrs	r2, r1
 80014d4:	33c0      	adds	r3, #192	@ 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014da:	e031      	b.n	8001540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <__NVIC_SetPriority+0xd8>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	230f      	movs	r3, #15
 80014e6:	400b      	ands	r3, r1
 80014e8:	3b08      	subs	r3, #8
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	@ 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	@ 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4809      	ldr	r0, [pc, #36]	@ (800154c <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001c      	movs	r4, r3
 800152c:	230f      	movs	r3, #15
 800152e:	4023      	ands	r3, r4
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	430a      	orrs	r2, r1
 8001536:	3306      	adds	r3, #6
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18c3      	adds	r3, r0, r3
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	429a      	cmp	r2, r3
 8001562:	d301      	bcc.n	8001568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2301      	movs	r3, #1
 8001566:	e010      	b.n	800158a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <SysTick_Config+0x44>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	3a01      	subs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2103      	movs	r1, #3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff7c 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <SysTick_Config+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <SysTick_Config+0x44>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ffbf 	bl	8001550 <SysTick_Config>
 80015d2:	0003      	movs	r3, r0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e14f      	b.n	800188c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <HAL_GPIO_Init+0x28>
 8001602:	e140      	b.n	8001886 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	2201      	movs	r2, #1
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2107      	movs	r1, #7
 80016f2:	400b      	ands	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d100      	bne.n	8001750 <HAL_GPIO_Init+0x174>
 800174e:	e09a      	b.n	8001886 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b54      	ldr	r3, [pc, #336]	@ (80018a4 <HAL_GPIO_Init+0x2c8>)
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HAL_GPIO_Init+0x2c8>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	4b51      	ldr	r3, [pc, #324]	@ (80018a4 <HAL_GPIO_Init+0x2c8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a4f      	ldr	r2, [pc, #316]	@ (80018a8 <HAL_GPIO_Init+0x2cc>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	589b      	ldr	r3, [r3, r2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2203      	movs	r2, #3
 800177a:	4013      	ands	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	2390      	movs	r3, #144	@ 0x90
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	429a      	cmp	r2, r3
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x1e2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a44      	ldr	r2, [pc, #272]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x1de>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a43      	ldr	r2, [pc, #268]	@ (80018b0 <HAL_GPIO_Init+0x2d4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x1da>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a42      	ldr	r2, [pc, #264]	@ (80018b4 <HAL_GPIO_Init+0x2d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x1d6>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017be:	2300      	movs	r3, #0
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	2103      	movs	r1, #3
 80017c4:	400a      	ands	r2, r1
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	@ (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	035b      	lsls	r3, r3, #13
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001808:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43da      	mvns	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	4013      	ands	r3, r2
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	40da      	lsrs	r2, r3
 8001894:	1e13      	subs	r3, r2, #0
 8001896:	d000      	beq.n	800189a <HAL_GPIO_Init+0x2be>
 8001898:	e6a8      	b.n	80015ec <HAL_GPIO_Init+0x10>
  } 
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b006      	add	sp, #24
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	000a      	movs	r2, r1
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	1cba      	adds	r2, r7, #2
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	4013      	ands	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018d6:	230f      	movs	r3, #15
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
  }
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	0008      	movs	r0, r1
 8001900:	0011      	movs	r1, r2
 8001902:	1cbb      	adds	r3, r7, #2
 8001904:	1c02      	adds	r2, r0, #0
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	1c7b      	adds	r3, r7, #1
 800190a:	1c0a      	adds	r2, r1, #0
 800190c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190e:	1c7b      	adds	r3, r7, #1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191e:	e003      	b.n	8001928 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e301      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x1e>
 800194c:	e08d      	b.n	8001a6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800194e:	4bc3      	ldr	r3, [pc, #780]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	220c      	movs	r2, #12
 8001954:	4013      	ands	r3, r2
 8001956:	2b04      	cmp	r3, #4
 8001958:	d00e      	beq.n	8001978 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195a:	4bc0      	ldr	r3, [pc, #768]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	220c      	movs	r2, #12
 8001960:	4013      	ands	r3, r2
 8001962:	2b08      	cmp	r3, #8
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x64>
 8001966:	4bbd      	ldr	r3, [pc, #756]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	401a      	ands	r2, r3
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	429a      	cmp	r2, r3
 8001976:	d10d      	bne.n	8001994 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4bb8      	ldr	r3, [pc, #736]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	4013      	ands	r3, r2
 8001982:	d100      	bne.n	8001986 <HAL_RCC_OscConfig+0x56>
 8001984:	e070      	b.n	8001a68 <HAL_RCC_OscConfig+0x138>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d000      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
 800198e:	e06b      	b.n	8001a68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e2d8      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x7c>
 800199c:	4baf      	ldr	r3, [pc, #700]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4bae      	ldr	r3, [pc, #696]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0249      	lsls	r1, r1, #9
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e02f      	b.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x9e>
 80019b4:	4ba9      	ldr	r3, [pc, #676]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4ba8      	ldr	r3, [pc, #672]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019ba:	49a9      	ldr	r1, [pc, #676]	@ (8001c60 <HAL_RCC_OscConfig+0x330>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4ba6      	ldr	r3, [pc, #664]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4ba5      	ldr	r3, [pc, #660]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019c6:	49a7      	ldr	r1, [pc, #668]	@ (8001c64 <HAL_RCC_OscConfig+0x334>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e01e      	b.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0xc4>
 80019d6:	4ba1      	ldr	r3, [pc, #644]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4ba0      	ldr	r3, [pc, #640]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	02c9      	lsls	r1, r1, #11
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019ea:	2180      	movs	r1, #128	@ 0x80
 80019ec:	0249      	lsls	r1, r1, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 80019f4:	4b99      	ldr	r3, [pc, #612]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b98      	ldr	r3, [pc, #608]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 80019fa:	4999      	ldr	r1, [pc, #612]	@ (8001c60 <HAL_RCC_OscConfig+0x330>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b96      	ldr	r3, [pc, #600]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b95      	ldr	r3, [pc, #596]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a06:	4997      	ldr	r1, [pc, #604]	@ (8001c64 <HAL_RCC_OscConfig+0x334>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fd00 	bl	8001418 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fcfb 	bl	8001418 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	@ 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e28a      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a30:	4b8a      	ldr	r3, [pc, #552]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	029b      	lsls	r3, r3, #10
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0xee>
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fceb 	bl	8001418 <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fce6 	bl	8001418 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e275      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b80      	ldr	r3, [pc, #512]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x118>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x146>
 8001a74:	e069      	b.n	8001b4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a76:	4b79      	ldr	r3, [pc, #484]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d00b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a80:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	220c      	movs	r2, #12
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d11c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x196>
 8001a8c:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	4013      	ands	r3, r2
 8001a96:	d116      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a98:	4b70      	ldr	r3, [pc, #448]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x17e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e24b      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	22f8      	movs	r2, #248	@ 0xf8
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00da      	lsls	r2, r3, #3
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac4:	e041      	b.n	8001b4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fc9d 	bl	8001418 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fc98 	bl	8001418 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e227      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b59      	ldr	r3, [pc, #356]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f1      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	22f8      	movs	r2, #248	@ 0xf8
 8001b06:	4393      	bics	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00da      	lsls	r2, r3, #3
 8001b10:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e018      	b.n	8001b4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	438a      	bics	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fc78 	bl	8001418 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fc73 	bl	8001418 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e202      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d1f1      	bne.n	8001b2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	4013      	ands	r3, r2
 8001b52:	d036      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d019      	beq.n	8001b90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b60:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fc56 	bl	8001418 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fc51 	bl	8001418 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1e0      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b84:	4b35      	ldr	r3, [pc, #212]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_OscConfig+0x242>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b94:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fc3c 	bl	8001418 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fc37 	bl	8001418 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1c6      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f1      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x29e>
 8001bcc:	e0b4      	b.n	8001d38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	201f      	movs	r0, #31
 8001bd0:	183b      	adds	r3, r7, r0
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	055b      	lsls	r3, r3, #21
 8001bde:	4013      	ands	r3, r2
 8001be0:	d110      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	430a      	orrs	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_RCC_OscConfig+0x338>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d11a      	bne.n	8001c46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c10:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_RCC_OscConfig+0x338>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_RCC_OscConfig+0x338>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	0049      	lsls	r1, r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fbfb 	bl	8001418 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff fbf6 	bl	8001418 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e185      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_OscConfig+0x338>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x33c>
 8001c4e:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4b02      	ldr	r3, [pc, #8]	@ (8001c5c <HAL_RCC_OscConfig+0x32c>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	621a      	str	r2, [r3, #32]
 8001c5a:	e035      	b.n	8001cc8 <HAL_RCC_OscConfig+0x398>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	fffeffff 	.word	0xfffeffff
 8001c64:	fffbffff 	.word	0xfffbffff
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x35e>
 8001c74:	4bb6      	ldr	r3, [pc, #728]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4bb5      	ldr	r3, [pc, #724]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	4bb3      	ldr	r3, [pc, #716]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	4bb2      	ldr	r3, [pc, #712]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x398>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x380>
 8001c96:	4bae      	ldr	r3, [pc, #696]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4bad      	ldr	r3, [pc, #692]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	4bab      	ldr	r3, [pc, #684]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	4baa      	ldr	r3, [pc, #680]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x398>
 8001cb0:	4ba7      	ldr	r3, [pc, #668]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4ba6      	ldr	r3, [pc, #664]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	4ba4      	ldr	r3, [pc, #656]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	4ba3      	ldr	r3, [pc, #652]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d014      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fba2 	bl	8001418 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fb9d 	bl	8001418 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a9b      	ldr	r2, [pc, #620]	@ (8001f54 <HAL_RCC_OscConfig+0x624>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e12b      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	4b98      	ldr	r3, [pc, #608]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x3aa>
 8001cf8:	e013      	b.n	8001d22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb8d 	bl	8001418 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7ff fb88 	bl	8001418 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a91      	ldr	r2, [pc, #580]	@ (8001f54 <HAL_RCC_OscConfig+0x624>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e116      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	4b8d      	ldr	r3, [pc, #564]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d22:	231f      	movs	r3, #31
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	4b87      	ldr	r3, [pc, #540]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d32:	4989      	ldr	r1, [pc, #548]	@ (8001f58 <HAL_RCC_OscConfig+0x628>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d4a:	4b81      	ldr	r3, [pc, #516]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d4e:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d56:	4b7e      	ldr	r3, [pc, #504]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fb59 	bl	8001418 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d6c:	f7ff fb54 	bl	8001418 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0e3      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d7e:	4b74      	ldr	r3, [pc, #464]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d88:	4b71      	ldr	r3, [pc, #452]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	22f8      	movs	r2, #248	@ 0xf8
 8001d8e:	4393      	bics	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	00da      	lsls	r2, r3, #3
 8001d98:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9e:	e034      	b.n	8001e0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	3305      	adds	r3, #5
 8001da6:	d111      	bne.n	8001dcc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001da8:	4b69      	ldr	r3, [pc, #420]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dac:	4b68      	ldr	r3, [pc, #416]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dae:	2104      	movs	r1, #4
 8001db0:	438a      	bics	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001db4:	4b66      	ldr	r3, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db8:	22f8      	movs	r2, #248	@ 0xf8
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	00da      	lsls	r2, r3, #3
 8001dc4:	4b62      	ldr	r3, [pc, #392]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dca:	e01e      	b.n	8001e0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dcc:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fb18 	bl	8001418 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dee:	f7ff fb13 	bl	8001418 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0a2      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e00:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d100      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4e4>
 8001e12:	e097      	b.n	8001f44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	4b4e      	ldr	r3, [pc, #312]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	220c      	movs	r2, #12
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d100      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4f2>
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d14c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b49      	ldr	r3, [pc, #292]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b48      	ldr	r3, [pc, #288]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e30:	494a      	ldr	r1, [pc, #296]	@ (8001f5c <HAL_RCC_OscConfig+0x62c>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff faef 	bl	8001418 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff faea 	bl	8001418 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e079      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	220f      	movs	r2, #15
 8001e64:	4393      	bics	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e6c:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a3a      	ldr	r2, [pc, #232]	@ (8001f60 <HAL_RCC_OscConfig+0x630>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	0449      	lsls	r1, r1, #17
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fabd 	bl	8001418 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fab8 	bl	8001418 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e047      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	049b      	lsls	r3, r3, #18
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x574>
 8001ec2:	e03f      	b.n	8001f44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001eca:	4924      	ldr	r1, [pc, #144]	@ (8001f5c <HAL_RCC_OscConfig+0x62c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff faa2 	bl	8001418 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fa9d 	bl	8001418 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e02c      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	049b      	lsls	r3, r3, #18
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x5aa>
 8001ef8:	e024      	b.n	8001f44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e01f      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10e      	bne.n	8001f40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	220f      	movs	r2, #15
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	23f0      	movs	r3, #240	@ 0xf0
 8001f34:	039b      	lsls	r3, r3, #14
 8001f36:	401a      	ands	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	00001388 	.word	0x00001388
 8001f58:	efffffff 	.word	0xefffffff
 8001f5c:	feffffff 	.word	0xfeffffff
 8001f60:	ffc2ffff 	.word	0xffc2ffff

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b3      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b5b      	ldr	r3, [pc, #364]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d911      	bls.n	8001faa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b58      	ldr	r3, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4b55      	ldr	r3, [pc, #340]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f98:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e09a      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d006      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8001fc4:	21e0      	movs	r1, #224	@ 0xe0
 8001fc6:	00c9      	lsls	r1, r1, #3
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	22f0      	movs	r2, #240	@ 0xf0
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d040      	beq.n	800206c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d114      	bne.n	8002028 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06e      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	049b      	lsls	r3, r3, #18
 8002012:	4013      	ands	r3, r2
 8002014:	d108      	bne.n	8002028 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e062      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e05b      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002028:	4b30      	ldr	r3, [pc, #192]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4b2d      	ldr	r3, [pc, #180]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff f9ec 	bl	8001418 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7ff f9e7 	bl	8001418 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a27      	ldr	r2, [pc, #156]	@ (80020f0 <HAL_RCC_ClockConfig+0x18c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e042      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	220c      	movs	r2, #12
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1ec      	bne.n	8002046 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d211      	bcs.n	800209e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_RCC_ClockConfig+0x184>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e020      	b.n	80020e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a11      	ldr	r2, [pc, #68]	@ (80020f4 <HAL_RCC_ClockConfig+0x190>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020bc:	f000 f82e 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020c0:	0001      	movs	r1, r0
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_RCC_ClockConfig+0x188>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	220f      	movs	r2, #15
 80020ca:	4013      	ands	r3, r2
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x194>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	000a      	movs	r2, r1
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x198>)
 80020d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020d8:	2003      	movs	r0, #3
 80020da:	f7ff f957 	bl	800138c <HAL_InitTick>
  
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	00001388 	.word	0x00001388
 80020f4:	fffff8ff 	.word	0xfffff8ff
 80020f8:	08002560 	.word	0x08002560
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <HAL_RCC_EnableCSS+0x18>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_RCC_EnableCSS+0x18>)
 800210a:	2180      	movs	r1, #128	@ 0x80
 800210c:	0309      	lsls	r1, r1, #12
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	220c      	movs	r2, #12
 8002140:	4013      	ands	r3, r2
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x36>
 800214a:	e02c      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	e02c      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	220f      	movs	r2, #15
 8002158:	4013      	ands	r3, r2
 800215a:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	220f      	movs	r2, #15
 8002166:	4013      	ands	r3, r2
 8002168:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4810      	ldr	r0, [pc, #64]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800217c:	f7fd ffcc 	bl	8000118 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	001a      	movs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4353      	muls	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e009      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	000a      	movs	r2, r1
 8002190:	0152      	lsls	r2, r2, #5
 8002192:	1a52      	subs	r2, r2, r1
 8002194:	0193      	lsls	r3, r2, #6
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	185b      	adds	r3, r3, r1
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	e002      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a8:	613b      	str	r3, [r7, #16]
      break;
 80021aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	08002570 	.word	0x08002570
 80021c4:	08002580 	.word	0x08002580

080021c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2280      	movs	r2, #128	@ 0x80
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b80      	cmp	r3, #128	@ 0x80
 80021d6:	d104      	bne.n	80021e2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80021d8:	f000 f80a 	bl	80021f0 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	701a      	strb	r2, [r3, #0]
  }
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	4002100a 	.word	0x4002100a

080021f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <__itoa>:
 80021fa:	1e93      	subs	r3, r2, #2
 80021fc:	b510      	push	{r4, lr}
 80021fe:	000c      	movs	r4, r1
 8002200:	2b22      	cmp	r3, #34	@ 0x22
 8002202:	d904      	bls.n	800220e <__itoa+0x14>
 8002204:	2300      	movs	r3, #0
 8002206:	001c      	movs	r4, r3
 8002208:	700b      	strb	r3, [r1, #0]
 800220a:	0020      	movs	r0, r4
 800220c:	bd10      	pop	{r4, pc}
 800220e:	2a0a      	cmp	r2, #10
 8002210:	d109      	bne.n	8002226 <__itoa+0x2c>
 8002212:	2800      	cmp	r0, #0
 8002214:	da07      	bge.n	8002226 <__itoa+0x2c>
 8002216:	232d      	movs	r3, #45	@ 0x2d
 8002218:	700b      	strb	r3, [r1, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4240      	negs	r0, r0
 800221e:	1861      	adds	r1, r4, r1
 8002220:	f000 f8c4 	bl	80023ac <__utoa>
 8002224:	e7f1      	b.n	800220a <__itoa+0x10>
 8002226:	2100      	movs	r1, #0
 8002228:	e7f9      	b.n	800221e <__itoa+0x24>

0800222a <itoa>:
 800222a:	b510      	push	{r4, lr}
 800222c:	f7ff ffe5 	bl	80021fa <__itoa>
 8002230:	bd10      	pop	{r4, pc}
	...

08002234 <malloc>:
 8002234:	b510      	push	{r4, lr}
 8002236:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <malloc+0x10>)
 8002238:	0001      	movs	r1, r0
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f000 f826 	bl	800228c <_malloc_r>
 8002240:	bd10      	pop	{r4, pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	2000000c 	.word	0x2000000c

08002248 <sbrk_aligned>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	4e0f      	ldr	r6, [pc, #60]	@ (8002288 <sbrk_aligned+0x40>)
 800224c:	000d      	movs	r5, r1
 800224e:	6831      	ldr	r1, [r6, #0]
 8002250:	0004      	movs	r4, r0
 8002252:	2900      	cmp	r1, #0
 8002254:	d102      	bne.n	800225c <sbrk_aligned+0x14>
 8002256:	f000 f8e5 	bl	8002424 <_sbrk_r>
 800225a:	6030      	str	r0, [r6, #0]
 800225c:	0029      	movs	r1, r5
 800225e:	0020      	movs	r0, r4
 8002260:	f000 f8e0 	bl	8002424 <_sbrk_r>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	d103      	bne.n	8002270 <sbrk_aligned+0x28>
 8002268:	2501      	movs	r5, #1
 800226a:	426d      	negs	r5, r5
 800226c:	0028      	movs	r0, r5
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	2303      	movs	r3, #3
 8002272:	1cc5      	adds	r5, r0, #3
 8002274:	439d      	bics	r5, r3
 8002276:	42a8      	cmp	r0, r5
 8002278:	d0f8      	beq.n	800226c <sbrk_aligned+0x24>
 800227a:	1a29      	subs	r1, r5, r0
 800227c:	0020      	movs	r0, r4
 800227e:	f000 f8d1 	bl	8002424 <_sbrk_r>
 8002282:	3001      	adds	r0, #1
 8002284:	d1f2      	bne.n	800226c <sbrk_aligned+0x24>
 8002286:	e7ef      	b.n	8002268 <sbrk_aligned+0x20>
 8002288:	20000084 	.word	0x20000084

0800228c <_malloc_r>:
 800228c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800228e:	2203      	movs	r2, #3
 8002290:	1ccb      	adds	r3, r1, #3
 8002292:	4393      	bics	r3, r2
 8002294:	3308      	adds	r3, #8
 8002296:	0005      	movs	r5, r0
 8002298:	001f      	movs	r7, r3
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d234      	bcs.n	8002308 <_malloc_r+0x7c>
 800229e:	270c      	movs	r7, #12
 80022a0:	42b9      	cmp	r1, r7
 80022a2:	d833      	bhi.n	800230c <_malloc_r+0x80>
 80022a4:	0028      	movs	r0, r5
 80022a6:	f000 f871 	bl	800238c <__malloc_lock>
 80022aa:	4e37      	ldr	r6, [pc, #220]	@ (8002388 <_malloc_r+0xfc>)
 80022ac:	6833      	ldr	r3, [r6, #0]
 80022ae:	001c      	movs	r4, r3
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d12f      	bne.n	8002314 <_malloc_r+0x88>
 80022b4:	0039      	movs	r1, r7
 80022b6:	0028      	movs	r0, r5
 80022b8:	f7ff ffc6 	bl	8002248 <sbrk_aligned>
 80022bc:	0004      	movs	r4, r0
 80022be:	1c43      	adds	r3, r0, #1
 80022c0:	d15f      	bne.n	8002382 <_malloc_r+0xf6>
 80022c2:	6834      	ldr	r4, [r6, #0]
 80022c4:	9400      	str	r4, [sp, #0]
 80022c6:	9b00      	ldr	r3, [sp, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d14a      	bne.n	8002362 <_malloc_r+0xd6>
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d052      	beq.n	8002376 <_malloc_r+0xea>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	0028      	movs	r0, r5
 80022d4:	18e3      	adds	r3, r4, r3
 80022d6:	9900      	ldr	r1, [sp, #0]
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	f000 f8a3 	bl	8002424 <_sbrk_r>
 80022de:	9b01      	ldr	r3, [sp, #4]
 80022e0:	4283      	cmp	r3, r0
 80022e2:	d148      	bne.n	8002376 <_malloc_r+0xea>
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	0028      	movs	r0, r5
 80022e8:	1aff      	subs	r7, r7, r3
 80022ea:	0039      	movs	r1, r7
 80022ec:	f7ff ffac 	bl	8002248 <sbrk_aligned>
 80022f0:	3001      	adds	r0, #1
 80022f2:	d040      	beq.n	8002376 <_malloc_r+0xea>
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	6833      	ldr	r3, [r6, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2a00      	cmp	r2, #0
 8002300:	d133      	bne.n	800236a <_malloc_r+0xde>
 8002302:	9b00      	ldr	r3, [sp, #0]
 8002304:	6033      	str	r3, [r6, #0]
 8002306:	e019      	b.n	800233c <_malloc_r+0xb0>
 8002308:	2b00      	cmp	r3, #0
 800230a:	dac9      	bge.n	80022a0 <_malloc_r+0x14>
 800230c:	230c      	movs	r3, #12
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	2000      	movs	r0, #0
 8002312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002314:	6821      	ldr	r1, [r4, #0]
 8002316:	1bc9      	subs	r1, r1, r7
 8002318:	d420      	bmi.n	800235c <_malloc_r+0xd0>
 800231a:	290b      	cmp	r1, #11
 800231c:	d90a      	bls.n	8002334 <_malloc_r+0xa8>
 800231e:	19e2      	adds	r2, r4, r7
 8002320:	6027      	str	r7, [r4, #0]
 8002322:	42a3      	cmp	r3, r4
 8002324:	d104      	bne.n	8002330 <_malloc_r+0xa4>
 8002326:	6032      	str	r2, [r6, #0]
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	6011      	str	r1, [r2, #0]
 800232c:	6053      	str	r3, [r2, #4]
 800232e:	e005      	b.n	800233c <_malloc_r+0xb0>
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e7f9      	b.n	8002328 <_malloc_r+0x9c>
 8002334:	6862      	ldr	r2, [r4, #4]
 8002336:	42a3      	cmp	r3, r4
 8002338:	d10e      	bne.n	8002358 <_malloc_r+0xcc>
 800233a:	6032      	str	r2, [r6, #0]
 800233c:	0028      	movs	r0, r5
 800233e:	f000 f82d 	bl	800239c <__malloc_unlock>
 8002342:	0020      	movs	r0, r4
 8002344:	2207      	movs	r2, #7
 8002346:	300b      	adds	r0, #11
 8002348:	1d23      	adds	r3, r4, #4
 800234a:	4390      	bics	r0, r2
 800234c:	1ac2      	subs	r2, r0, r3
 800234e:	4298      	cmp	r0, r3
 8002350:	d0df      	beq.n	8002312 <_malloc_r+0x86>
 8002352:	1a1b      	subs	r3, r3, r0
 8002354:	50a3      	str	r3, [r4, r2]
 8002356:	e7dc      	b.n	8002312 <_malloc_r+0x86>
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	e7ef      	b.n	800233c <_malloc_r+0xb0>
 800235c:	0023      	movs	r3, r4
 800235e:	6864      	ldr	r4, [r4, #4]
 8002360:	e7a6      	b.n	80022b0 <_malloc_r+0x24>
 8002362:	9c00      	ldr	r4, [sp, #0]
 8002364:	6863      	ldr	r3, [r4, #4]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	e7ad      	b.n	80022c6 <_malloc_r+0x3a>
 800236a:	001a      	movs	r2, r3
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	42a3      	cmp	r3, r4
 8002370:	d1fb      	bne.n	800236a <_malloc_r+0xde>
 8002372:	2300      	movs	r3, #0
 8002374:	e7da      	b.n	800232c <_malloc_r+0xa0>
 8002376:	230c      	movs	r3, #12
 8002378:	0028      	movs	r0, r5
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	f000 f80e 	bl	800239c <__malloc_unlock>
 8002380:	e7c6      	b.n	8002310 <_malloc_r+0x84>
 8002382:	6007      	str	r7, [r0, #0]
 8002384:	e7da      	b.n	800233c <_malloc_r+0xb0>
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	20000088 	.word	0x20000088

0800238c <__malloc_lock>:
 800238c:	b510      	push	{r4, lr}
 800238e:	4802      	ldr	r0, [pc, #8]	@ (8002398 <__malloc_lock+0xc>)
 8002390:	f000 f884 	bl	800249c <__retarget_lock_acquire_recursive>
 8002394:	bd10      	pop	{r4, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	200001c8 	.word	0x200001c8

0800239c <__malloc_unlock>:
 800239c:	b510      	push	{r4, lr}
 800239e:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <__malloc_unlock+0xc>)
 80023a0:	f000 f87d 	bl	800249e <__retarget_lock_release_recursive>
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	200001c8 	.word	0x200001c8

080023ac <__utoa>:
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	000c      	movs	r4, r1
 80023b0:	0016      	movs	r6, r2
 80023b2:	b08d      	sub	sp, #52	@ 0x34
 80023b4:	2225      	movs	r2, #37	@ 0x25
 80023b6:	0007      	movs	r7, r0
 80023b8:	4915      	ldr	r1, [pc, #84]	@ (8002410 <__utoa+0x64>)
 80023ba:	a802      	add	r0, sp, #8
 80023bc:	f000 f870 	bl	80024a0 <memcpy>
 80023c0:	1e62      	subs	r2, r4, #1
 80023c2:	1eb3      	subs	r3, r6, #2
 80023c4:	2500      	movs	r5, #0
 80023c6:	9201      	str	r2, [sp, #4]
 80023c8:	2b22      	cmp	r3, #34	@ 0x22
 80023ca:	d904      	bls.n	80023d6 <__utoa+0x2a>
 80023cc:	7025      	strb	r5, [r4, #0]
 80023ce:	002c      	movs	r4, r5
 80023d0:	0020      	movs	r0, r4
 80023d2:	b00d      	add	sp, #52	@ 0x34
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d6:	0038      	movs	r0, r7
 80023d8:	0031      	movs	r1, r6
 80023da:	f7fd ff23 	bl	8000224 <__aeabi_uidivmod>
 80023de:	000b      	movs	r3, r1
 80023e0:	aa02      	add	r2, sp, #8
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	9a01      	ldr	r2, [sp, #4]
 80023e6:	0029      	movs	r1, r5
 80023e8:	3501      	adds	r5, #1
 80023ea:	5553      	strb	r3, [r2, r5]
 80023ec:	003b      	movs	r3, r7
 80023ee:	0007      	movs	r7, r0
 80023f0:	429e      	cmp	r6, r3
 80023f2:	d9f0      	bls.n	80023d6 <__utoa+0x2a>
 80023f4:	2300      	movs	r3, #0
 80023f6:	0022      	movs	r2, r4
 80023f8:	5563      	strb	r3, [r4, r5]
 80023fa:	000b      	movs	r3, r1
 80023fc:	1ac8      	subs	r0, r1, r3
 80023fe:	4283      	cmp	r3, r0
 8002400:	dde6      	ble.n	80023d0 <__utoa+0x24>
 8002402:	7810      	ldrb	r0, [r2, #0]
 8002404:	5ce5      	ldrb	r5, [r4, r3]
 8002406:	7015      	strb	r5, [r2, #0]
 8002408:	54e0      	strb	r0, [r4, r3]
 800240a:	3201      	adds	r2, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	e7f5      	b.n	80023fc <__utoa+0x50>
 8002410:	08002590 	.word	0x08002590

08002414 <memset>:
 8002414:	0003      	movs	r3, r0
 8002416:	1882      	adds	r2, r0, r2
 8002418:	4293      	cmp	r3, r2
 800241a:	d100      	bne.n	800241e <memset+0xa>
 800241c:	4770      	bx	lr
 800241e:	7019      	strb	r1, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	e7f9      	b.n	8002418 <memset+0x4>

08002424 <_sbrk_r>:
 8002424:	2300      	movs	r3, #0
 8002426:	b570      	push	{r4, r5, r6, lr}
 8002428:	4d06      	ldr	r5, [pc, #24]	@ (8002444 <_sbrk_r+0x20>)
 800242a:	0004      	movs	r4, r0
 800242c:	0008      	movs	r0, r1
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	f7fe ff32 	bl	8001298 <_sbrk>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d103      	bne.n	8002440 <_sbrk_r+0x1c>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d000      	beq.n	8002440 <_sbrk_r+0x1c>
 800243e:	6023      	str	r3, [r4, #0]
 8002440:	bd70      	pop	{r4, r5, r6, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	200001c4 	.word	0x200001c4

08002448 <__errno>:
 8002448:	4b01      	ldr	r3, [pc, #4]	@ (8002450 <__errno+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	2000000c 	.word	0x2000000c

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2600      	movs	r6, #0
 8002458:	4c0c      	ldr	r4, [pc, #48]	@ (800248c <__libc_init_array+0x38>)
 800245a:	4d0d      	ldr	r5, [pc, #52]	@ (8002490 <__libc_init_array+0x3c>)
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	2600      	movs	r6, #0
 8002466:	f000 f825 	bl	80024b4 <_init>
 800246a:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <__libc_init_array+0x40>)
 800246c:	4d0a      	ldr	r5, [pc, #40]	@ (8002498 <__libc_init_array+0x44>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	00b3      	lsls	r3, r6, #2
 800247a:	58eb      	ldr	r3, [r5, r3]
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	00b3      	lsls	r3, r6, #2
 8002484:	58eb      	ldr	r3, [r5, r3]
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080025c0 	.word	0x080025c0
 8002490:	080025c0 	.word	0x080025c0
 8002494:	080025c4 	.word	0x080025c4
 8002498:	080025c0 	.word	0x080025c0

0800249c <__retarget_lock_acquire_recursive>:
 800249c:	4770      	bx	lr

0800249e <__retarget_lock_release_recursive>:
 800249e:	4770      	bx	lr

080024a0 <memcpy>:
 80024a0:	2300      	movs	r3, #0
 80024a2:	b510      	push	{r4, lr}
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d100      	bne.n	80024aa <memcpy+0xa>
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	5ccc      	ldrb	r4, [r1, r3]
 80024ac:	54c4      	strb	r4, [r0, r3]
 80024ae:	3301      	adds	r3, #1
 80024b0:	e7f8      	b.n	80024a4 <memcpy+0x4>
	...

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
