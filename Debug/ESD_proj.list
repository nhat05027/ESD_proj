
ESD_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080022f0  080022f0  000032f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a4  080023a4  000033a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a8  080023a8  000033a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080023ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08002408  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002408  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ee4  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c3  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00008030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00008418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f10b  00000000  00000000  000086df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c49  00000000  00000000  000177ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057687  00000000  00000000  0001d433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00074aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ac  00000000  00000000  00074b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00075bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022d8 	.word	0x080022d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080022d8 	.word	0x080022d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	@ 0x2c
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
 8000250:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000252:	2110      	movs	r1, #16
 8000254:	187b      	adds	r3, r7, r1
 8000256:	2244      	movs	r2, #68	@ 0x44
 8000258:	18ba      	adds	r2, r7, r2
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 800025e:	187b      	adds	r3, r7, r1
 8000260:	2240      	movs	r2, #64	@ 0x40
 8000262:	18ba      	adds	r2, r7, r2
 8000264:	8812      	ldrh	r2, [r2, #0]
 8000266:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 8000268:	187b      	adds	r3, r7, r1
 800026a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800026c:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 800026e:	187a      	adds	r2, r7, r1
 8000270:	2338      	movs	r3, #56	@ 0x38
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 8000278:	000c      	movs	r4, r1
 800027a:	193b      	adds	r3, r7, r4
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	68ba      	ldr	r2, [r7, #8]
 800028a:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	f000 f80a 	bl	80002a8 <Lcd_init>

	return lcd;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	193a      	adds	r2, r7, r4
 8000298:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029a:	c313      	stmia	r3!, {r0, r1, r4}
 800029c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029e:	c313      	stmia	r3!, {r0, r1, r4}
}
 80002a0:	68f8      	ldr	r0, [r7, #12]
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b00b      	add	sp, #44	@ 0x2c
 80002a6:	bd90      	pop	{r4, r7, pc}

080002a8 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7d9b      	ldrb	r3, [r3, #22]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d10f      	bne.n	80002d8 <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2133      	movs	r1, #51	@ 0x33
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f894 	bl	80003ea <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2132      	movs	r1, #50	@ 0x32
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 f88f 	bl	80003ea <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2128      	movs	r1, #40	@ 0x28
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 f88a 	bl	80003ea <lcd_write_command>
 80002d6:	e004      	b.n	80002e2 <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2138      	movs	r1, #56	@ 0x38
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 f884 	bl	80003ea <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 f87f 	bl	80003ea <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	210c      	movs	r1, #12
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 f87a 	bl	80003ea <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2106      	movs	r1, #6
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 f875 	bl	80003ea <lcd_write_command>
}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}

08000308 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b087      	sub	sp, #28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	4907      	ldr	r1, [pc, #28]	@ (8000334 <Lcd_int+0x2c>)
 8000316:	240c      	movs	r4, #12
 8000318:	193b      	adds	r3, r7, r4
 800031a:	0018      	movs	r0, r3
 800031c:	f001 fb3e 	bl	800199c <siprintf>

	Lcd_string(lcd, buffer);
 8000320:	193a      	adds	r2, r7, r4
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	0011      	movs	r1, r2
 8000326:	0018      	movs	r0, r3
 8000328:	f000 f806 	bl	8000338 <Lcd_string>
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b007      	add	sp, #28
 8000332:	bd90      	pop	{r4, r7, pc}
 8000334:	080022f0 	.word	0x080022f0

08000338 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000342:	230f      	movs	r3, #15
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e00f      	b.n	800036c <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 800034c:	240f      	movs	r4, #15
 800034e:	193b      	adds	r3, r7, r4
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	18d3      	adds	r3, r2, r3
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f000 f876 	bl	800044e <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000362:	193b      	adds	r3, r7, r4
 8000364:	781a      	ldrb	r2, [r3, #0]
 8000366:	193b      	adds	r3, r7, r4
 8000368:	3201      	adds	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	230f      	movs	r3, #15
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	781c      	ldrb	r4, [r3, #0]
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	0018      	movs	r0, r3
 8000376:	f7ff fec7 	bl	8000108 <strlen>
 800037a:	0003      	movs	r3, r0
 800037c:	429c      	cmp	r4, r3
 800037e:	d3e5      	bcc.n	800034c <Lcd_string+0x14>
	}
}
 8000380:	46c0      	nop			@ (mov r8, r8)
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b005      	add	sp, #20
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	0008      	movs	r0, r1
 8000396:	0011      	movs	r1, r2
 8000398:	1cfb      	adds	r3, r7, #3
 800039a:	1c02      	adds	r2, r0, #0
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	1cbb      	adds	r3, r7, #2
 80003a0:	1c0a      	adds	r2, r1, #0
 80003a2:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80003a4:	1cfb      	adds	r3, r7, #3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4a08      	ldr	r2, [pc, #32]	@ (80003cc <Lcd_cursor+0x40>)
 80003aa:	5cd2      	ldrb	r2, [r2, r3]
 80003ac:	1cbb      	adds	r3, r7, #2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	3b80      	subs	r3, #128	@ 0x80
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	0011      	movs	r1, r2
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 f814 	bl	80003ea <lcd_write_command>
	#endif
}
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	0800230c 	.word	0x0800230c

080003d0 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2101      	movs	r1, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 f804 	bl	80003ea <lcd_write_command>
}
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}

080003ea <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	000a      	movs	r2, r1
 80003f4:	1cfb      	adds	r3, r7, #3
 80003f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6898      	ldr	r0, [r3, #8]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	899b      	ldrh	r3, [r3, #12]
 8000400:	2200      	movs	r2, #0
 8000402:	0019      	movs	r1, r3
 8000404:	f000 fe47 	bl	8001096 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7d9b      	ldrb	r3, [r3, #22]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d113      	bne.n	8000438 <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000410:	1cfb      	adds	r3, r7, #3
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	b2d9      	uxtb	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2204      	movs	r2, #4
 800041c:	0018      	movs	r0, r3
 800041e:	f000 f848 	bl	80004b2 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000422:	1cfb      	adds	r3, r7, #3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	220f      	movs	r2, #15
 8000428:	4013      	ands	r3, r2
 800042a:	b2d9      	uxtb	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2204      	movs	r2, #4
 8000430:	0018      	movs	r0, r3
 8000432:	f000 f83e 	bl	80004b2 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000436:	e006      	b.n	8000446 <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 8000438:	1cfb      	adds	r3, r7, #3
 800043a:	7819      	ldrb	r1, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2208      	movs	r2, #8
 8000440:	0018      	movs	r0, r3
 8000442:	f000 f836 	bl	80004b2 <lcd_write>
}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}

0800044e <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	000a      	movs	r2, r1
 8000458:	1cfb      	adds	r3, r7, #3
 800045a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6898      	ldr	r0, [r3, #8]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	899b      	ldrh	r3, [r3, #12]
 8000464:	2201      	movs	r2, #1
 8000466:	0019      	movs	r1, r3
 8000468:	f000 fe15 	bl	8001096 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7d9b      	ldrb	r3, [r3, #22]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d113      	bne.n	800049c <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000474:	1cfb      	adds	r3, r7, #3
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	b2d9      	uxtb	r1, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2204      	movs	r2, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f000 f816 	bl	80004b2 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	220f      	movs	r2, #15
 800048c:	4013      	ands	r3, r2
 800048e:	b2d9      	uxtb	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2204      	movs	r2, #4
 8000494:	0018      	movs	r0, r3
 8000496:	f000 f80c 	bl	80004b2 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800049a:	e006      	b.n	80004aa <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 800049c:	1cfb      	adds	r3, r7, #3
 800049e:	7819      	ldrb	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2208      	movs	r2, #8
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 f804 	bl	80004b2 <lcd_write>
}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b2:	b590      	push	{r4, r7, lr}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	0008      	movs	r0, r1
 80004bc:	0011      	movs	r1, r2
 80004be:	1cfb      	adds	r3, r7, #3
 80004c0:	1c02      	adds	r2, r0, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	1cbb      	adds	r3, r7, #2
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 80004ca:	230f      	movs	r3, #15
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	e020      	b.n	8000516 <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	240f      	movs	r4, #15
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	18d3      	adds	r3, r2, r3
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	18d3      	adds	r3, r2, r3
 80004f0:	8819      	ldrh	r1, [r3, #0]
 80004f2:	1cfb      	adds	r3, r7, #3
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	411a      	asrs	r2, r3
 80004fc:	0013      	movs	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	4013      	ands	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	001a      	movs	r2, r3
 8000508:	f000 fdc5 	bl	8001096 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800050c:	193b      	adds	r3, r7, r4
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	193b      	adds	r3, r7, r4
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	230f      	movs	r3, #15
 8000518:	18fa      	adds	r2, r7, r3
 800051a:	1cbb      	adds	r3, r7, #2
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3d7      	bcc.n	80004d4 <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6918      	ldr	r0, [r3, #16]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8a9b      	ldrh	r3, [r3, #20]
 800052c:	2201      	movs	r2, #1
 800052e:	0019      	movs	r1, r3
 8000530:	f000 fdb1 	bl	8001096 <HAL_GPIO_WritePin>
	DELAY(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fb49 	bl	8000bcc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6918      	ldr	r0, [r3, #16]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	8a9b      	ldrh	r3, [r3, #20]
 8000542:	2200      	movs	r2, #0
 8000544:	0019      	movs	r1, r3
 8000546:	f000 fda6 	bl	8001096 <HAL_GPIO_WritePin>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b005      	add	sp, #20
 8000550:	bd90      	pop	{r4, r7, pc}
	...

08000554 <selectRow>:
};
uint8_t key_current=0;
uint8_t key_prev=0;

void selectRow(uint8_t row)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	0002      	movs	r2, r0
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	701a      	strb	r2, [r3, #0]
	switch (row){
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b07      	cmp	r3, #7
 8000566:	d900      	bls.n	800056a <selectRow+0x16>
 8000568:	e0ac      	b.n	80006c4 <selectRow+0x170>
 800056a:	009a      	lsls	r2, r3, #2
 800056c:	4b57      	ldr	r3, [pc, #348]	@ (80006cc <selectRow+0x178>)
 800056e:	18d3      	adds	r3, r2, r3
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	469f      	mov	pc, r3
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000574:	4b56      	ldr	r3, [pc, #344]	@ (80006d0 <selectRow+0x17c>)
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fd8b 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000580:	2390      	movs	r3, #144	@ 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fd84 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800058e:	2390      	movs	r3, #144	@ 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	@ 0x40
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fd7d 	bl	8001096 <HAL_GPIO_WritePin>
	break;
 800059c:	e092      	b.n	80006c4 <selectRow+0x170>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800059e:	4b4c      	ldr	r3, [pc, #304]	@ (80006d0 <selectRow+0x17c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fd76 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80005aa:	2390      	movs	r3, #144	@ 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fd6f 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80005b8:	2390      	movs	r3, #144	@ 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	@ 0x40
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fd68 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 80005c6:	e07d      	b.n	80006c4 <selectRow+0x170>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80005c8:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <selectRow+0x17c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fd61 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80005d4:	2390      	movs	r3, #144	@ 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fd5a 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80005e2:	2390      	movs	r3, #144	@ 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2201      	movs	r2, #1
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fd53 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 80005f0:	e068      	b.n	80006c4 <selectRow+0x170>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80005f2:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <selectRow+0x17c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fd4c 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80005fe:	2390      	movs	r3, #144	@ 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fd45 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800060c:	2390      	movs	r3, #144	@ 0x90
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	2201      	movs	r2, #1
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fd3e 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 800061a:	e053      	b.n	80006c4 <selectRow+0x170>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <selectRow+0x17c>)
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fd37 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000628:	2390      	movs	r3, #144	@ 0x90
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fd30 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000636:	2390      	movs	r3, #144	@ 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2200      	movs	r2, #0
 800063c:	2140      	movs	r1, #64	@ 0x40
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fd29 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 8000644:	e03e      	b.n	80006c4 <selectRow+0x170>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <selectRow+0x17c>)
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fd22 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000652:	2390      	movs	r3, #144	@ 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2201      	movs	r2, #1
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fd1b 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000660:	2390      	movs	r3, #144	@ 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2200      	movs	r2, #0
 8000666:	2140      	movs	r1, #64	@ 0x40
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fd14 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 800066e:	e029      	b.n	80006c4 <selectRow+0x170>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <selectRow+0x17c>)
 8000672:	2201      	movs	r2, #1
 8000674:	2102      	movs	r1, #2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fd0d 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800067c:	2390      	movs	r3, #144	@ 0x90
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2200      	movs	r2, #0
 8000682:	2180      	movs	r1, #128	@ 0x80
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fd06 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800068a:	2390      	movs	r3, #144	@ 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2201      	movs	r2, #1
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fcff 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 8000698:	e014      	b.n	80006c4 <selectRow+0x170>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <selectRow+0x17c>)
 800069c:	2201      	movs	r2, #1
 800069e:	2102      	movs	r1, #2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fcf8 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80006a6:	2390      	movs	r3, #144	@ 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2201      	movs	r2, #1
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fcf1 	bl	8001096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80006b4:	2390      	movs	r3, #144	@ 0x90
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fcea 	bl	8001096 <HAL_GPIO_WritePin>
		break;
 80006c2:	46c0      	nop			@ (mov r8, r8)
	}
};
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08002320 	.word	0x08002320
 80006d0:	48000400 	.word	0x48000400

080006d4 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	for (row=0 ; row<8 ; row ++)
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <Keypad_Getkey+0x80>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e030      	b.n	8000742 <Keypad_Getkey+0x6e>
	{
		selectRow(row);
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <Keypad_Getkey+0x80>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff35 	bl	8000554 <selectRow>
		HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fa6e 	bl	8000bcc <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	00da      	lsls	r2, r3, #3
 80006f4:	2390      	movs	r3, #144	@ 0x90
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fcae 	bl	800105c <HAL_GPIO_ReadPin>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d106      	bne.n	8000712 <Keypad_Getkey+0x3e>
			{
				return key_code[row][0];
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <Keypad_Getkey+0x80>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <Keypad_Getkey+0x84>)
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	e01c      	b.n	800074c <Keypad_Getkey+0x78>
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	009a      	lsls	r2, r3, #2
 8000716:	2390      	movs	r3, #144	@ 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fc9d 	bl	800105c <HAL_GPIO_ReadPin>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d107      	bne.n	8000736 <Keypad_Getkey+0x62>
				return key_code[row][1];
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <Keypad_Getkey+0x80>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <Keypad_Getkey+0x84>)
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	18d3      	adds	r3, r2, r3
 8000730:	3301      	adds	r3, #1
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	e00a      	b.n	800074c <Keypad_Getkey+0x78>
	for (row=0 ; row<8 ; row ++)
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <Keypad_Getkey+0x80>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <Keypad_Getkey+0x80>)
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <Keypad_Getkey+0x80>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b07      	cmp	r3, #7
 8000748:	d9ca      	bls.n	80006e0 <Keypad_Getkey+0xc>
	}
	return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	2000007a 	.word	0x2000007a
 8000758:	08002310 	.word	0x08002310

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	b097      	sub	sp, #92	@ 0x5c
 8000760:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 f9cf 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f855 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f89d 	bl	80008a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 800076e:	2638      	movs	r6, #56	@ 0x38
 8000770:	19bb      	adds	r3, r7, r6
 8000772:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <main+0xa8>)
 8000774:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000776:	c313      	stmia	r3!, {r0, r1, r4}
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	601a      	str	r2, [r3, #0]
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 800077c:	2330      	movs	r3, #48	@ 0x30
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <main+0xac>)
 8000782:	ca03      	ldmia	r2!, {r0, r1}
 8000784:	c303      	stmia	r3!, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8000786:	2218      	movs	r2, #24
 8000788:	18bd      	adds	r5, r7, r2
 800078a:	0038      	movs	r0, r7
 800078c:	2390      	movs	r3, #144	@ 0x90
 800078e:	05dc      	lsls	r4, r3, #23
 8000790:	2330      	movs	r3, #48	@ 0x30
 8000792:	18fa      	adds	r2, r7, r3
 8000794:	19b9      	adds	r1, r7, r6
 8000796:	2300      	movs	r3, #0
 8000798:	9303      	str	r3, [sp, #12]
 800079a:	2302      	movs	r3, #2
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2390      	movs	r3, #144	@ 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	0023      	movs	r3, r4
 80007aa:	f7ff fd4b 	bl	8000244 <Lcd_create>
 80007ae:	003a      	movs	r2, r7
 80007b0:	002b      	movs	r3, r5
 80007b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b4:	c313      	stmia	r3!, {r0, r1, r4}
 80007b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b8:	c313      	stmia	r3!, {r0, r1, r4}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  key_current = Keypad_Getkey();
 80007ba:	f7ff ff8b 	bl	80006d4 <Keypad_Getkey>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <main+0xb0>)
 80007c4:	701a      	strb	r2, [r3, #0]
	  if(key_current != key_prev) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <main+0xb0>)
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <main+0xb4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d0f3      	beq.n	80007ba <main+0x5e>
		  Lcd_clear(&lcd);
 80007d2:	2418      	movs	r4, #24
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff fdfa 	bl	80003d0 <Lcd_clear>
		  Lcd_cursor(&lcd, 0,0);
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fdd2 	bl	800038c <Lcd_cursor>
		  Lcd_int(&lcd, key_current);
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <main+0xb0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fd88 	bl	8000308 <Lcd_int>
		  key_prev = key_current;
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <main+0xb0>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <main+0xb4>)
 80007fe:	701a      	strb	r2, [r3, #0]
	  key_current = Keypad_Getkey();
 8000800:	e7db      	b.n	80007ba <main+0x5e>
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	080022f4 	.word	0x080022f4
 8000808:	08002304 	.word	0x08002304
 800080c:	20000078 	.word	0x20000078
 8000810:	20000079 	.word	0x20000079

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b091      	sub	sp, #68	@ 0x44
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	2410      	movs	r4, #16
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2330      	movs	r3, #48	@ 0x30
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f001 f8d9 	bl	80019dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f001 f8d2 	bl	80019dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	0252      	lsls	r2, r2, #9
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	187b      	adds	r3, r7, r1
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fc34 	bl	80010d0 <HAL_RCC_OscConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800086c:	f000 f89e 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	003b      	movs	r3, r7
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	003b      	movs	r3, r7
 8000878:	2202      	movs	r2, #2
 800087a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	003b      	movs	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000888:	003b      	movs	r3, r7
 800088a:	2100      	movs	r1, #0
 800088c:	0018      	movs	r0, r3
 800088e:	f000 ff39 	bl	8001704 <HAL_RCC_ClockConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000896:	f000 f889 	bl	80009ac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800089a:	f001 f801 	bl	80018a0 <HAL_RCC_EnableCSS>
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b011      	add	sp, #68	@ 0x44
 80008a4:	bd90      	pop	{r4, r7, pc}
	...

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	@ 0x24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f001 f88f 	bl	80019dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b38      	ldr	r3, [pc, #224]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	03c9      	lsls	r1, r1, #15
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	4b35      	ldr	r3, [pc, #212]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	03db      	lsls	r3, r3, #15
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	4b31      	ldr	r3, [pc, #196]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	0289      	lsls	r1, r1, #10
 80008e4:	430a      	orrs	r2, r1
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	029b      	lsls	r3, r3, #10
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	02c9      	lsls	r1, r1, #11
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	02db      	lsls	r3, r3, #11
 800090c:	4013      	ands	r3, r2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000912:	2390      	movs	r3, #144	@ 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2200      	movs	r2, #0
 8000918:	21ff      	movs	r1, #255	@ 0xff
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fbbb 	bl	8001096 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_GPIO_Init+0x100>)
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fbb5 	bl	8001096 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 800092c:	193b      	adds	r3, r7, r4
 800092e:	22ff      	movs	r2, #255	@ 0xff
 8000930:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	193a      	adds	r2, r7, r4
 8000946:	2390      	movs	r3, #144	@ 0x90
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fa15 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : R0_Pin */
  GPIO_InitStruct.Pin = R0_Pin;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 800096a:	193b      	adds	r3, r7, r4
 800096c:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <MX_GPIO_Init+0x100>)
 800096e:	0019      	movs	r1, r3
 8000970:	0010      	movs	r0, r2
 8000972:	f000 fa03 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	22c0      	movs	r2, #192	@ 0xc0
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2201      	movs	r2, #1
 800098a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	187a      	adds	r2, r7, r1
 800098e:	2390      	movs	r3, #144	@ 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f9f1 	bl	8000d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b009      	add	sp, #36	@ 0x24
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_MspInit+0x44>)
 80009c0:	699a      	ldr	r2, [r3, #24]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_MspInit+0x44>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <HAL_MspInit+0x44>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x44>)
 80009d8:	69da      	ldr	r2, [r3, #28]
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_MspInit+0x44>)
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	0549      	lsls	r1, r1, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	61da      	str	r2, [r3, #28]
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_MspInit+0x44>)
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a04:	f000 ffb0 	bl	8001968 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x8>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8b2 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	18d3      	adds	r3, r2, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f000 ffc0 	bl	80019ec <__errno>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	425b      	negs	r3, r3
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	18d2      	adds	r2, r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <_sbrk+0x64>)
 8000a88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b006      	add	sp, #24
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20001000 	.word	0x20001000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	2000007c 	.word	0x2000007c
 8000aa0:	200001d0 	.word	0x200001d0

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff fff6 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f000 ff8b 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fe3b 	bl	800075c <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af4:	080023ac 	.word	0x080023ac
  ldr r2, =_sbss
 8000af8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000afc:	200001cc 	.word	0x200001cc

08000b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_IRQHandler>
	...

08000b04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_Init+0x24>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_Init+0x24>)
 8000b0e:	2110      	movs	r1, #16
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f809 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1a:	f7ff ff4d 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b36:	681c      	ldr	r4, [r3, #0]
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_InitTick+0x60>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	23fa      	movs	r3, #250	@ 0xfa
 8000b40:	0098      	lsls	r0, r3, #2
 8000b42:	f7ff faf3 	bl	800012c <__udivsi3>
 8000b46:	0003      	movs	r3, r0
 8000b48:	0019      	movs	r1, r3
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f7ff faee 	bl	800012c <__udivsi3>
 8000b50:	0003      	movs	r3, r0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f905 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e00f      	b.n	8000b80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d80b      	bhi.n	8000b7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 f8e2 	bl	8000d38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_InitTick+0x64>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b003      	add	sp, #12
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	18d2      	adds	r2, r2, r3
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000080 	.word	0x20000080

08000bb8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	@ (8000bc8 <HAL_GetTick+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	20000080 	.word	0x20000080

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff fff0 	bl	8000bb8 <HAL_GetTick>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3301      	adds	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001a      	movs	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	189b      	adds	r3, r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	f7ff ffe0 	bl	8000bb8 <HAL_GetTick>
 8000bf8:	0002      	movs	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c28:	d828      	bhi.n	8000c7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce8 <__NVIC_SetPriority+0xd4>)
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	33c0      	adds	r3, #192	@ 0xc0
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	589b      	ldr	r3, [r3, r2]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	@ 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	@ 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	481f      	ldr	r0, [pc, #124]	@ (8000ce8 <__NVIC_SetPriority+0xd4>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	430a      	orrs	r2, r1
 8000c74:	33c0      	adds	r3, #192	@ 0xc0
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c7a:	e031      	b.n	8000ce0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cec <__NVIC_SetPriority+0xd8>)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0019      	movs	r1, r3
 8000c84:	230f      	movs	r3, #15
 8000c86:	400b      	ands	r3, r1
 8000c88:	3b08      	subs	r3, #8
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3306      	adds	r3, #6
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	3304      	adds	r3, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1dfa      	adds	r2, r7, #7
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	00d2      	lsls	r2, r2, #3
 8000ca2:	21ff      	movs	r1, #255	@ 0xff
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	22ff      	movs	r2, #255	@ 0xff
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4003      	ands	r3, r0
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <__NVIC_SetPriority+0xd8>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	001c      	movs	r4, r3
 8000ccc:	230f      	movs	r3, #15
 8000cce:	4023      	ands	r3, r4
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	3306      	adds	r3, #6
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	18c3      	adds	r3, r0, r3
 8000cdc:	3304      	adds	r3, #4
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b003      	add	sp, #12
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	1e5a      	subs	r2, r3, #1
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	045b      	lsls	r3, r3, #17
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d301      	bcc.n	8000d08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d04:	2301      	movs	r3, #1
 8000d06:	e010      	b.n	8000d2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <SysTick_Config+0x44>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d10:	2301      	movs	r3, #1
 8000d12:	425b      	negs	r3, r3
 8000d14:	2103      	movs	r1, #3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff7c 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x44>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x44>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	210f      	movs	r1, #15
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	1c02      	adds	r2, r0, #0
 8000d48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffbf 	bl	8000cf0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e14f      	b.n	800102c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x28>
 8000da2:	e140      	b.n	8001026 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	58d3      	ldr	r3, [r2, r3]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2207      	movs	r2, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2107      	movs	r1, #7
 8000e92:	400b      	ands	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	23c0      	movs	r3, #192	@ 0xc0
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x174>
 8000eee:	e09a      	b.n	8001026 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <HAL_GPIO_Init+0x2c8>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	4b53      	ldr	r3, [pc, #332]	@ (8001044 <HAL_GPIO_Init+0x2c8>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b51      	ldr	r3, [pc, #324]	@ (8001044 <HAL_GPIO_Init+0x2c8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x2cc>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	589b      	ldr	r3, [r3, r2]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	2390      	movs	r3, #144	@ 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a44      	ldr	r2, [pc, #272]	@ (800104c <HAL_GPIO_Init+0x2d0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x1de>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a43      	ldr	r2, [pc, #268]	@ (8001050 <HAL_GPIO_Init+0x2d4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x1da>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a42      	ldr	r2, [pc, #264]	@ (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x1d6>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	2103      	movs	r1, #3
 8000f64:	400a      	ands	r2, r1
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	@ (8001048 <HAL_GPIO_Init+0x2cc>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	035b      	lsls	r3, r3, #13
 8000f96:	4013      	ands	r3, r2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	039b      	lsls	r3, r3, #14
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <HAL_GPIO_Init+0x2dc>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	40da      	lsrs	r2, r3
 8001034:	1e13      	subs	r3, r2, #0
 8001036:	d000      	beq.n	800103a <HAL_GPIO_Init+0x2be>
 8001038:	e6a8      	b.n	8000d8c <HAL_GPIO_Init+0x10>
  } 
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b006      	add	sp, #24
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800
 8001054:	48000c00 	.word	0x48000c00
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	1cba      	adds	r2, r7, #2
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	4013      	ands	r3, r2
 8001074:	d004      	beq.n	8001080 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e003      	b.n	8001088 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
  }
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	0008      	movs	r0, r1
 80010a0:	0011      	movs	r1, r2
 80010a2:	1cbb      	adds	r3, r7, #2
 80010a4:	1c02      	adds	r2, r0, #0
 80010a6:	801a      	strh	r2, [r3, #0]
 80010a8:	1c7b      	adds	r3, r7, #1
 80010aa:	1c0a      	adds	r2, r1, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ae:	1c7b      	adds	r3, r7, #1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d004      	beq.n	80010c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e301      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x1e>
 80010ec:	e08d      	b.n	800120a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ee:	4bc3      	ldr	r3, [pc, #780]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	220c      	movs	r2, #12
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d00e      	beq.n	8001118 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fa:	4bc0      	ldr	r3, [pc, #768]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	220c      	movs	r2, #12
 8001100:	4013      	ands	r3, r2
 8001102:	2b08      	cmp	r3, #8
 8001104:	d116      	bne.n	8001134 <HAL_RCC_OscConfig+0x64>
 8001106:	4bbd      	ldr	r3, [pc, #756]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	401a      	ands	r2, r3
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	429a      	cmp	r2, r3
 8001116:	d10d      	bne.n	8001134 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4bb8      	ldr	r3, [pc, #736]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	029b      	lsls	r3, r3, #10
 8001120:	4013      	ands	r3, r2
 8001122:	d100      	bne.n	8001126 <HAL_RCC_OscConfig+0x56>
 8001124:	e070      	b.n	8001208 <HAL_RCC_OscConfig+0x138>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d000      	beq.n	8001130 <HAL_RCC_OscConfig+0x60>
 800112e:	e06b      	b.n	8001208 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e2d8      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d107      	bne.n	800114c <HAL_RCC_OscConfig+0x7c>
 800113c:	4baf      	ldr	r3, [pc, #700]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4bae      	ldr	r3, [pc, #696]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001142:	2180      	movs	r1, #128	@ 0x80
 8001144:	0249      	lsls	r1, r1, #9
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e02f      	b.n	80011ac <HAL_RCC_OscConfig+0xdc>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <HAL_RCC_OscConfig+0x9e>
 8001154:	4ba9      	ldr	r3, [pc, #676]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4ba8      	ldr	r3, [pc, #672]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800115a:	49a9      	ldr	r1, [pc, #676]	@ (8001400 <HAL_RCC_OscConfig+0x330>)
 800115c:	400a      	ands	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	4ba6      	ldr	r3, [pc, #664]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4ba5      	ldr	r3, [pc, #660]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001166:	49a7      	ldr	r1, [pc, #668]	@ (8001404 <HAL_RCC_OscConfig+0x334>)
 8001168:	400a      	ands	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e01e      	b.n	80011ac <HAL_RCC_OscConfig+0xdc>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d10e      	bne.n	8001194 <HAL_RCC_OscConfig+0xc4>
 8001176:	4ba1      	ldr	r3, [pc, #644]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4ba0      	ldr	r3, [pc, #640]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	02c9      	lsls	r1, r1, #11
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	4b9d      	ldr	r3, [pc, #628]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b9c      	ldr	r3, [pc, #624]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800118a:	2180      	movs	r1, #128	@ 0x80
 800118c:	0249      	lsls	r1, r1, #9
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xdc>
 8001194:	4b99      	ldr	r3, [pc, #612]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b98      	ldr	r3, [pc, #608]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800119a:	4999      	ldr	r1, [pc, #612]	@ (8001400 <HAL_RCC_OscConfig+0x330>)
 800119c:	400a      	ands	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	4b96      	ldr	r3, [pc, #600]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b95      	ldr	r3, [pc, #596]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011a6:	4997      	ldr	r1, [pc, #604]	@ (8001404 <HAL_RCC_OscConfig+0x334>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d014      	beq.n	80011de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fd00 	bl	8000bb8 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011be:	f7ff fcfb 	bl	8000bb8 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b64      	cmp	r3, #100	@ 0x64
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e28a      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	4b8a      	ldr	r3, [pc, #552]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0xee>
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fceb 	bl	8000bb8 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fce6 	bl	8000bb8 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e275      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b80      	ldr	r3, [pc, #512]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	@ 0x80
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x118>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x146>
 8001214:	e069      	b.n	80012ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001216:	4b79      	ldr	r3, [pc, #484]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	220c      	movs	r2, #12
 800121c:	4013      	ands	r3, r2
 800121e:	d00b      	beq.n	8001238 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001220:	4b76      	ldr	r3, [pc, #472]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	4013      	ands	r3, r2
 8001228:	2b08      	cmp	r3, #8
 800122a:	d11c      	bne.n	8001266 <HAL_RCC_OscConfig+0x196>
 800122c:	4b73      	ldr	r3, [pc, #460]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	4013      	ands	r3, r2
 8001236:	d116      	bne.n	8001266 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001238:	4b70      	ldr	r3, [pc, #448]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2202      	movs	r2, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x17e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e24b      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b6b      	ldr	r3, [pc, #428]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	22f8      	movs	r2, #248	@ 0xf8
 8001254:	4393      	bics	r3, r2
 8001256:	0019      	movs	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00da      	lsls	r2, r3, #3
 800125e:	4b67      	ldr	r3, [pc, #412]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001264:	e041      	b.n	80012ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d024      	beq.n	80012b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126e:	4b63      	ldr	r3, [pc, #396]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fc9d 	bl	8000bb8 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fc98 	bl	8000bb8 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e227      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b59      	ldr	r3, [pc, #356]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f1      	beq.n	8001284 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	22f8      	movs	r2, #248	@ 0xf8
 80012a6:	4393      	bics	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00da      	lsls	r2, r3, #3
 80012b0:	4b52      	ldr	r3, [pc, #328]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b8:	4b50      	ldr	r3, [pc, #320]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b4f      	ldr	r3, [pc, #316]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc78 	bl	8000bb8 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc73 	bl	8000bb8 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e202      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e0:	4b46      	ldr	r3, [pc, #280]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f1      	bne.n	80012ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2208      	movs	r2, #8
 80012f0:	4013      	ands	r3, r2
 80012f2:	d036      	beq.n	8001362 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d019      	beq.n	8001330 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001300:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff fc56 	bl	8000bb8 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fc51 	bl	8000bb8 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1e0      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x242>
 800132e:	e018      	b.n	8001362 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001336:	2101      	movs	r1, #1
 8001338:	438a      	bics	r2, r1
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fc3c 	bl	8000bb8 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fc37 	bl	8000bb8 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1c6      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	2202      	movs	r2, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d1f1      	bne.n	8001346 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2204      	movs	r2, #4
 8001368:	4013      	ands	r3, r2
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x29e>
 800136c:	e0b4      	b.n	80014d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	201f      	movs	r0, #31
 8001370:	183b      	adds	r3, r7, r0
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001378:	69da      	ldr	r2, [r3, #28]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	055b      	lsls	r3, r3, #21
 800137e:	4013      	ands	r3, r2
 8001380:	d110      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0549      	lsls	r1, r1, #21
 800138c:	430a      	orrs	r2, r1
 800138e:	61da      	str	r2, [r3, #28]
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	055b      	lsls	r3, r3, #21
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	d11a      	bne.n	80013e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_RCC_OscConfig+0x338>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	0049      	lsls	r1, r1, #1
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fbfb 	bl	8000bb8 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c8:	f7ff fbf6 	bl	8000bb8 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e185      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_RCC_OscConfig+0x338>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10e      	bne.n	800140c <HAL_RCC_OscConfig+0x33c>
 80013ee:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <HAL_RCC_OscConfig+0x32c>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	621a      	str	r2, [r3, #32]
 80013fa:	e035      	b.n	8001468 <HAL_RCC_OscConfig+0x398>
 80013fc:	40021000 	.word	0x40021000
 8001400:	fffeffff 	.word	0xfffeffff
 8001404:	fffbffff 	.word	0xfffbffff
 8001408:	40007000 	.word	0x40007000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x35e>
 8001414:	4bb6      	ldr	r3, [pc, #728]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4bb5      	ldr	r3, [pc, #724]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	4bb3      	ldr	r3, [pc, #716]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bb2      	ldr	r3, [pc, #712]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001426:	2104      	movs	r1, #4
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x398>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x380>
 8001436:	4bae      	ldr	r3, [pc, #696]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	4bad      	ldr	r3, [pc, #692]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800143c:	2104      	movs	r1, #4
 800143e:	430a      	orrs	r2, r1
 8001440:	621a      	str	r2, [r3, #32]
 8001442:	4bab      	ldr	r3, [pc, #684]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4baa      	ldr	r3, [pc, #680]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x398>
 8001450:	4ba7      	ldr	r3, [pc, #668]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	4ba6      	ldr	r3, [pc, #664]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001456:	2101      	movs	r1, #1
 8001458:	438a      	bics	r2, r1
 800145a:	621a      	str	r2, [r3, #32]
 800145c:	4ba4      	ldr	r3, [pc, #656]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	4ba3      	ldr	r3, [pc, #652]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001462:	2104      	movs	r1, #4
 8001464:	438a      	bics	r2, r1
 8001466:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d014      	beq.n	800149a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fba2 	bl	8000bb8 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e009      	b.n	800148e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fb9d 	bl	8000bb8 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	4a9b      	ldr	r2, [pc, #620]	@ (80016f4 <HAL_RCC_OscConfig+0x624>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e12b      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	4b98      	ldr	r3, [pc, #608]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x3aa>
 8001498:	e013      	b.n	80014c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fb8d 	bl	8000bb8 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	e009      	b.n	80014b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb88 	bl	8000bb8 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4a91      	ldr	r2, [pc, #580]	@ (80016f4 <HAL_RCC_OscConfig+0x624>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e116      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	4b8d      	ldr	r3, [pc, #564]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c2:	231f      	movs	r3, #31
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b88      	ldr	r3, [pc, #544]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	4b87      	ldr	r3, [pc, #540]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014d2:	4989      	ldr	r1, [pc, #548]	@ (80016f8 <HAL_RCC_OscConfig+0x628>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2210      	movs	r2, #16
 80014de:	4013      	ands	r3, r2
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d12a      	bne.n	8001540 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ea:	4b81      	ldr	r3, [pc, #516]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014f0:	2104      	movs	r1, #4
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014f6:	4b7e      	ldr	r3, [pc, #504]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fa:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb59 	bl	8000bb8 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150c:	f7ff fb54 	bl	8000bb8 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0e3      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800151e:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d0f1      	beq.n	800150c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001528:	4b71      	ldr	r3, [pc, #452]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800152a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152c:	22f8      	movs	r2, #248	@ 0xf8
 800152e:	4393      	bics	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	4b6d      	ldr	r3, [pc, #436]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800153a:	430a      	orrs	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	@ 0x34
 800153e:	e034      	b.n	80015aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	3305      	adds	r3, #5
 8001546:	d111      	bne.n	800156c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001548:	4b69      	ldr	r3, [pc, #420]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800154c:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800154e:	2104      	movs	r1, #4
 8001550:	438a      	bics	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001554:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001558:	22f8      	movs	r2, #248	@ 0xf8
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	00da      	lsls	r2, r3, #3
 8001564:	4b62      	ldr	r3, [pc, #392]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
 800156a:	e01e      	b.n	80015aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800156c:	4b60      	ldr	r3, [pc, #384]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800156e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001570:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001572:	2104      	movs	r1, #4
 8001574:	430a      	orrs	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001578:	4b5d      	ldr	r3, [pc, #372]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800157c:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fb18 	bl	8000bb8 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800158e:	f7ff fb13 	bl	8000bb8 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0a2      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80015a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f1      	bne.n	800158e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4e4>
 80015b2:	e097      	b.n	80016e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	220c      	movs	r2, #12
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4f2>
 80015c0:	e06b      	b.n	800169a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d14c      	bne.n	8001664 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80015d0:	494a      	ldr	r1, [pc, #296]	@ (80016fc <HAL_RCC_OscConfig+0x62c>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff faef 	bl	8000bb8 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff faea 	bl	8000bb8 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e079      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	4b3f      	ldr	r3, [pc, #252]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	049b      	lsls	r3, r3, #18
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	220f      	movs	r2, #15
 8001604:	4393      	bics	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800160e:	430a      	orrs	r2, r1
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a3a      	ldr	r2, [pc, #232]	@ (8001700 <HAL_RCC_OscConfig+0x630>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	431a      	orrs	r2, r3
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001632:	2180      	movs	r1, #128	@ 0x80
 8001634:	0449      	lsls	r1, r1, #17
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fabd 	bl	8000bb8 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fab8 	bl	8000bb8 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e047      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	049b      	lsls	r3, r3, #18
 800165e:	4013      	ands	r3, r2
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x574>
 8001662:	e03f      	b.n	80016e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001664:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800166a:	4924      	ldr	r1, [pc, #144]	@ (80016fc <HAL_RCC_OscConfig+0x62c>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff faa2 	bl	8000bb8 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fa9d 	bl	8000bb8 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e02c      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	049b      	lsls	r3, r3, #18
 8001694:	4013      	ands	r3, r2
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x5aa>
 8001698:	e024      	b.n	80016e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e01f      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0x620>)
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	220f      	movs	r2, #15
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	23f0      	movs	r3, #240	@ 0xf0
 80016d4:	039b      	lsls	r3, r3, #14
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b008      	add	sp, #32
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	00001388 	.word	0x00001388
 80016f8:	efffffff 	.word	0xefffffff
 80016fc:	feffffff 	.word	0xfeffffff
 8001700:	ffc2ffff 	.word	0xffc2ffff

08001704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b3      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b5b      	ldr	r3, [pc, #364]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d911      	bls.n	800174a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b55      	ldr	r3, [pc, #340]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001738:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e09a      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d015      	beq.n	8001780 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d006      	beq.n	800176c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800175e:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 8001764:	21e0      	movs	r1, #224	@ 0xe0
 8001766:	00c9      	lsls	r1, r1, #3
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	22f0      	movs	r2, #240	@ 0xf0
 8001772:	4393      	bics	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	4b44      	ldr	r3, [pc, #272]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d040      	beq.n	800180c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	@ 0x80
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	4013      	ands	r3, r2
 800179c:	d114      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06e      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b38      	ldr	r3, [pc, #224]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e062      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e05b      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	4393      	bics	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff f9ec 	bl	8000bb8 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e4:	e009      	b.n	80017fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e6:	f7ff f9e7 	bl	8000bb8 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <HAL_RCC_ClockConfig+0x18c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e042      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	220c      	movs	r2, #12
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1ec      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d211      	bcs.n	800183e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4393      	bics	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <HAL_RCC_ClockConfig+0x184>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e020      	b.n	8001880 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2204      	movs	r2, #4
 8001844:	4013      	ands	r3, r2
 8001846:	d009      	beq.n	800185c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <HAL_RCC_ClockConfig+0x190>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800185c:	f000 f82e 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001860:	0001      	movs	r1, r0
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RCC_ClockConfig+0x188>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	220f      	movs	r2, #15
 800186a:	4013      	ands	r3, r2
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_RCC_ClockConfig+0x194>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	000a      	movs	r2, r1
 8001872:	40da      	lsrs	r2, r3
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x198>)
 8001876:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001878:	2003      	movs	r0, #3
 800187a:	f7ff f957 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40022000 	.word	0x40022000
 800188c:	40021000 	.word	0x40021000
 8001890:	00001388 	.word	0x00001388
 8001894:	fffff8ff 	.word	0xfffff8ff
 8001898:	08002340 	.word	0x08002340
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_RCC_EnableCSS+0x18>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_RCC_EnableCSS+0x18>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	0309      	lsls	r1, r1, #12
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	220c      	movs	r2, #12
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x30>
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x36>
 80018ea:	e02c      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ee:	613b      	str	r3, [r7, #16]
      break;
 80018f0:	e02c      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	220f      	movs	r2, #15
 80018f8:	4013      	ands	r3, r2
 80018fa:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	220f      	movs	r2, #15
 8001906:	4013      	ands	r3, r2
 8001908:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xa8>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	4013      	ands	r3, r2
 8001916:	d009      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	4810      	ldr	r0, [pc, #64]	@ (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 800191c:	f7fe fc06 	bl	800012c <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	001a      	movs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4353      	muls	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	000a      	movs	r2, r1
 8001930:	0152      	lsls	r2, r2, #5
 8001932:	1a52      	subs	r2, r2, r1
 8001934:	0193      	lsls	r3, r2, #6
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	185b      	adds	r3, r3, r1
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
      break;
 8001944:	e002      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001948:	613b      	str	r3, [r7, #16]
      break;
 800194a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800194c:	693b      	ldr	r3, [r7, #16]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	40021000 	.word	0x40021000
 800195c:	007a1200 	.word	0x007a1200
 8001960:	08002350 	.word	0x08002350
 8001964:	08002360 	.word	0x08002360

08001968 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_NMI_IRQHandler+0x20>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2280      	movs	r2, #128	@ 0x80
 8001972:	4013      	ands	r3, r2
 8001974:	2b80      	cmp	r3, #128	@ 0x80
 8001976:	d104      	bne.n	8001982 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001978:	f000 f80a 	bl	8001990 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_RCC_NMI_IRQHandler+0x24>)
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	701a      	strb	r2, [r3, #0]
  }
}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	4002100a 	.word	0x4002100a

08001990 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <siprintf>:
 800199c:	b40e      	push	{r1, r2, r3}
 800199e:	b500      	push	{lr}
 80019a0:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <siprintf+0x34>)
 80019a2:	b09c      	sub	sp, #112	@ 0x70
 80019a4:	ab1d      	add	r3, sp, #116	@ 0x74
 80019a6:	9002      	str	r0, [sp, #8]
 80019a8:	9006      	str	r0, [sp, #24]
 80019aa:	9107      	str	r1, [sp, #28]
 80019ac:	9104      	str	r1, [sp, #16]
 80019ae:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <siprintf+0x38>)
 80019b0:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <siprintf+0x3c>)
 80019b2:	cb04      	ldmia	r3!, {r2}
 80019b4:	9105      	str	r1, [sp, #20]
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	a902      	add	r1, sp, #8
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	f000 f99e 	bl	8001cfc <_svfiprintf_r>
 80019c0:	2200      	movs	r2, #0
 80019c2:	9b02      	ldr	r3, [sp, #8]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	b01c      	add	sp, #112	@ 0x70
 80019c8:	bc08      	pop	{r3}
 80019ca:	b003      	add	sp, #12
 80019cc:	4718      	bx	r3
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	7fffffff 	.word	0x7fffffff
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	ffff0208 	.word	0xffff0208

080019dc <memset>:
 80019dc:	0003      	movs	r3, r0
 80019de:	1882      	adds	r2, r0, r2
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <memset+0xa>
 80019e4:	4770      	bx	lr
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	e7f9      	b.n	80019e0 <memset+0x4>

080019ec <__errno>:
 80019ec:	4b01      	ldr	r3, [pc, #4]	@ (80019f4 <__errno+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	4770      	bx	lr
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	2600      	movs	r6, #0
 80019fc:	4c0c      	ldr	r4, [pc, #48]	@ (8001a30 <__libc_init_array+0x38>)
 80019fe:	4d0d      	ldr	r5, [pc, #52]	@ (8001a34 <__libc_init_array+0x3c>)
 8001a00:	1b64      	subs	r4, r4, r5
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	42a6      	cmp	r6, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	2600      	movs	r6, #0
 8001a0a:	f000 fc65 	bl	80022d8 <_init>
 8001a0e:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <__libc_init_array+0x40>)
 8001a10:	4d0a      	ldr	r5, [pc, #40]	@ (8001a3c <__libc_init_array+0x44>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	42a6      	cmp	r6, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	00b3      	lsls	r3, r6, #2
 8001a1e:	58eb      	ldr	r3, [r5, r3]
 8001a20:	4798      	blx	r3
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	00b3      	lsls	r3, r6, #2
 8001a28:	58eb      	ldr	r3, [r5, r3]
 8001a2a:	4798      	blx	r3
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	080023a4 	.word	0x080023a4
 8001a34:	080023a4 	.word	0x080023a4
 8001a38:	080023a8 	.word	0x080023a8
 8001a3c:	080023a4 	.word	0x080023a4

08001a40 <__retarget_lock_acquire_recursive>:
 8001a40:	4770      	bx	lr

08001a42 <__retarget_lock_release_recursive>:
 8001a42:	4770      	bx	lr

08001a44 <_free_r>:
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	0005      	movs	r5, r0
 8001a48:	1e0c      	subs	r4, r1, #0
 8001a4a:	d010      	beq.n	8001a6e <_free_r+0x2a>
 8001a4c:	3c04      	subs	r4, #4
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da00      	bge.n	8001a56 <_free_r+0x12>
 8001a54:	18e4      	adds	r4, r4, r3
 8001a56:	0028      	movs	r0, r5
 8001a58:	f000 f8e0 	bl	8001c1c <__malloc_lock>
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <_free_r+0x90>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <_free_r+0x2c>
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	6014      	str	r4, [r2, #0]
 8001a68:	0028      	movs	r0, r5
 8001a6a:	f000 f8df 	bl	8001c2c <__malloc_unlock>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d908      	bls.n	8001a86 <_free_r+0x42>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	1821      	adds	r1, r4, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d1f3      	bne.n	8001a64 <_free_r+0x20>
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	1809      	adds	r1, r1, r0
 8001a82:	6021      	str	r1, [r4, #0]
 8001a84:	e7ee      	b.n	8001a64 <_free_r+0x20>
 8001a86:	001a      	movs	r2, r3
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <_free_r+0x4e>
 8001a8e:	42a3      	cmp	r3, r4
 8001a90:	d9f9      	bls.n	8001a86 <_free_r+0x42>
 8001a92:	6811      	ldr	r1, [r2, #0]
 8001a94:	1850      	adds	r0, r2, r1
 8001a96:	42a0      	cmp	r0, r4
 8001a98:	d10b      	bne.n	8001ab2 <_free_r+0x6e>
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	1809      	adds	r1, r1, r0
 8001a9e:	1850      	adds	r0, r2, r1
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	d1e0      	bne.n	8001a68 <_free_r+0x24>
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	1841      	adds	r1, r0, r1
 8001aac:	6011      	str	r1, [r2, #0]
 8001aae:	6053      	str	r3, [r2, #4]
 8001ab0:	e7da      	b.n	8001a68 <_free_r+0x24>
 8001ab2:	42a0      	cmp	r0, r4
 8001ab4:	d902      	bls.n	8001abc <_free_r+0x78>
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	602b      	str	r3, [r5, #0]
 8001aba:	e7d5      	b.n	8001a68 <_free_r+0x24>
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	1821      	adds	r1, r4, r0
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	d103      	bne.n	8001acc <_free_r+0x88>
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	1809      	adds	r1, r1, r0
 8001aca:	6021      	str	r1, [r4, #0]
 8001acc:	6063      	str	r3, [r4, #4]
 8001ace:	6054      	str	r4, [r2, #4]
 8001ad0:	e7ca      	b.n	8001a68 <_free_r+0x24>
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	200001c8 	.word	0x200001c8

08001ad8 <sbrk_aligned>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4e0f      	ldr	r6, [pc, #60]	@ (8001b18 <sbrk_aligned+0x40>)
 8001adc:	000d      	movs	r5, r1
 8001ade:	6831      	ldr	r1, [r6, #0]
 8001ae0:	0004      	movs	r4, r0
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	d102      	bne.n	8001aec <sbrk_aligned+0x14>
 8001ae6:	f000 fb99 	bl	800221c <_sbrk_r>
 8001aea:	6030      	str	r0, [r6, #0]
 8001aec:	0029      	movs	r1, r5
 8001aee:	0020      	movs	r0, r4
 8001af0:	f000 fb94 	bl	800221c <_sbrk_r>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d103      	bne.n	8001b00 <sbrk_aligned+0x28>
 8001af8:	2501      	movs	r5, #1
 8001afa:	426d      	negs	r5, r5
 8001afc:	0028      	movs	r0, r5
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	2303      	movs	r3, #3
 8001b02:	1cc5      	adds	r5, r0, #3
 8001b04:	439d      	bics	r5, r3
 8001b06:	42a8      	cmp	r0, r5
 8001b08:	d0f8      	beq.n	8001afc <sbrk_aligned+0x24>
 8001b0a:	1a29      	subs	r1, r5, r0
 8001b0c:	0020      	movs	r0, r4
 8001b0e:	f000 fb85 	bl	800221c <_sbrk_r>
 8001b12:	3001      	adds	r0, #1
 8001b14:	d1f2      	bne.n	8001afc <sbrk_aligned+0x24>
 8001b16:	e7ef      	b.n	8001af8 <sbrk_aligned+0x20>
 8001b18:	200001c4 	.word	0x200001c4

08001b1c <_malloc_r>:
 8001b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b1e:	2203      	movs	r2, #3
 8001b20:	1ccb      	adds	r3, r1, #3
 8001b22:	4393      	bics	r3, r2
 8001b24:	3308      	adds	r3, #8
 8001b26:	0005      	movs	r5, r0
 8001b28:	001f      	movs	r7, r3
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d234      	bcs.n	8001b98 <_malloc_r+0x7c>
 8001b2e:	270c      	movs	r7, #12
 8001b30:	42b9      	cmp	r1, r7
 8001b32:	d833      	bhi.n	8001b9c <_malloc_r+0x80>
 8001b34:	0028      	movs	r0, r5
 8001b36:	f000 f871 	bl	8001c1c <__malloc_lock>
 8001b3a:	4e37      	ldr	r6, [pc, #220]	@ (8001c18 <_malloc_r+0xfc>)
 8001b3c:	6833      	ldr	r3, [r6, #0]
 8001b3e:	001c      	movs	r4, r3
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	d12f      	bne.n	8001ba4 <_malloc_r+0x88>
 8001b44:	0039      	movs	r1, r7
 8001b46:	0028      	movs	r0, r5
 8001b48:	f7ff ffc6 	bl	8001ad8 <sbrk_aligned>
 8001b4c:	0004      	movs	r4, r0
 8001b4e:	1c43      	adds	r3, r0, #1
 8001b50:	d15f      	bne.n	8001c12 <_malloc_r+0xf6>
 8001b52:	6834      	ldr	r4, [r6, #0]
 8001b54:	9400      	str	r4, [sp, #0]
 8001b56:	9b00      	ldr	r3, [sp, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d14a      	bne.n	8001bf2 <_malloc_r+0xd6>
 8001b5c:	2c00      	cmp	r4, #0
 8001b5e:	d052      	beq.n	8001c06 <_malloc_r+0xea>
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	0028      	movs	r0, r5
 8001b64:	18e3      	adds	r3, r4, r3
 8001b66:	9900      	ldr	r1, [sp, #0]
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	f000 fb57 	bl	800221c <_sbrk_r>
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	4283      	cmp	r3, r0
 8001b72:	d148      	bne.n	8001c06 <_malloc_r+0xea>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	0028      	movs	r0, r5
 8001b78:	1aff      	subs	r7, r7, r3
 8001b7a:	0039      	movs	r1, r7
 8001b7c:	f7ff ffac 	bl	8001ad8 <sbrk_aligned>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d040      	beq.n	8001c06 <_malloc_r+0xea>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	19db      	adds	r3, r3, r7
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	6833      	ldr	r3, [r6, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d133      	bne.n	8001bfa <_malloc_r+0xde>
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	6033      	str	r3, [r6, #0]
 8001b96:	e019      	b.n	8001bcc <_malloc_r+0xb0>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dac9      	bge.n	8001b30 <_malloc_r+0x14>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	602b      	str	r3, [r5, #0]
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ba4:	6821      	ldr	r1, [r4, #0]
 8001ba6:	1bc9      	subs	r1, r1, r7
 8001ba8:	d420      	bmi.n	8001bec <_malloc_r+0xd0>
 8001baa:	290b      	cmp	r1, #11
 8001bac:	d90a      	bls.n	8001bc4 <_malloc_r+0xa8>
 8001bae:	19e2      	adds	r2, r4, r7
 8001bb0:	6027      	str	r7, [r4, #0]
 8001bb2:	42a3      	cmp	r3, r4
 8001bb4:	d104      	bne.n	8001bc0 <_malloc_r+0xa4>
 8001bb6:	6032      	str	r2, [r6, #0]
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	6011      	str	r1, [r2, #0]
 8001bbc:	6053      	str	r3, [r2, #4]
 8001bbe:	e005      	b.n	8001bcc <_malloc_r+0xb0>
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e7f9      	b.n	8001bb8 <_malloc_r+0x9c>
 8001bc4:	6862      	ldr	r2, [r4, #4]
 8001bc6:	42a3      	cmp	r3, r4
 8001bc8:	d10e      	bne.n	8001be8 <_malloc_r+0xcc>
 8001bca:	6032      	str	r2, [r6, #0]
 8001bcc:	0028      	movs	r0, r5
 8001bce:	f000 f82d 	bl	8001c2c <__malloc_unlock>
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	300b      	adds	r0, #11
 8001bd8:	1d23      	adds	r3, r4, #4
 8001bda:	4390      	bics	r0, r2
 8001bdc:	1ac2      	subs	r2, r0, r3
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d0df      	beq.n	8001ba2 <_malloc_r+0x86>
 8001be2:	1a1b      	subs	r3, r3, r0
 8001be4:	50a3      	str	r3, [r4, r2]
 8001be6:	e7dc      	b.n	8001ba2 <_malloc_r+0x86>
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e7ef      	b.n	8001bcc <_malloc_r+0xb0>
 8001bec:	0023      	movs	r3, r4
 8001bee:	6864      	ldr	r4, [r4, #4]
 8001bf0:	e7a6      	b.n	8001b40 <_malloc_r+0x24>
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	6863      	ldr	r3, [r4, #4]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	e7ad      	b.n	8001b56 <_malloc_r+0x3a>
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	42a3      	cmp	r3, r4
 8001c00:	d1fb      	bne.n	8001bfa <_malloc_r+0xde>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7da      	b.n	8001bbc <_malloc_r+0xa0>
 8001c06:	230c      	movs	r3, #12
 8001c08:	0028      	movs	r0, r5
 8001c0a:	602b      	str	r3, [r5, #0]
 8001c0c:	f000 f80e 	bl	8001c2c <__malloc_unlock>
 8001c10:	e7c6      	b.n	8001ba0 <_malloc_r+0x84>
 8001c12:	6007      	str	r7, [r0, #0]
 8001c14:	e7da      	b.n	8001bcc <_malloc_r+0xb0>
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	200001c8 	.word	0x200001c8

08001c1c <__malloc_lock>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <__malloc_lock+0xc>)
 8001c20:	f7ff ff0e 	bl	8001a40 <__retarget_lock_acquire_recursive>
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	200001c0 	.word	0x200001c0

08001c2c <__malloc_unlock>:
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <__malloc_unlock+0xc>)
 8001c30:	f7ff ff07 	bl	8001a42 <__retarget_lock_release_recursive>
 8001c34:	bd10      	pop	{r4, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	200001c0 	.word	0x200001c0

08001c3c <__ssputs_r>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	688e      	ldr	r6, [r1, #8]
 8001c40:	b085      	sub	sp, #20
 8001c42:	001f      	movs	r7, r3
 8001c44:	000c      	movs	r4, r1
 8001c46:	680b      	ldr	r3, [r1, #0]
 8001c48:	9002      	str	r0, [sp, #8]
 8001c4a:	9203      	str	r2, [sp, #12]
 8001c4c:	42be      	cmp	r6, r7
 8001c4e:	d830      	bhi.n	8001cb2 <__ssputs_r+0x76>
 8001c50:	210c      	movs	r1, #12
 8001c52:	5e62      	ldrsh	r2, [r4, r1]
 8001c54:	2190      	movs	r1, #144	@ 0x90
 8001c56:	00c9      	lsls	r1, r1, #3
 8001c58:	420a      	tst	r2, r1
 8001c5a:	d028      	beq.n	8001cae <__ssputs_r+0x72>
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	6921      	ldr	r1, [r4, #16]
 8001c60:	1a5b      	subs	r3, r3, r1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	6963      	ldr	r3, [r4, #20]
 8001c66:	4343      	muls	r3, r0
 8001c68:	9801      	ldr	r0, [sp, #4]
 8001c6a:	0fdd      	lsrs	r5, r3, #31
 8001c6c:	18ed      	adds	r5, r5, r3
 8001c6e:	1c7b      	adds	r3, r7, #1
 8001c70:	181b      	adds	r3, r3, r0
 8001c72:	106d      	asrs	r5, r5, #1
 8001c74:	42ab      	cmp	r3, r5
 8001c76:	d900      	bls.n	8001c7a <__ssputs_r+0x3e>
 8001c78:	001d      	movs	r5, r3
 8001c7a:	0552      	lsls	r2, r2, #21
 8001c7c:	d528      	bpl.n	8001cd0 <__ssputs_r+0x94>
 8001c7e:	0029      	movs	r1, r5
 8001c80:	9802      	ldr	r0, [sp, #8]
 8001c82:	f7ff ff4b 	bl	8001b1c <_malloc_r>
 8001c86:	1e06      	subs	r6, r0, #0
 8001c88:	d02c      	beq.n	8001ce4 <__ssputs_r+0xa8>
 8001c8a:	9a01      	ldr	r2, [sp, #4]
 8001c8c:	6921      	ldr	r1, [r4, #16]
 8001c8e:	f000 fae2 	bl	8002256 <memcpy>
 8001c92:	89a2      	ldrh	r2, [r4, #12]
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <__ssputs_r+0xbc>)
 8001c96:	401a      	ands	r2, r3
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	9b01      	ldr	r3, [sp, #4]
 8001ca0:	6126      	str	r6, [r4, #16]
 8001ca2:	18f6      	adds	r6, r6, r3
 8001ca4:	6026      	str	r6, [r4, #0]
 8001ca6:	003e      	movs	r6, r7
 8001ca8:	6165      	str	r5, [r4, #20]
 8001caa:	1aed      	subs	r5, r5, r3
 8001cac:	60a5      	str	r5, [r4, #8]
 8001cae:	42be      	cmp	r6, r7
 8001cb0:	d900      	bls.n	8001cb4 <__ssputs_r+0x78>
 8001cb2:	003e      	movs	r6, r7
 8001cb4:	0032      	movs	r2, r6
 8001cb6:	9903      	ldr	r1, [sp, #12]
 8001cb8:	6820      	ldr	r0, [r4, #0]
 8001cba:	f000 fa9b 	bl	80021f4 <memmove>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	68a3      	ldr	r3, [r4, #8]
 8001cc2:	1b9b      	subs	r3, r3, r6
 8001cc4:	60a3      	str	r3, [r4, #8]
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	199b      	adds	r3, r3, r6
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	b005      	add	sp, #20
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd0:	002a      	movs	r2, r5
 8001cd2:	9802      	ldr	r0, [sp, #8]
 8001cd4:	f000 fac8 	bl	8002268 <_realloc_r>
 8001cd8:	1e06      	subs	r6, r0, #0
 8001cda:	d1e0      	bne.n	8001c9e <__ssputs_r+0x62>
 8001cdc:	6921      	ldr	r1, [r4, #16]
 8001cde:	9802      	ldr	r0, [sp, #8]
 8001ce0:	f7ff feb0 	bl	8001a44 <_free_r>
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	9a02      	ldr	r2, [sp, #8]
 8001cea:	4240      	negs	r0, r0
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	89a2      	ldrh	r2, [r4, #12]
 8001cf0:	3334      	adds	r3, #52	@ 0x34
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	81a3      	strh	r3, [r4, #12]
 8001cf6:	e7e9      	b.n	8001ccc <__ssputs_r+0x90>
 8001cf8:	fffffb7f 	.word	0xfffffb7f

08001cfc <_svfiprintf_r>:
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	b0a1      	sub	sp, #132	@ 0x84
 8001d00:	9003      	str	r0, [sp, #12]
 8001d02:	001d      	movs	r5, r3
 8001d04:	898b      	ldrh	r3, [r1, #12]
 8001d06:	000f      	movs	r7, r1
 8001d08:	0016      	movs	r6, r2
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	d511      	bpl.n	8001d32 <_svfiprintf_r+0x36>
 8001d0e:	690b      	ldr	r3, [r1, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10e      	bne.n	8001d32 <_svfiprintf_r+0x36>
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	f7ff ff01 	bl	8001b1c <_malloc_r>
 8001d1a:	6038      	str	r0, [r7, #0]
 8001d1c:	6138      	str	r0, [r7, #16]
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d105      	bne.n	8001d2e <_svfiprintf_r+0x32>
 8001d22:	230c      	movs	r3, #12
 8001d24:	9a03      	ldr	r2, [sp, #12]
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	2001      	movs	r0, #1
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	e0cf      	b.n	8001ece <_svfiprintf_r+0x1d2>
 8001d2e:	2340      	movs	r3, #64	@ 0x40
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	2300      	movs	r3, #0
 8001d34:	ac08      	add	r4, sp, #32
 8001d36:	6163      	str	r3, [r4, #20]
 8001d38:	3320      	adds	r3, #32
 8001d3a:	7663      	strb	r3, [r4, #25]
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	76a3      	strb	r3, [r4, #26]
 8001d40:	9507      	str	r5, [sp, #28]
 8001d42:	0035      	movs	r5, r6
 8001d44:	782b      	ldrb	r3, [r5, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <_svfiprintf_r+0x52>
 8001d4a:	2b25      	cmp	r3, #37	@ 0x25
 8001d4c:	d148      	bne.n	8001de0 <_svfiprintf_r+0xe4>
 8001d4e:	1bab      	subs	r3, r5, r6
 8001d50:	9305      	str	r3, [sp, #20]
 8001d52:	42b5      	cmp	r5, r6
 8001d54:	d00b      	beq.n	8001d6e <_svfiprintf_r+0x72>
 8001d56:	0032      	movs	r2, r6
 8001d58:	0039      	movs	r1, r7
 8001d5a:	9803      	ldr	r0, [sp, #12]
 8001d5c:	f7ff ff6e 	bl	8001c3c <__ssputs_r>
 8001d60:	3001      	adds	r0, #1
 8001d62:	d100      	bne.n	8001d66 <_svfiprintf_r+0x6a>
 8001d64:	e0ae      	b.n	8001ec4 <_svfiprintf_r+0x1c8>
 8001d66:	6963      	ldr	r3, [r4, #20]
 8001d68:	9a05      	ldr	r2, [sp, #20]
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	6163      	str	r3, [r4, #20]
 8001d6e:	782b      	ldrb	r3, [r5, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d100      	bne.n	8001d76 <_svfiprintf_r+0x7a>
 8001d74:	e0a6      	b.n	8001ec4 <_svfiprintf_r+0x1c8>
 8001d76:	2201      	movs	r2, #1
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4252      	negs	r2, r2
 8001d7c:	6062      	str	r2, [r4, #4]
 8001d7e:	a904      	add	r1, sp, #16
 8001d80:	3254      	adds	r2, #84	@ 0x54
 8001d82:	1852      	adds	r2, r2, r1
 8001d84:	1c6e      	adds	r6, r5, #1
 8001d86:	6023      	str	r3, [r4, #0]
 8001d88:	60e3      	str	r3, [r4, #12]
 8001d8a:	60a3      	str	r3, [r4, #8]
 8001d8c:	7013      	strb	r3, [r2, #0]
 8001d8e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001d90:	4b54      	ldr	r3, [pc, #336]	@ (8001ee4 <_svfiprintf_r+0x1e8>)
 8001d92:	2205      	movs	r2, #5
 8001d94:	0018      	movs	r0, r3
 8001d96:	7831      	ldrb	r1, [r6, #0]
 8001d98:	9305      	str	r3, [sp, #20]
 8001d9a:	f000 fa51 	bl	8002240 <memchr>
 8001d9e:	1c75      	adds	r5, r6, #1
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d11f      	bne.n	8001de4 <_svfiprintf_r+0xe8>
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	06d3      	lsls	r3, r2, #27
 8001da8:	d504      	bpl.n	8001db4 <_svfiprintf_r+0xb8>
 8001daa:	2353      	movs	r3, #83	@ 0x53
 8001dac:	a904      	add	r1, sp, #16
 8001dae:	185b      	adds	r3, r3, r1
 8001db0:	2120      	movs	r1, #32
 8001db2:	7019      	strb	r1, [r3, #0]
 8001db4:	0713      	lsls	r3, r2, #28
 8001db6:	d504      	bpl.n	8001dc2 <_svfiprintf_r+0xc6>
 8001db8:	2353      	movs	r3, #83	@ 0x53
 8001dba:	a904      	add	r1, sp, #16
 8001dbc:	185b      	adds	r3, r3, r1
 8001dbe:	212b      	movs	r1, #43	@ 0x2b
 8001dc0:	7019      	strb	r1, [r3, #0]
 8001dc2:	7833      	ldrb	r3, [r6, #0]
 8001dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dc6:	d016      	beq.n	8001df6 <_svfiprintf_r+0xfa>
 8001dc8:	0035      	movs	r5, r6
 8001dca:	2100      	movs	r1, #0
 8001dcc:	200a      	movs	r0, #10
 8001dce:	68e3      	ldr	r3, [r4, #12]
 8001dd0:	782a      	ldrb	r2, [r5, #0]
 8001dd2:	1c6e      	adds	r6, r5, #1
 8001dd4:	3a30      	subs	r2, #48	@ 0x30
 8001dd6:	2a09      	cmp	r2, #9
 8001dd8:	d950      	bls.n	8001e7c <_svfiprintf_r+0x180>
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	d111      	bne.n	8001e02 <_svfiprintf_r+0x106>
 8001dde:	e017      	b.n	8001e10 <_svfiprintf_r+0x114>
 8001de0:	3501      	adds	r5, #1
 8001de2:	e7af      	b.n	8001d44 <_svfiprintf_r+0x48>
 8001de4:	9b05      	ldr	r3, [sp, #20]
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	1ac0      	subs	r0, r0, r3
 8001dea:	2301      	movs	r3, #1
 8001dec:	4083      	lsls	r3, r0
 8001dee:	4313      	orrs	r3, r2
 8001df0:	002e      	movs	r6, r5
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	e7cc      	b.n	8001d90 <_svfiprintf_r+0x94>
 8001df6:	9b07      	ldr	r3, [sp, #28]
 8001df8:	1d19      	adds	r1, r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	9107      	str	r1, [sp, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db01      	blt.n	8001e06 <_svfiprintf_r+0x10a>
 8001e02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001e04:	e004      	b.n	8001e10 <_svfiprintf_r+0x114>
 8001e06:	425b      	negs	r3, r3
 8001e08:	60e3      	str	r3, [r4, #12]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	6023      	str	r3, [r4, #0]
 8001e10:	782b      	ldrb	r3, [r5, #0]
 8001e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e14:	d10c      	bne.n	8001e30 <_svfiprintf_r+0x134>
 8001e16:	786b      	ldrb	r3, [r5, #1]
 8001e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e1a:	d134      	bne.n	8001e86 <_svfiprintf_r+0x18a>
 8001e1c:	9b07      	ldr	r3, [sp, #28]
 8001e1e:	3502      	adds	r5, #2
 8001e20:	1d1a      	adds	r2, r3, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	9207      	str	r2, [sp, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da01      	bge.n	8001e2e <_svfiprintf_r+0x132>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e30:	4e2d      	ldr	r6, [pc, #180]	@ (8001ee8 <_svfiprintf_r+0x1ec>)
 8001e32:	2203      	movs	r2, #3
 8001e34:	0030      	movs	r0, r6
 8001e36:	7829      	ldrb	r1, [r5, #0]
 8001e38:	f000 fa02 	bl	8002240 <memchr>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d006      	beq.n	8001e4e <_svfiprintf_r+0x152>
 8001e40:	2340      	movs	r3, #64	@ 0x40
 8001e42:	1b80      	subs	r0, r0, r6
 8001e44:	4083      	lsls	r3, r0
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	3501      	adds	r5, #1
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	6023      	str	r3, [r4, #0]
 8001e4e:	7829      	ldrb	r1, [r5, #0]
 8001e50:	2206      	movs	r2, #6
 8001e52:	4826      	ldr	r0, [pc, #152]	@ (8001eec <_svfiprintf_r+0x1f0>)
 8001e54:	1c6e      	adds	r6, r5, #1
 8001e56:	7621      	strb	r1, [r4, #24]
 8001e58:	f000 f9f2 	bl	8002240 <memchr>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d038      	beq.n	8001ed2 <_svfiprintf_r+0x1d6>
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <_svfiprintf_r+0x1f4>)
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d122      	bne.n	8001eac <_svfiprintf_r+0x1b0>
 8001e66:	2207      	movs	r2, #7
 8001e68:	9b07      	ldr	r3, [sp, #28]
 8001e6a:	3307      	adds	r3, #7
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	3308      	adds	r3, #8
 8001e70:	9307      	str	r3, [sp, #28]
 8001e72:	6963      	ldr	r3, [r4, #20]
 8001e74:	9a04      	ldr	r2, [sp, #16]
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	6163      	str	r3, [r4, #20]
 8001e7a:	e762      	b.n	8001d42 <_svfiprintf_r+0x46>
 8001e7c:	4343      	muls	r3, r0
 8001e7e:	0035      	movs	r5, r6
 8001e80:	2101      	movs	r1, #1
 8001e82:	189b      	adds	r3, r3, r2
 8001e84:	e7a4      	b.n	8001dd0 <_svfiprintf_r+0xd4>
 8001e86:	2300      	movs	r3, #0
 8001e88:	200a      	movs	r0, #10
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	3501      	adds	r5, #1
 8001e8e:	6063      	str	r3, [r4, #4]
 8001e90:	782a      	ldrb	r2, [r5, #0]
 8001e92:	1c6e      	adds	r6, r5, #1
 8001e94:	3a30      	subs	r2, #48	@ 0x30
 8001e96:	2a09      	cmp	r2, #9
 8001e98:	d903      	bls.n	8001ea2 <_svfiprintf_r+0x1a6>
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0c8      	beq.n	8001e30 <_svfiprintf_r+0x134>
 8001e9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8001ea0:	e7c6      	b.n	8001e30 <_svfiprintf_r+0x134>
 8001ea2:	4341      	muls	r1, r0
 8001ea4:	0035      	movs	r5, r6
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	1889      	adds	r1, r1, r2
 8001eaa:	e7f1      	b.n	8001e90 <_svfiprintf_r+0x194>
 8001eac:	aa07      	add	r2, sp, #28
 8001eae:	9200      	str	r2, [sp, #0]
 8001eb0:	0021      	movs	r1, r4
 8001eb2:	003a      	movs	r2, r7
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <_svfiprintf_r+0x1f8>)
 8001eb6:	9803      	ldr	r0, [sp, #12]
 8001eb8:	e000      	b.n	8001ebc <_svfiprintf_r+0x1c0>
 8001eba:	bf00      	nop
 8001ebc:	9004      	str	r0, [sp, #16]
 8001ebe:	9b04      	ldr	r3, [sp, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	d1d6      	bne.n	8001e72 <_svfiprintf_r+0x176>
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001ec8:	065b      	lsls	r3, r3, #25
 8001eca:	d500      	bpl.n	8001ece <_svfiprintf_r+0x1d2>
 8001ecc:	e72c      	b.n	8001d28 <_svfiprintf_r+0x2c>
 8001ece:	b021      	add	sp, #132	@ 0x84
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	aa07      	add	r2, sp, #28
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	0021      	movs	r1, r4
 8001ed8:	003a      	movs	r2, r7
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <_svfiprintf_r+0x1f8>)
 8001edc:	9803      	ldr	r0, [sp, #12]
 8001ede:	f000 f87b 	bl	8001fd8 <_printf_i>
 8001ee2:	e7eb      	b.n	8001ebc <_svfiprintf_r+0x1c0>
 8001ee4:	08002370 	.word	0x08002370
 8001ee8:	08002376 	.word	0x08002376
 8001eec:	0800237a 	.word	0x0800237a
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	08001c3d 	.word	0x08001c3d

08001ef8 <_printf_common>:
 8001ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001efa:	0016      	movs	r6, r2
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	688a      	ldr	r2, [r1, #8]
 8001f00:	690b      	ldr	r3, [r1, #16]
 8001f02:	000c      	movs	r4, r1
 8001f04:	9000      	str	r0, [sp, #0]
 8001f06:	4293      	cmp	r3, r2
 8001f08:	da00      	bge.n	8001f0c <_printf_common+0x14>
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	0022      	movs	r2, r4
 8001f0e:	6033      	str	r3, [r6, #0]
 8001f10:	3243      	adds	r2, #67	@ 0x43
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d001      	beq.n	8001f1c <_printf_common+0x24>
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6033      	str	r3, [r6, #0]
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	d502      	bpl.n	8001f28 <_printf_common+0x30>
 8001f22:	6833      	ldr	r3, [r6, #0]
 8001f24:	3302      	adds	r3, #2
 8001f26:	6033      	str	r3, [r6, #0]
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	0015      	movs	r5, r2
 8001f2e:	401d      	ands	r5, r3
 8001f30:	421a      	tst	r2, r3
 8001f32:	d027      	beq.n	8001f84 <_printf_common+0x8c>
 8001f34:	0023      	movs	r3, r4
 8001f36:	3343      	adds	r3, #67	@ 0x43
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	4193      	sbcs	r3, r2
 8001f3e:	6822      	ldr	r2, [r4, #0]
 8001f40:	0692      	lsls	r2, r2, #26
 8001f42:	d430      	bmi.n	8001fa6 <_printf_common+0xae>
 8001f44:	0022      	movs	r2, r4
 8001f46:	9901      	ldr	r1, [sp, #4]
 8001f48:	9800      	ldr	r0, [sp, #0]
 8001f4a:	9d08      	ldr	r5, [sp, #32]
 8001f4c:	3243      	adds	r2, #67	@ 0x43
 8001f4e:	47a8      	blx	r5
 8001f50:	3001      	adds	r0, #1
 8001f52:	d025      	beq.n	8001fa0 <_printf_common+0xa8>
 8001f54:	2206      	movs	r2, #6
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	2500      	movs	r5, #0
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d105      	bne.n	8001f6c <_printf_common+0x74>
 8001f60:	6833      	ldr	r3, [r6, #0]
 8001f62:	68e5      	ldr	r5, [r4, #12]
 8001f64:	1aed      	subs	r5, r5, r3
 8001f66:	43eb      	mvns	r3, r5
 8001f68:	17db      	asrs	r3, r3, #31
 8001f6a:	401d      	ands	r5, r3
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	6922      	ldr	r2, [r4, #16]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	dd01      	ble.n	8001f78 <_printf_common+0x80>
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	18ed      	adds	r5, r5, r3
 8001f78:	2600      	movs	r6, #0
 8001f7a:	42b5      	cmp	r5, r6
 8001f7c:	d120      	bne.n	8001fc0 <_printf_common+0xc8>
 8001f7e:	2000      	movs	r0, #0
 8001f80:	e010      	b.n	8001fa4 <_printf_common+0xac>
 8001f82:	3501      	adds	r5, #1
 8001f84:	68e3      	ldr	r3, [r4, #12]
 8001f86:	6832      	ldr	r2, [r6, #0]
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	42ab      	cmp	r3, r5
 8001f8c:	ddd2      	ble.n	8001f34 <_printf_common+0x3c>
 8001f8e:	0022      	movs	r2, r4
 8001f90:	2301      	movs	r3, #1
 8001f92:	9901      	ldr	r1, [sp, #4]
 8001f94:	9800      	ldr	r0, [sp, #0]
 8001f96:	9f08      	ldr	r7, [sp, #32]
 8001f98:	3219      	adds	r2, #25
 8001f9a:	47b8      	blx	r7
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d1f0      	bne.n	8001f82 <_printf_common+0x8a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	4240      	negs	r0, r0
 8001fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fa6:	2030      	movs	r0, #48	@ 0x30
 8001fa8:	18e1      	adds	r1, r4, r3
 8001faa:	3143      	adds	r1, #67	@ 0x43
 8001fac:	7008      	strb	r0, [r1, #0]
 8001fae:	0021      	movs	r1, r4
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	3145      	adds	r1, #69	@ 0x45
 8001fb4:	7809      	ldrb	r1, [r1, #0]
 8001fb6:	18a2      	adds	r2, r4, r2
 8001fb8:	3243      	adds	r2, #67	@ 0x43
 8001fba:	3302      	adds	r3, #2
 8001fbc:	7011      	strb	r1, [r2, #0]
 8001fbe:	e7c1      	b.n	8001f44 <_printf_common+0x4c>
 8001fc0:	0022      	movs	r2, r4
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	9901      	ldr	r1, [sp, #4]
 8001fc6:	9800      	ldr	r0, [sp, #0]
 8001fc8:	9f08      	ldr	r7, [sp, #32]
 8001fca:	321a      	adds	r2, #26
 8001fcc:	47b8      	blx	r7
 8001fce:	3001      	adds	r0, #1
 8001fd0:	d0e6      	beq.n	8001fa0 <_printf_common+0xa8>
 8001fd2:	3601      	adds	r6, #1
 8001fd4:	e7d1      	b.n	8001f7a <_printf_common+0x82>
	...

08001fd8 <_printf_i>:
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	b08b      	sub	sp, #44	@ 0x2c
 8001fdc:	9206      	str	r2, [sp, #24]
 8001fde:	000a      	movs	r2, r1
 8001fe0:	3243      	adds	r2, #67	@ 0x43
 8001fe2:	9307      	str	r3, [sp, #28]
 8001fe4:	9005      	str	r0, [sp, #20]
 8001fe6:	9203      	str	r2, [sp, #12]
 8001fe8:	7e0a      	ldrb	r2, [r1, #24]
 8001fea:	000c      	movs	r4, r1
 8001fec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001fee:	2a78      	cmp	r2, #120	@ 0x78
 8001ff0:	d809      	bhi.n	8002006 <_printf_i+0x2e>
 8001ff2:	2a62      	cmp	r2, #98	@ 0x62
 8001ff4:	d80b      	bhi.n	800200e <_printf_i+0x36>
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d100      	bne.n	8001ffc <_printf_i+0x24>
 8001ffa:	e0bc      	b.n	8002176 <_printf_i+0x19e>
 8001ffc:	497b      	ldr	r1, [pc, #492]	@ (80021ec <_printf_i+0x214>)
 8001ffe:	9104      	str	r1, [sp, #16]
 8002000:	2a58      	cmp	r2, #88	@ 0x58
 8002002:	d100      	bne.n	8002006 <_printf_i+0x2e>
 8002004:	e090      	b.n	8002128 <_printf_i+0x150>
 8002006:	0025      	movs	r5, r4
 8002008:	3542      	adds	r5, #66	@ 0x42
 800200a:	702a      	strb	r2, [r5, #0]
 800200c:	e022      	b.n	8002054 <_printf_i+0x7c>
 800200e:	0010      	movs	r0, r2
 8002010:	3863      	subs	r0, #99	@ 0x63
 8002012:	2815      	cmp	r0, #21
 8002014:	d8f7      	bhi.n	8002006 <_printf_i+0x2e>
 8002016:	f7fe f87f 	bl	8000118 <__gnu_thumb1_case_shi>
 800201a:	0016      	.short	0x0016
 800201c:	fff6001f 	.word	0xfff6001f
 8002020:	fff6fff6 	.word	0xfff6fff6
 8002024:	001ffff6 	.word	0x001ffff6
 8002028:	fff6fff6 	.word	0xfff6fff6
 800202c:	fff6fff6 	.word	0xfff6fff6
 8002030:	003600a1 	.word	0x003600a1
 8002034:	fff60080 	.word	0xfff60080
 8002038:	00b2fff6 	.word	0x00b2fff6
 800203c:	0036fff6 	.word	0x0036fff6
 8002040:	fff6fff6 	.word	0xfff6fff6
 8002044:	0084      	.short	0x0084
 8002046:	0025      	movs	r5, r4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	3542      	adds	r5, #66	@ 0x42
 800204c:	1d11      	adds	r1, r2, #4
 800204e:	6019      	str	r1, [r3, #0]
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	702b      	strb	r3, [r5, #0]
 8002054:	2301      	movs	r3, #1
 8002056:	e0a0      	b.n	800219a <_printf_i+0x1c2>
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	6809      	ldr	r1, [r1, #0]
 800205c:	1d02      	adds	r2, r0, #4
 800205e:	060d      	lsls	r5, r1, #24
 8002060:	d50b      	bpl.n	800207a <_printf_i+0xa2>
 8002062:	6806      	ldr	r6, [r0, #0]
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	2e00      	cmp	r6, #0
 8002068:	da03      	bge.n	8002072 <_printf_i+0x9a>
 800206a:	232d      	movs	r3, #45	@ 0x2d
 800206c:	9a03      	ldr	r2, [sp, #12]
 800206e:	4276      	negs	r6, r6
 8002070:	7013      	strb	r3, [r2, #0]
 8002072:	4b5e      	ldr	r3, [pc, #376]	@ (80021ec <_printf_i+0x214>)
 8002074:	270a      	movs	r7, #10
 8002076:	9304      	str	r3, [sp, #16]
 8002078:	e018      	b.n	80020ac <_printf_i+0xd4>
 800207a:	6806      	ldr	r6, [r0, #0]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	0649      	lsls	r1, r1, #25
 8002080:	d5f1      	bpl.n	8002066 <_printf_i+0x8e>
 8002082:	b236      	sxth	r6, r6
 8002084:	e7ef      	b.n	8002066 <_printf_i+0x8e>
 8002086:	6808      	ldr	r0, [r1, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	c940      	ldmia	r1!, {r6}
 800208c:	0605      	lsls	r5, r0, #24
 800208e:	d402      	bmi.n	8002096 <_printf_i+0xbe>
 8002090:	0640      	lsls	r0, r0, #25
 8002092:	d500      	bpl.n	8002096 <_printf_i+0xbe>
 8002094:	b2b6      	uxth	r6, r6
 8002096:	6019      	str	r1, [r3, #0]
 8002098:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <_printf_i+0x214>)
 800209a:	270a      	movs	r7, #10
 800209c:	9304      	str	r3, [sp, #16]
 800209e:	2a6f      	cmp	r2, #111	@ 0x6f
 80020a0:	d100      	bne.n	80020a4 <_printf_i+0xcc>
 80020a2:	3f02      	subs	r7, #2
 80020a4:	0023      	movs	r3, r4
 80020a6:	2200      	movs	r2, #0
 80020a8:	3343      	adds	r3, #67	@ 0x43
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	6863      	ldr	r3, [r4, #4]
 80020ae:	60a3      	str	r3, [r4, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db03      	blt.n	80020bc <_printf_i+0xe4>
 80020b4:	2104      	movs	r1, #4
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	438a      	bics	r2, r1
 80020ba:	6022      	str	r2, [r4, #0]
 80020bc:	2e00      	cmp	r6, #0
 80020be:	d102      	bne.n	80020c6 <_printf_i+0xee>
 80020c0:	9d03      	ldr	r5, [sp, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <_printf_i+0x108>
 80020c6:	9d03      	ldr	r5, [sp, #12]
 80020c8:	0030      	movs	r0, r6
 80020ca:	0039      	movs	r1, r7
 80020cc:	f7fe f8b4 	bl	8000238 <__aeabi_uidivmod>
 80020d0:	9b04      	ldr	r3, [sp, #16]
 80020d2:	3d01      	subs	r5, #1
 80020d4:	5c5b      	ldrb	r3, [r3, r1]
 80020d6:	702b      	strb	r3, [r5, #0]
 80020d8:	0033      	movs	r3, r6
 80020da:	0006      	movs	r6, r0
 80020dc:	429f      	cmp	r7, r3
 80020de:	d9f3      	bls.n	80020c8 <_printf_i+0xf0>
 80020e0:	2f08      	cmp	r7, #8
 80020e2:	d109      	bne.n	80020f8 <_printf_i+0x120>
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	07db      	lsls	r3, r3, #31
 80020e8:	d506      	bpl.n	80020f8 <_printf_i+0x120>
 80020ea:	6862      	ldr	r2, [r4, #4]
 80020ec:	6923      	ldr	r3, [r4, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc02      	bgt.n	80020f8 <_printf_i+0x120>
 80020f2:	2330      	movs	r3, #48	@ 0x30
 80020f4:	3d01      	subs	r5, #1
 80020f6:	702b      	strb	r3, [r5, #0]
 80020f8:	9b03      	ldr	r3, [sp, #12]
 80020fa:	1b5b      	subs	r3, r3, r5
 80020fc:	6123      	str	r3, [r4, #16]
 80020fe:	9b07      	ldr	r3, [sp, #28]
 8002100:	0021      	movs	r1, r4
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	9805      	ldr	r0, [sp, #20]
 8002106:	9b06      	ldr	r3, [sp, #24]
 8002108:	aa09      	add	r2, sp, #36	@ 0x24
 800210a:	f7ff fef5 	bl	8001ef8 <_printf_common>
 800210e:	3001      	adds	r0, #1
 8002110:	d148      	bne.n	80021a4 <_printf_i+0x1cc>
 8002112:	2001      	movs	r0, #1
 8002114:	4240      	negs	r0, r0
 8002116:	b00b      	add	sp, #44	@ 0x2c
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	2220      	movs	r2, #32
 800211c:	6809      	ldr	r1, [r1, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	6022      	str	r2, [r4, #0]
 8002122:	2278      	movs	r2, #120	@ 0x78
 8002124:	4932      	ldr	r1, [pc, #200]	@ (80021f0 <_printf_i+0x218>)
 8002126:	9104      	str	r1, [sp, #16]
 8002128:	0021      	movs	r1, r4
 800212a:	3145      	adds	r1, #69	@ 0x45
 800212c:	700a      	strb	r2, [r1, #0]
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	c940      	ldmia	r1!, {r6}
 8002134:	0610      	lsls	r0, r2, #24
 8002136:	d402      	bmi.n	800213e <_printf_i+0x166>
 8002138:	0650      	lsls	r0, r2, #25
 800213a:	d500      	bpl.n	800213e <_printf_i+0x166>
 800213c:	b2b6      	uxth	r6, r6
 800213e:	6019      	str	r1, [r3, #0]
 8002140:	07d3      	lsls	r3, r2, #31
 8002142:	d502      	bpl.n	800214a <_printf_i+0x172>
 8002144:	2320      	movs	r3, #32
 8002146:	4313      	orrs	r3, r2
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	2e00      	cmp	r6, #0
 800214c:	d001      	beq.n	8002152 <_printf_i+0x17a>
 800214e:	2710      	movs	r7, #16
 8002150:	e7a8      	b.n	80020a4 <_printf_i+0xcc>
 8002152:	2220      	movs	r2, #32
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	4393      	bics	r3, r2
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	e7f8      	b.n	800214e <_printf_i+0x176>
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	680d      	ldr	r5, [r1, #0]
 8002160:	1d10      	adds	r0, r2, #4
 8002162:	6949      	ldr	r1, [r1, #20]
 8002164:	6018      	str	r0, [r3, #0]
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	062e      	lsls	r6, r5, #24
 800216a:	d501      	bpl.n	8002170 <_printf_i+0x198>
 800216c:	6019      	str	r1, [r3, #0]
 800216e:	e002      	b.n	8002176 <_printf_i+0x19e>
 8002170:	066d      	lsls	r5, r5, #25
 8002172:	d5fb      	bpl.n	800216c <_printf_i+0x194>
 8002174:	8019      	strh	r1, [r3, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	9d03      	ldr	r5, [sp, #12]
 800217a:	6123      	str	r3, [r4, #16]
 800217c:	e7bf      	b.n	80020fe <_printf_i+0x126>
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	1d11      	adds	r1, r2, #4
 8002182:	6019      	str	r1, [r3, #0]
 8002184:	6815      	ldr	r5, [r2, #0]
 8002186:	2100      	movs	r1, #0
 8002188:	0028      	movs	r0, r5
 800218a:	6862      	ldr	r2, [r4, #4]
 800218c:	f000 f858 	bl	8002240 <memchr>
 8002190:	2800      	cmp	r0, #0
 8002192:	d001      	beq.n	8002198 <_printf_i+0x1c0>
 8002194:	1b40      	subs	r0, r0, r5
 8002196:	6060      	str	r0, [r4, #4]
 8002198:	6863      	ldr	r3, [r4, #4]
 800219a:	6123      	str	r3, [r4, #16]
 800219c:	2300      	movs	r3, #0
 800219e:	9a03      	ldr	r2, [sp, #12]
 80021a0:	7013      	strb	r3, [r2, #0]
 80021a2:	e7ac      	b.n	80020fe <_printf_i+0x126>
 80021a4:	002a      	movs	r2, r5
 80021a6:	6923      	ldr	r3, [r4, #16]
 80021a8:	9906      	ldr	r1, [sp, #24]
 80021aa:	9805      	ldr	r0, [sp, #20]
 80021ac:	9d07      	ldr	r5, [sp, #28]
 80021ae:	47a8      	blx	r5
 80021b0:	3001      	adds	r0, #1
 80021b2:	d0ae      	beq.n	8002112 <_printf_i+0x13a>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	079b      	lsls	r3, r3, #30
 80021b8:	d415      	bmi.n	80021e6 <_printf_i+0x20e>
 80021ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021bc:	68e0      	ldr	r0, [r4, #12]
 80021be:	4298      	cmp	r0, r3
 80021c0:	daa9      	bge.n	8002116 <_printf_i+0x13e>
 80021c2:	0018      	movs	r0, r3
 80021c4:	e7a7      	b.n	8002116 <_printf_i+0x13e>
 80021c6:	0022      	movs	r2, r4
 80021c8:	2301      	movs	r3, #1
 80021ca:	9906      	ldr	r1, [sp, #24]
 80021cc:	9805      	ldr	r0, [sp, #20]
 80021ce:	9e07      	ldr	r6, [sp, #28]
 80021d0:	3219      	adds	r2, #25
 80021d2:	47b0      	blx	r6
 80021d4:	3001      	adds	r0, #1
 80021d6:	d09c      	beq.n	8002112 <_printf_i+0x13a>
 80021d8:	3501      	adds	r5, #1
 80021da:	68e3      	ldr	r3, [r4, #12]
 80021dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	42ab      	cmp	r3, r5
 80021e2:	dcf0      	bgt.n	80021c6 <_printf_i+0x1ee>
 80021e4:	e7e9      	b.n	80021ba <_printf_i+0x1e2>
 80021e6:	2500      	movs	r5, #0
 80021e8:	e7f7      	b.n	80021da <_printf_i+0x202>
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	08002381 	.word	0x08002381
 80021f0:	08002392 	.word	0x08002392

080021f4 <memmove>:
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4288      	cmp	r0, r1
 80021f8:	d806      	bhi.n	8002208 <memmove+0x14>
 80021fa:	2300      	movs	r3, #0
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d008      	beq.n	8002212 <memmove+0x1e>
 8002200:	5ccc      	ldrb	r4, [r1, r3]
 8002202:	54c4      	strb	r4, [r0, r3]
 8002204:	3301      	adds	r3, #1
 8002206:	e7f9      	b.n	80021fc <memmove+0x8>
 8002208:	188b      	adds	r3, r1, r2
 800220a:	4298      	cmp	r0, r3
 800220c:	d2f5      	bcs.n	80021fa <memmove+0x6>
 800220e:	3a01      	subs	r2, #1
 8002210:	d200      	bcs.n	8002214 <memmove+0x20>
 8002212:	bd10      	pop	{r4, pc}
 8002214:	5c8b      	ldrb	r3, [r1, r2]
 8002216:	5483      	strb	r3, [r0, r2]
 8002218:	e7f9      	b.n	800220e <memmove+0x1a>
	...

0800221c <_sbrk_r>:
 800221c:	2300      	movs	r3, #0
 800221e:	b570      	push	{r4, r5, r6, lr}
 8002220:	4d06      	ldr	r5, [pc, #24]	@ (800223c <_sbrk_r+0x20>)
 8002222:	0004      	movs	r4, r0
 8002224:	0008      	movs	r0, r1
 8002226:	602b      	str	r3, [r5, #0]
 8002228:	f7fe fc06 	bl	8000a38 <_sbrk>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d103      	bne.n	8002238 <_sbrk_r+0x1c>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d000      	beq.n	8002238 <_sbrk_r+0x1c>
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	bd70      	pop	{r4, r5, r6, pc}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	200001bc 	.word	0x200001bc

08002240 <memchr>:
 8002240:	b2c9      	uxtb	r1, r1
 8002242:	1882      	adds	r2, r0, r2
 8002244:	4290      	cmp	r0, r2
 8002246:	d101      	bne.n	800224c <memchr+0xc>
 8002248:	2000      	movs	r0, #0
 800224a:	4770      	bx	lr
 800224c:	7803      	ldrb	r3, [r0, #0]
 800224e:	428b      	cmp	r3, r1
 8002250:	d0fb      	beq.n	800224a <memchr+0xa>
 8002252:	3001      	adds	r0, #1
 8002254:	e7f6      	b.n	8002244 <memchr+0x4>

08002256 <memcpy>:
 8002256:	2300      	movs	r3, #0
 8002258:	b510      	push	{r4, lr}
 800225a:	429a      	cmp	r2, r3
 800225c:	d100      	bne.n	8002260 <memcpy+0xa>
 800225e:	bd10      	pop	{r4, pc}
 8002260:	5ccc      	ldrb	r4, [r1, r3]
 8002262:	54c4      	strb	r4, [r0, r3]
 8002264:	3301      	adds	r3, #1
 8002266:	e7f8      	b.n	800225a <memcpy+0x4>

08002268 <_realloc_r>:
 8002268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800226a:	0006      	movs	r6, r0
 800226c:	000c      	movs	r4, r1
 800226e:	0015      	movs	r5, r2
 8002270:	2900      	cmp	r1, #0
 8002272:	d105      	bne.n	8002280 <_realloc_r+0x18>
 8002274:	0011      	movs	r1, r2
 8002276:	f7ff fc51 	bl	8001b1c <_malloc_r>
 800227a:	0004      	movs	r4, r0
 800227c:	0020      	movs	r0, r4
 800227e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002280:	2a00      	cmp	r2, #0
 8002282:	d103      	bne.n	800228c <_realloc_r+0x24>
 8002284:	f7ff fbde 	bl	8001a44 <_free_r>
 8002288:	2400      	movs	r4, #0
 800228a:	e7f7      	b.n	800227c <_realloc_r+0x14>
 800228c:	f000 f81b 	bl	80022c6 <_malloc_usable_size_r>
 8002290:	0007      	movs	r7, r0
 8002292:	4285      	cmp	r5, r0
 8002294:	d802      	bhi.n	800229c <_realloc_r+0x34>
 8002296:	0843      	lsrs	r3, r0, #1
 8002298:	42ab      	cmp	r3, r5
 800229a:	d3ef      	bcc.n	800227c <_realloc_r+0x14>
 800229c:	0029      	movs	r1, r5
 800229e:	0030      	movs	r0, r6
 80022a0:	f7ff fc3c 	bl	8001b1c <_malloc_r>
 80022a4:	9001      	str	r0, [sp, #4]
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d0ee      	beq.n	8002288 <_realloc_r+0x20>
 80022aa:	002a      	movs	r2, r5
 80022ac:	42bd      	cmp	r5, r7
 80022ae:	d900      	bls.n	80022b2 <_realloc_r+0x4a>
 80022b0:	003a      	movs	r2, r7
 80022b2:	0021      	movs	r1, r4
 80022b4:	9801      	ldr	r0, [sp, #4]
 80022b6:	f7ff ffce 	bl	8002256 <memcpy>
 80022ba:	0021      	movs	r1, r4
 80022bc:	0030      	movs	r0, r6
 80022be:	f7ff fbc1 	bl	8001a44 <_free_r>
 80022c2:	9c01      	ldr	r4, [sp, #4]
 80022c4:	e7da      	b.n	800227c <_realloc_r+0x14>

080022c6 <_malloc_usable_size_r>:
 80022c6:	1f0b      	subs	r3, r1, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1f18      	subs	r0, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da01      	bge.n	80022d4 <_malloc_usable_size_r+0xe>
 80022d0:	580b      	ldr	r3, [r1, r0]
 80022d2:	18c0      	adds	r0, r0, r3
 80022d4:	4770      	bx	lr
	...

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
