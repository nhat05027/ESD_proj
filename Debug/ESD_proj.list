
ESD_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001c6c  08001c6c  00002c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf8  08001cf8  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf8  08001cf8  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf8  08001cf8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00002cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00002cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001d00  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001d5c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001d5c  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ffb  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010f7  00000000  00000000  0000607f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00007178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00007560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f10b  00000000  00000000  00007827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cb2  00000000  00000000  00016932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000576ca  00000000  00000000  0001c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f18  00000000  00000000  00073cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00074c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c54 	.word	0x08001c54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08001c54 	.word	0x08001c54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b08b      	sub	sp, #44	@ 0x2c
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
 800023c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800023e:	2110      	movs	r1, #16
 8000240:	187b      	adds	r3, r7, r1
 8000242:	2244      	movs	r2, #68	@ 0x44
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 800024a:	187b      	adds	r3, r7, r1
 800024c:	2240      	movs	r2, #64	@ 0x40
 800024e:	18ba      	adds	r2, r7, r2
 8000250:	8812      	ldrh	r2, [r2, #0]
 8000252:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 8000254:	187b      	adds	r3, r7, r1
 8000256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000258:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 800025a:	187a      	adds	r2, r7, r1
 800025c:	2338      	movs	r3, #56	@ 0x38
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 8000264:	000c      	movs	r4, r1
 8000266:	193b      	adds	r3, r7, r4
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	f000 f80a 	bl	8000294 <Lcd_init>

	return lcd;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	193a      	adds	r2, r7, r4
 8000284:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000286:	c313      	stmia	r3!, {r0, r1, r4}
 8000288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028a:	c313      	stmia	r3!, {r0, r1, r4}
}
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	46bd      	mov	sp, r7
 8000290:	b00b      	add	sp, #44	@ 0x2c
 8000292:	bd90      	pop	{r4, r7, pc}

08000294 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7d9b      	ldrb	r3, [r3, #22]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d10f      	bne.n	80002c4 <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2133      	movs	r1, #51	@ 0x33
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 f87c 	bl	80003a6 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2132      	movs	r1, #50	@ 0x32
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 f877 	bl	80003a6 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2128      	movs	r1, #40	@ 0x28
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f872 	bl	80003a6 <lcd_write_command>
 80002c2:	e004      	b.n	80002ce <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2138      	movs	r1, #56	@ 0x38
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 f86c 	bl	80003a6 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2101      	movs	r1, #1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 f867 	bl	80003a6 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	210c      	movs	r1, #12
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 f862 	bl	80003a6 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2106      	movs	r1, #6
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 f85d 	bl	80003a6 <lcd_write_command>
}
 80002ec:	46c0      	nop			@ (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
 8000306:	e00f      	b.n	8000328 <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 8000308:	240f      	movs	r4, #15
 800030a:	193b      	adds	r3, r7, r4
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0011      	movs	r1, r2
 8000318:	0018      	movs	r0, r3
 800031a:	f000 f876 	bl	800040a <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800031e:	193b      	adds	r3, r7, r4
 8000320:	781a      	ldrb	r2, [r3, #0]
 8000322:	193b      	adds	r3, r7, r4
 8000324:	3201      	adds	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	230f      	movs	r3, #15
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	781c      	ldrb	r4, [r3, #0]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff fee9 	bl	8000108 <strlen>
 8000336:	0003      	movs	r3, r0
 8000338:	429c      	cmp	r4, r3
 800033a:	d3e5      	bcc.n	8000308 <Lcd_string+0x14>
	}
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b005      	add	sp, #20
 8000344:	bd90      	pop	{r4, r7, pc}
	...

08000348 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	0008      	movs	r0, r1
 8000352:	0011      	movs	r1, r2
 8000354:	1cfb      	adds	r3, r7, #3
 8000356:	1c02      	adds	r2, r0, #0
 8000358:	701a      	strb	r2, [r3, #0]
 800035a:	1cbb      	adds	r3, r7, #2
 800035c:	1c0a      	adds	r2, r1, #0
 800035e:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000360:	1cfb      	adds	r3, r7, #3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <Lcd_cursor+0x40>)
 8000366:	5cd2      	ldrb	r2, [r2, r3]
 8000368:	1cbb      	adds	r3, r7, #2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	18d3      	adds	r3, r2, r3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	3b80      	subs	r3, #128	@ 0x80
 8000372:	b2da      	uxtb	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	0011      	movs	r1, r2
 8000378:	0018      	movs	r0, r3
 800037a:	f000 f814 	bl	80003a6 <lcd_write_command>
	#endif
}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	08001c84 	.word	0x08001c84

0800038c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2101      	movs	r1, #1
 8000398:	0018      	movs	r0, r3
 800039a:	f000 f804 	bl	80003a6 <lcd_write_command>
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	000a      	movs	r2, r1
 80003b0:	1cfb      	adds	r3, r7, #3
 80003b2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6898      	ldr	r0, [r3, #8]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	899b      	ldrh	r3, [r3, #12]
 80003bc:	2200      	movs	r2, #0
 80003be:	0019      	movs	r1, r3
 80003c0:	f000 feb9 	bl	8001136 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7d9b      	ldrb	r3, [r3, #22]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d113      	bne.n	80003f4 <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003cc:	1cfb      	adds	r3, r7, #3
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	b2d9      	uxtb	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2204      	movs	r2, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 f848 	bl	800046e <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80003de:	1cfb      	adds	r3, r7, #3
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	220f      	movs	r2, #15
 80003e4:	4013      	ands	r3, r2
 80003e6:	b2d9      	uxtb	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2204      	movs	r2, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 f83e 	bl	800046e <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80003f2:	e006      	b.n	8000402 <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 80003f4:	1cfb      	adds	r3, r7, #3
 80003f6:	7819      	ldrb	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2208      	movs	r2, #8
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 f836 	bl	800046e <lcd_write>
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}

0800040a <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	000a      	movs	r2, r1
 8000414:	1cfb      	adds	r3, r7, #3
 8000416:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	6898      	ldr	r0, [r3, #8]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	899b      	ldrh	r3, [r3, #12]
 8000420:	2201      	movs	r2, #1
 8000422:	0019      	movs	r1, r3
 8000424:	f000 fe87 	bl	8001136 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7d9b      	ldrb	r3, [r3, #22]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d113      	bne.n	8000458 <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000430:	1cfb      	adds	r3, r7, #3
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	091b      	lsrs	r3, r3, #4
 8000436:	b2d9      	uxtb	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2204      	movs	r2, #4
 800043c:	0018      	movs	r0, r3
 800043e:	f000 f816 	bl	800046e <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	220f      	movs	r2, #15
 8000448:	4013      	ands	r3, r2
 800044a:	b2d9      	uxtb	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2204      	movs	r2, #4
 8000450:	0018      	movs	r0, r3
 8000452:	f000 f80c 	bl	800046e <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000456:	e006      	b.n	8000466 <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 8000458:	1cfb      	adds	r3, r7, #3
 800045a:	7819      	ldrb	r1, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2208      	movs	r2, #8
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f804 	bl	800046e <lcd_write>
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}

0800046e <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800046e:	b590      	push	{r4, r7, lr}
 8000470:	b085      	sub	sp, #20
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	0008      	movs	r0, r1
 8000478:	0011      	movs	r1, r2
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	1c02      	adds	r2, r0, #0
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	1cbb      	adds	r3, r7, #2
 8000482:	1c0a      	adds	r2, r1, #0
 8000484:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 8000486:	230f      	movs	r3, #15
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	e020      	b.n	80004d2 <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	240f      	movs	r4, #15
 8000496:	193b      	adds	r3, r7, r4
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	18d3      	adds	r3, r2, r3
 800049e:	6818      	ldr	r0, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	8819      	ldrh	r1, [r3, #0]
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	411a      	asrs	r2, r3
 80004b8:	0013      	movs	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2201      	movs	r2, #1
 80004be:	4013      	ands	r3, r2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	001a      	movs	r2, r3
 80004c4:	f000 fe37 	bl	8001136 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	3201      	adds	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	230f      	movs	r3, #15
 80004d4:	18fa      	adds	r2, r7, r3
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d3d7      	bcc.n	8000490 <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6918      	ldr	r0, [r3, #16]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	8a9b      	ldrh	r3, [r3, #20]
 80004e8:	2201      	movs	r2, #1
 80004ea:	0019      	movs	r1, r3
 80004ec:	f000 fe23 	bl	8001136 <HAL_GPIO_WritePin>
	DELAY(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fbbb 	bl	8000c6c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6918      	ldr	r0, [r3, #16]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	8a9b      	ldrh	r3, [r3, #20]
 80004fe:	2200      	movs	r2, #0
 8000500:	0019      	movs	r1, r3
 8000502:	f000 fe18 	bl	8001136 <HAL_GPIO_WritePin>
}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b005      	add	sp, #20
 800050c:	bd90      	pop	{r4, r7, pc}
	...

08000510 <selectRow>:
};
uint8_t key_current=0;
uint8_t key_prev=0;

void selectRow(uint8_t row)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	701a      	strb	r2, [r3, #0]
	switch (row){
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b07      	cmp	r3, #7
 8000522:	d900      	bls.n	8000526 <selectRow+0x16>
 8000524:	e0ac      	b.n	8000680 <selectRow+0x170>
 8000526:	009a      	lsls	r2, r3, #2
 8000528:	4b57      	ldr	r3, [pc, #348]	@ (8000688 <selectRow+0x178>)
 800052a:	18d3      	adds	r3, r2, r3
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	469f      	mov	pc, r3
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000530:	4b56      	ldr	r3, [pc, #344]	@ (800068c <selectRow+0x17c>)
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fdfd 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800053c:	2390      	movs	r3, #144	@ 0x90
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2200      	movs	r2, #0
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fdf6 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800054a:	2390      	movs	r3, #144	@ 0x90
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fdef 	bl	8001136 <HAL_GPIO_WritePin>
	break;
 8000558:	e092      	b.n	8000680 <selectRow+0x170>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800055a:	4b4c      	ldr	r3, [pc, #304]	@ (800068c <selectRow+0x17c>)
 800055c:	2200      	movs	r2, #0
 800055e:	2102      	movs	r1, #2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fde8 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000566:	2390      	movs	r3, #144	@ 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2201      	movs	r2, #1
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fde1 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000574:	2390      	movs	r3, #144	@ 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2200      	movs	r2, #0
 800057a:	2140      	movs	r1, #64	@ 0x40
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fdda 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 8000582:	e07d      	b.n	8000680 <selectRow+0x170>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000584:	4b41      	ldr	r3, [pc, #260]	@ (800068c <selectRow+0x17c>)
 8000586:	2200      	movs	r2, #0
 8000588:	2102      	movs	r1, #2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fdd3 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000590:	2390      	movs	r3, #144	@ 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	@ 0x80
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fdcc 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800059e:	2390      	movs	r3, #144	@ 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2201      	movs	r2, #1
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fdc5 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 80005ac:	e068      	b.n	8000680 <selectRow+0x170>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80005ae:	4b37      	ldr	r3, [pc, #220]	@ (800068c <selectRow+0x17c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fdbe 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80005ba:	2390      	movs	r3, #144	@ 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2201      	movs	r2, #1
 80005c0:	2180      	movs	r1, #128	@ 0x80
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fdb7 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80005c8:	2390      	movs	r3, #144	@ 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	@ 0x40
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fdb0 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 80005d6:	e053      	b.n	8000680 <selectRow+0x170>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80005d8:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <selectRow+0x17c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	2102      	movs	r1, #2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fda9 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80005e4:	2390      	movs	r3, #144	@ 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2200      	movs	r2, #0
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fda2 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80005f2:	2390      	movs	r3, #144	@ 0x90
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	2200      	movs	r2, #0
 80005f8:	2140      	movs	r1, #64	@ 0x40
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fd9b 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 8000600:	e03e      	b.n	8000680 <selectRow+0x170>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <selectRow+0x17c>)
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fd94 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800060e:	2390      	movs	r3, #144	@ 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2201      	movs	r2, #1
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fd8d 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800061c:	2390      	movs	r3, #144	@ 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	@ 0x40
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fd86 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 800062a:	e029      	b.n	8000680 <selectRow+0x170>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <selectRow+0x17c>)
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fd7f 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000638:	2390      	movs	r3, #144	@ 0x90
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fd78 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000646:	2390      	movs	r3, #144	@ 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fd71 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 8000654:	e014      	b.n	8000680 <selectRow+0x170>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <selectRow+0x17c>)
 8000658:	2201      	movs	r2, #1
 800065a:	2102      	movs	r1, #2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fd6a 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000662:	2390      	movs	r3, #144	@ 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fd63 	bl	8001136 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000670:	2390      	movs	r3, #144	@ 0x90
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fd5c 	bl	8001136 <HAL_GPIO_WritePin>
		break;
 800067e:	46c0      	nop			@ (mov r8, r8)
	}
};
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08001c98 	.word	0x08001c98
 800068c:	48000400 	.word	0x48000400

08000690 <Keypad_Getkey>:

uint8_t row;
uint8_t col;
uint8_t Keypad_Getkey()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	for (row=0 ; row<8 ; row ++)
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <Keypad_Getkey+0xb4>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e04a      	b.n	8000732 <Keypad_Getkey+0xa2>
	{
		selectRow(row);
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <Keypad_Getkey+0xb4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff35 	bl	8000510 <selectRow>
		HAL_Delay(2);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 fae0 	bl	8000c6c <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	00da      	lsls	r2, r3, #3
 80006b0:	2390      	movs	r3, #144	@ 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fd20 	bl	80010fc <HAL_GPIO_ReadPin>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d113      	bne.n	80006e8 <Keypad_Getkey+0x58>
			{
				HAL_Delay(50);
 80006c0:	2032      	movs	r0, #50	@ 0x32
 80006c2:	f000 fad3 	bl	8000c6c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	00da      	lsls	r2, r3, #3
 80006ca:	2390      	movs	r3, #144	@ 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fd13 	bl	80010fc <HAL_GPIO_ReadPin>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d125      	bne.n	8000726 <Keypad_Getkey+0x96>
					return key_code[row][0];
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <Keypad_Getkey+0xb4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	001a      	movs	r2, r3
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <Keypad_Getkey+0xb8>)
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	e029      	b.n	800073c <Keypad_Getkey+0xac>
				}
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	009a      	lsls	r2, r3, #2
 80006ec:	2390      	movs	r3, #144	@ 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fd02 	bl	80010fc <HAL_GPIO_ReadPin>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d114      	bne.n	8000726 <Keypad_Getkey+0x96>
			{
				HAL_Delay(50);
 80006fc:	2032      	movs	r0, #50	@ 0x32
 80006fe:	f000 fab5 	bl	8000c6c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	009a      	lsls	r2, r3, #2
 8000706:	2390      	movs	r3, #144	@ 0x90
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fcf5 	bl	80010fc <HAL_GPIO_ReadPin>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d107      	bne.n	8000726 <Keypad_Getkey+0x96>
					return key_code[row][1];
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <Keypad_Getkey+0xb4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <Keypad_Getkey+0xb8>)
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	18d3      	adds	r3, r2, r3
 8000720:	3301      	adds	r3, #1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	e00a      	b.n	800073c <Keypad_Getkey+0xac>
	for (row=0 ; row<8 ; row ++)
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <Keypad_Getkey+0xb4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <Keypad_Getkey+0xb4>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <Keypad_Getkey+0xb4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d9b0      	bls.n	800069c <Keypad_Getkey+0xc>
				}
			}
	}
	return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	2000007a 	.word	0x2000007a
 8000748:	08001c88 	.word	0x08001c88

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	b09f      	sub	sp, #124	@ 0x7c
 8000750:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fa27 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f8ad 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f8f5 	bl	8000948 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 800075e:	264c      	movs	r6, #76	@ 0x4c
 8000760:	19bb      	adds	r3, r7, r6
 8000762:	4a4f      	ldr	r2, [pc, #316]	@ (80008a0 <main+0x154>)
 8000764:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000766:	c313      	stmia	r3!, {r0, r1, r4}
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	601a      	str	r2, [r3, #0]
  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 800076c:	2344      	movs	r3, #68	@ 0x44
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	4a4c      	ldr	r2, [pc, #304]	@ (80008a4 <main+0x158>)
 8000772:	ca03      	ldmia	r2!, {r0, r1}
 8000774:	c303      	stmia	r3!, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_RS_Pin, GPIOA, LCD_E_Pin, LCD_4_BIT_MODE);
 8000776:	222c      	movs	r2, #44	@ 0x2c
 8000778:	18bd      	adds	r5, r7, r2
 800077a:	0038      	movs	r0, r7
 800077c:	2390      	movs	r3, #144	@ 0x90
 800077e:	05dc      	lsls	r4, r3, #23
 8000780:	2344      	movs	r3, #68	@ 0x44
 8000782:	18fa      	adds	r2, r7, r3
 8000784:	19b9      	adds	r1, r7, r6
 8000786:	2300      	movs	r3, #0
 8000788:	9303      	str	r3, [sp, #12]
 800078a:	2302      	movs	r3, #2
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2390      	movs	r3, #144	@ 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	2301      	movs	r3, #1
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	0023      	movs	r3, r4
 800079a:	f7ff fd49 	bl	8000230 <Lcd_create>
 800079e:	003a      	movs	r2, r7
 80007a0:	002b      	movs	r3, r5
 80007a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a4:	c313      	stmia	r3!, {r0, r1, r4}
 80007a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a8:	c313      	stmia	r3!, {r0, r1, r4}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cursor_cnt = 0;
 80007aa:	2367      	movs	r3, #103	@ 0x67
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
  uint8_t lcd_zero = 0;
 80007b2:	2366      	movs	r3, #102	@ 0x66
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
  char s;
  char *lcd_buffer=(char*) malloc(200+1);
 80007ba:	20c9      	movs	r0, #201	@ 0xc9
 80007bc:	f001 f93e 	bl	8001a3c <malloc>
 80007c0:	0003      	movs	r3, r0
 80007c2:	663b      	str	r3, [r7, #96]	@ 0x60
  while (1)
  {
    /* USER CODE END WHILE */
	  key_current = Keypad_Getkey();
 80007c4:	f7ff ff64 	bl	8000690 <Keypad_Getkey>
 80007c8:	0003      	movs	r3, r0
 80007ca:	001a      	movs	r2, r3
 80007cc:	4b36      	ldr	r3, [pc, #216]	@ (80008a8 <main+0x15c>)
 80007ce:	701a      	strb	r2, [r3, #0]
	  if(key_current != 0 && key_current != key_prev) {
 80007d0:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <main+0x15c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d05d      	beq.n	8000894 <main+0x148>
 80007d8:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <main+0x15c>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <main+0x160>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d057      	beq.n	8000894 <main+0x148>
		  s = keypad_layout[key_current-1];
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <main+0x15c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	205f      	movs	r0, #95	@ 0x5f
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	4930      	ldr	r1, [pc, #192]	@ (80008b0 <main+0x164>)
 80007f0:	5c8a      	ldrb	r2, [r1, r2]
 80007f2:	701a      	strb	r2, [r3, #0]

		  lcd_buffer[cursor_cnt] = s;
 80007f4:	2167      	movs	r1, #103	@ 0x67
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	183a      	adds	r2, r7, r0
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	701a      	strb	r2, [r3, #0]

		  cursor_cnt ++;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	187b      	adds	r3, r7, r1
 800080a:	3201      	adds	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		  if (cursor_cnt>16){
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b10      	cmp	r3, #16
 8000814:	d906      	bls.n	8000824 <main+0xd8>
			  lcd_zero = cursor_cnt-16;
 8000816:	2366      	movs	r3, #102	@ 0x66
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	187a      	adds	r2, r7, r1
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	3a10      	subs	r2, #16
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e003      	b.n	800082c <main+0xe0>
		  }
		  else lcd_zero = 0;
 8000824:	2366      	movs	r3, #102	@ 0x66
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
		  char subbuff[17];
		  memcpy( subbuff, &lcd_buffer[lcd_zero], 16 );
 800082c:	2366      	movs	r3, #102	@ 0x66
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000834:	18d1      	adds	r1, r2, r3
 8000836:	2418      	movs	r4, #24
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2210      	movs	r2, #16
 800083c:	0018      	movs	r0, r3
 800083e:	f001 f9ff 	bl	8001c40 <memcpy>
		  subbuff[16] = '\0';
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	741a      	strb	r2, [r3, #16]
		  Lcd_cursor(&lcd, 0, 0);
 8000848:	252c      	movs	r5, #44	@ 0x2c
 800084a:	197b      	adds	r3, r7, r5
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fd79 	bl	8000348 <Lcd_cursor>
		  Lcd_string(&lcd, subbuff);
 8000856:	193a      	adds	r2, r7, r4
 8000858:	002c      	movs	r4, r5
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fd48 	bl	80002f4 <Lcd_string>

		  if (s == keypad_layout[12]) {
 8000864:	2273      	movs	r2, #115	@ 0x73
 8000866:	235f      	movs	r3, #95	@ 0x5f
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4293      	cmp	r3, r2
 800086e:	d111      	bne.n	8000894 <main+0x148>
			  Lcd_clear(&lcd);
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fd8a 	bl	800038c <Lcd_clear>
			  cursor_cnt = 0;
 8000878:	2367      	movs	r3, #103	@ 0x67
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			  memset(lcd_buffer,0,strlen(lcd_buffer));
 8000880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fc40 	bl	8000108 <strlen>
 8000888:	0002      	movs	r2, r0
 800088a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800088c:	2100      	movs	r1, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f001 f990 	bl	8001bb4 <memset>
		  }
	  }
	  key_prev = key_current;
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <main+0x15c>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <main+0x160>)
 800089a:	701a      	strb	r2, [r3, #0]
	  key_current = Keypad_Getkey();
 800089c:	e792      	b.n	80007c4 <main+0x78>
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	08001c6c 	.word	0x08001c6c
 80008a4:	08001c7c 	.word	0x08001c7c
 80008a8:	20000078 	.word	0x20000078
 80008ac:	20000079 	.word	0x20000079
 80008b0:	08001cb8 	.word	0x08001cb8

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b091      	sub	sp, #68	@ 0x44
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	2410      	movs	r4, #16
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	0018      	movs	r0, r3
 80008c0:	2330      	movs	r3, #48	@ 0x30
 80008c2:	001a      	movs	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	f001 f975 	bl	8001bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ca:	003b      	movs	r3, r7
 80008cc:	0018      	movs	r0, r3
 80008ce:	2310      	movs	r3, #16
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f001 f96e 	bl	8001bb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	0021      	movs	r1, r4
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2201      	movs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2280      	movs	r2, #128	@ 0x80
 80008f0:	0252      	lsls	r2, r2, #9
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	187b      	adds	r3, r7, r1
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fc34 	bl	8001170 <HAL_RCC_OscConfig>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800090c:	f000 f89e 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	003b      	movs	r3, r7
 8000912:	2207      	movs	r2, #7
 8000914:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	003b      	movs	r3, r7
 8000918:	2202      	movs	r2, #2
 800091a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	003b      	movs	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	003b      	movs	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000928:	003b      	movs	r3, r7
 800092a:	2100      	movs	r1, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f000 ff39 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000936:	f000 f889 	bl	8000a4c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800093a:	f001 f801 	bl	8001940 <HAL_RCC_EnableCSS>
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b011      	add	sp, #68	@ 0x44
 8000944:	bd90      	pop	{r4, r7, pc}
	...

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	240c      	movs	r4, #12
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f001 f92b 	bl	8001bb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b38      	ldr	r3, [pc, #224]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	03c9      	lsls	r1, r1, #15
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b32      	ldr	r3, [pc, #200]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	02c9      	lsls	r1, r1, #11
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	02db      	lsls	r3, r3, #11
 80009ac:	4013      	ands	r3, r2
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80009b2:	2390      	movs	r3, #144	@ 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2200      	movs	r2, #0
 80009b8:	21ff      	movs	r1, #255	@ 0xff
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fbbb 	bl	8001136 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_GPIO_Init+0x100>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2102      	movs	r1, #2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fbb5 	bl	8001136 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	22ff      	movs	r2, #255	@ 0xff
 80009d0:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin|R2_Pin|R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	2390      	movs	r3, #144	@ 0x90
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fa15 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : R0_Pin */
  GPIO_InitStruct.Pin = R0_Pin;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2202      	movs	r2, #2
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R0_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <MX_GPIO_Init+0x100>)
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f000 fa03 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000a16:	0021      	movs	r1, r4
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	22c0      	movs	r2, #192	@ 0xc0
 8000a1c:	00d2      	lsls	r2, r2, #3
 8000a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2201      	movs	r2, #1
 8000a2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	2390      	movs	r3, #144	@ 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f9f1 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b009      	add	sp, #36	@ 0x24
 8000a40:	bd90      	pop	{r4, r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	619a      	str	r2, [r3, #24]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0549      	lsls	r1, r1, #21
 8000a80:	430a      	orrs	r2, r1
 8000a82:	61da      	str	r2, [r3, #28]
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000aa4:	f000 ffb0 	bl	8001a08 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x8>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8b2 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f001 f86e 	bl	8001be8 <__errno>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	425b      	negs	r3, r3
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	18d2      	adds	r2, r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <_sbrk+0x64>)
 8000b28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b006      	add	sp, #24
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20001000 	.word	0x20001000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	200001d0 	.word	0x200001d0

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff fff6 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f001 f839 	bl	8001bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff fde3 	bl	800074c <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b94:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 8000b98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b9c:	200001cc 	.word	0x200001cc

08000ba0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <HAL_Init+0x24>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_Init+0x24>)
 8000bae:	2110      	movs	r1, #16
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f809 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bba:	f7ff ff4d 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_InitTick+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	@ 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff fa99 	bl	8000118 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa94 	bl	8000118 <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f905 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e00f      	b.n	8000c20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d80b      	bhi.n	8000c1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f8e2 	bl	8000dd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_InitTick+0x64>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b003      	add	sp, #12
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000080 	.word	0x20000080

08000c58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	@ (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000080 	.word	0x20000080

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	189b      	adds	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	0002      	movs	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc8:	d828      	bhi.n	8000d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cca:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	33c0      	adds	r3, #192	@ 0xc0
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	589b      	ldr	r3, [r3, r2]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	430a      	orrs	r2, r1
 8000d14:	33c0      	adds	r3, #192	@ 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d1a:	e031      	b.n	8000d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0019      	movs	r1, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	400b      	ands	r3, r1
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3306      	adds	r3, #6
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	3304      	adds	r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1dfa      	adds	r2, r7, #7
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	400a      	ands	r2, r1
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	21ff      	movs	r1, #255	@ 0xff
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	019b      	lsls	r3, r3, #6
 8000d52:	22ff      	movs	r2, #255	@ 0xff
 8000d54:	401a      	ands	r2, r3
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	4003      	ands	r3, r0
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	4023      	ands	r3, r4
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	3306      	adds	r3, #6
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	18c3      	adds	r3, r0, r3
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b003      	add	sp, #12
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	045b      	lsls	r3, r3, #17
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d301      	bcc.n	8000da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da4:	2301      	movs	r3, #1
 8000da6:	e010      	b.n	8000dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <SysTick_Config+0x44>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	3a01      	subs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2103      	movs	r1, #3
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ff7c 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	210f      	movs	r1, #15
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ffbf 	bl	8000d90 <SysTick_Config>
 8000e12:	0003      	movs	r3, r0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e14f      	b.n	80010cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x28>
 8000e42:	e140      	b.n	80010c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	0013      	movs	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	58d3      	ldr	r3, [r2, r3]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2207      	movs	r2, #7
 8000f18:	4013      	ands	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2107      	movs	r1, #7
 8000f32:	400b      	ands	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	6939      	ldr	r1, [r7, #16]
 8000f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	23c0      	movs	r3, #192	@ 0xc0
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d100      	bne.n	8000f90 <HAL_GPIO_Init+0x174>
 8000f8e:	e09a      	b.n	80010c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b54      	ldr	r3, [pc, #336]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	4b53      	ldr	r3, [pc, #332]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	4b51      	ldr	r3, [pc, #324]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	589b      	ldr	r3, [r3, r2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	4013      	ands	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	2390      	movs	r3, #144	@ 0x90
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a44      	ldr	r2, [pc, #272]	@ (80010ec <HAL_GPIO_Init+0x2d0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1de>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a43      	ldr	r2, [pc, #268]	@ (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1da>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a42      	ldr	r2, [pc, #264]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1d6>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x1e4>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x1e4>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x1e4>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x1e4>
 8000ffe:	2300      	movs	r3, #0
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	2103      	movs	r1, #3
 8001004:	400a      	ands	r2, r1
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001010:	4935      	ldr	r1, [pc, #212]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	035b      	lsls	r3, r3, #13
 8001036:	4013      	ands	r3, r2
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	039b      	lsls	r3, r3, #14
 8001060:	4013      	ands	r3, r2
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	4013      	ands	r3, r2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	40da      	lsrs	r2, r3
 80010d4:	1e13      	subs	r3, r2, #0
 80010d6:	d000      	beq.n	80010da <HAL_GPIO_Init+0x2be>
 80010d8:	e6a8      	b.n	8000e2c <HAL_GPIO_Init+0x10>
  } 
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000a      	movs	r2, r1
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	1cba      	adds	r2, r7, #2
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	4013      	ands	r3, r2
 8001114:	d004      	beq.n	8001120 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001116:	230f      	movs	r3, #15
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e003      	b.n	8001128 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001120:	230f      	movs	r3, #15
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781b      	ldrb	r3, [r3, #0]
  }
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	0008      	movs	r0, r1
 8001140:	0011      	movs	r1, r2
 8001142:	1cbb      	adds	r3, r7, #2
 8001144:	1c02      	adds	r2, r0, #0
 8001146:	801a      	strh	r2, [r3, #0]
 8001148:	1c7b      	adds	r3, r7, #1
 800114a:	1c0a      	adds	r2, r1, #0
 800114c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114e:	1c7b      	adds	r3, r7, #1
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800115e:	e003      	b.n	8001168 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e301      	b.n	8001786 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x1e>
 800118c:	e08d      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118e:	4bc3      	ldr	r3, [pc, #780]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	220c      	movs	r2, #12
 8001194:	4013      	ands	r3, r2
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00e      	beq.n	80011b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119a:	4bc0      	ldr	r3, [pc, #768]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	220c      	movs	r2, #12
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
 80011a6:	4bbd      	ldr	r3, [pc, #756]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	401a      	ands	r2, r3
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	025b      	lsls	r3, r3, #9
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4bb8      	ldr	r3, [pc, #736]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x56>
 80011c4:	e070      	b.n	80012a8 <HAL_RCC_OscConfig+0x138>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d000      	beq.n	80011d0 <HAL_RCC_OscConfig+0x60>
 80011ce:	e06b      	b.n	80012a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e2d8      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d107      	bne.n	80011ec <HAL_RCC_OscConfig+0x7c>
 80011dc:	4baf      	ldr	r3, [pc, #700]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4bae      	ldr	r3, [pc, #696]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	0249      	lsls	r1, r1, #9
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e02f      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10c      	bne.n	800120e <HAL_RCC_OscConfig+0x9e>
 80011f4:	4ba9      	ldr	r3, [pc, #676]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4ba8      	ldr	r3, [pc, #672]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80011fa:	49a9      	ldr	r1, [pc, #676]	@ (80014a0 <HAL_RCC_OscConfig+0x330>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4ba6      	ldr	r3, [pc, #664]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4ba5      	ldr	r3, [pc, #660]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001206:	49a7      	ldr	r1, [pc, #668]	@ (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e01e      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b05      	cmp	r3, #5
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0xc4>
 8001216:	4ba1      	ldr	r3, [pc, #644]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4ba0      	ldr	r3, [pc, #640]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	02c9      	lsls	r1, r1, #11
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	4b9d      	ldr	r3, [pc, #628]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b9c      	ldr	r3, [pc, #624]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800122a:	2180      	movs	r1, #128	@ 0x80
 800122c:	0249      	lsls	r1, r1, #9
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xdc>
 8001234:	4b99      	ldr	r3, [pc, #612]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b98      	ldr	r3, [pc, #608]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800123a:	4999      	ldr	r1, [pc, #612]	@ (80014a0 <HAL_RCC_OscConfig+0x330>)
 800123c:	400a      	ands	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	4b96      	ldr	r3, [pc, #600]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b95      	ldr	r3, [pc, #596]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001246:	4997      	ldr	r1, [pc, #604]	@ (80014a4 <HAL_RCC_OscConfig+0x334>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d014      	beq.n	800127e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fd00 	bl	8000c58 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fcfb 	bl	8000c58 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	@ 0x64
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e28a      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	4b8a      	ldr	r3, [pc, #552]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4013      	ands	r3, r2
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0xee>
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fceb 	bl	8000c58 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fce6 	bl	8000c58 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e275      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b80      	ldr	r3, [pc, #512]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	029b      	lsls	r3, r3, #10
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x118>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x146>
 80012b4:	e069      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b6:	4b79      	ldr	r3, [pc, #484]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	220c      	movs	r2, #12
 80012bc:	4013      	ands	r3, r2
 80012be:	d00b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012c0:	4b76      	ldr	r3, [pc, #472]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d11c      	bne.n	8001306 <HAL_RCC_OscConfig+0x196>
 80012cc:	4b73      	ldr	r3, [pc, #460]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	4013      	ands	r3, r2
 80012d6:	d116      	bne.n	8001306 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	4b70      	ldr	r3, [pc, #448]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e24b      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b6b      	ldr	r3, [pc, #428]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	22f8      	movs	r2, #248	@ 0xf8
 80012f4:	4393      	bics	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	00da      	lsls	r2, r3, #3
 80012fe:	4b67      	ldr	r3, [pc, #412]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001304:	e041      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d024      	beq.n	8001358 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b62      	ldr	r3, [pc, #392]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fc9d 	bl	8000c58 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fc98 	bl	8000c58 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e227      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d0f1      	beq.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b56      	ldr	r3, [pc, #344]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	22f8      	movs	r2, #248	@ 0xf8
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00da      	lsls	r2, r3, #3
 8001350:	4b52      	ldr	r3, [pc, #328]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e018      	b.n	800138a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001358:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc78 	bl	8000c58 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc73 	bl	8000c58 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e202      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001380:	4b46      	ldr	r3, [pc, #280]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d1f1      	bne.n	800136e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2208      	movs	r2, #8
 8001390:	4013      	ands	r3, r2
 8001392:	d036      	beq.n	8001402 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d019      	beq.n	80013d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139c:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a0:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc56 	bl	8000c58 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc51 	bl	8000c58 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1e0      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d0f1      	beq.n	80013b2 <HAL_RCC_OscConfig+0x242>
 80013ce:	e018      	b.n	8001402 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d4:	4b31      	ldr	r3, [pc, #196]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc3c 	bl	8000c58 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc37 	bl	8000c58 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1c6      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f1      	bne.n	80013e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2204      	movs	r2, #4
 8001408:	4013      	ands	r3, r2
 800140a:	d100      	bne.n	800140e <HAL_RCC_OscConfig+0x29e>
 800140c:	e0b4      	b.n	8001578 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	201f      	movs	r0, #31
 8001410:	183b      	adds	r3, r7, r0
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	055b      	lsls	r3, r3, #21
 800141e:	4013      	ands	r3, r2
 8001420:	d110      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	0549      	lsls	r1, r1, #21
 800142c:	430a      	orrs	r2, r1
 800142e:	61da      	str	r2, [r3, #28]
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001432:	69da      	ldr	r2, [r3, #28]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	055b      	lsls	r3, r3, #21
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800143e:	183b      	adds	r3, r7, r0
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fbfb 	bl	8000c58 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7ff fbf6 	bl	8000c58 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e185      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_RCC_OscConfig+0x338>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x33c>
 800148e:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4b02      	ldr	r3, [pc, #8]	@ (800149c <HAL_RCC_OscConfig+0x32c>)
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	621a      	str	r2, [r3, #32]
 800149a:	e035      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 800149c:	40021000 	.word	0x40021000
 80014a0:	fffeffff 	.word	0xfffeffff
 80014a4:	fffbffff 	.word	0xfffbffff
 80014a8:	40007000 	.word	0x40007000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x35e>
 80014b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	438a      	bics	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
 80014c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014c2:	6a1a      	ldr	r2, [r3, #32]
 80014c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	621a      	str	r2, [r3, #32]
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x380>
 80014d6:	4bae      	ldr	r3, [pc, #696]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	4bad      	ldr	r3, [pc, #692]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014dc:	2104      	movs	r1, #4
 80014de:	430a      	orrs	r2, r1
 80014e0:	621a      	str	r2, [r3, #32]
 80014e2:	4bab      	ldr	r3, [pc, #684]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4baa      	ldr	r3, [pc, #680]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	621a      	str	r2, [r3, #32]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x398>
 80014f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
 80014fc:	4ba4      	ldr	r3, [pc, #656]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4ba3      	ldr	r3, [pc, #652]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fba2 	bl	8000c58 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e009      	b.n	800152e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb9d 	bl	8000c58 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a9b      	ldr	r2, [pc, #620]	@ (8001794 <HAL_RCC_OscConfig+0x624>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e12b      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b98      	ldr	r3, [pc, #608]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x3aa>
 8001538:	e013      	b.n	8001562 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb8d 	bl	8000c58 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fb88 	bl	8000c58 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a91      	ldr	r2, [pc, #580]	@ (8001794 <HAL_RCC_OscConfig+0x624>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e116      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b8d      	ldr	r3, [pc, #564]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001562:	231f      	movs	r3, #31
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b88      	ldr	r3, [pc, #544]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	4b87      	ldr	r3, [pc, #540]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001572:	4989      	ldr	r1, [pc, #548]	@ (8001798 <HAL_RCC_OscConfig+0x628>)
 8001574:	400a      	ands	r2, r1
 8001576:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	4013      	ands	r3, r2
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d12a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800158a:	4b81      	ldr	r3, [pc, #516]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800158c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158e:	4b80      	ldr	r3, [pc, #512]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001590:	2104      	movs	r1, #4
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001596:	4b7e      	ldr	r3, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800159a:	4b7d      	ldr	r3, [pc, #500]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb59 	bl	8000c58 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ac:	f7ff fb54 	bl	8000c58 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0e3      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015be:	4b74      	ldr	r3, [pc, #464]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c8:	4b71      	ldr	r3, [pc, #452]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015cc:	22f8      	movs	r2, #248	@ 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015de:	e034      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	3305      	adds	r3, #5
 80015e6:	d111      	bne.n	800160c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e8:	4b69      	ldr	r3, [pc, #420]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ec:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f8:	22f8      	movs	r2, #248	@ 0xf8
 80015fa:	4393      	bics	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	00da      	lsls	r2, r3, #3
 8001604:	4b62      	ldr	r3, [pc, #392]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	@ 0x34
 800160a:	e01e      	b.n	800164a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800160c:	4b60      	ldr	r3, [pc, #384]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800160e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001610:	4b5f      	ldr	r3, [pc, #380]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001612:	2104      	movs	r1, #4
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001618:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161c:	4b5c      	ldr	r3, [pc, #368]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fb18 	bl	8000c58 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800162e:	f7ff fb13 	bl	8000c58 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0a2      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001640:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x4e4>
 8001652:	e097      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b08      	cmp	r3, #8
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x4f2>
 8001660:	e06b      	b.n	800173a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d14c      	bne.n	8001704 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b48      	ldr	r3, [pc, #288]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001670:	494a      	ldr	r1, [pc, #296]	@ (800179c <HAL_RCC_OscConfig+0x62c>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff faef 	bl	8000c58 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff faea 	bl	8000c58 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e079      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	220f      	movs	r2, #15
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	4b38      	ldr	r3, [pc, #224]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016b2:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x630>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	0449      	lsls	r1, r1, #17
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fabd 	bl	8000c58 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fab8 	bl	8000c58 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e047      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	049b      	lsls	r3, r3, #18
 80016fe:	4013      	ands	r3, r2
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x574>
 8001702:	e03f      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800170a:	4924      	ldr	r1, [pc, #144]	@ (800179c <HAL_RCC_OscConfig+0x62c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff faa2 	bl	8000c58 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fa9d 	bl	8000c58 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e02c      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	049b      	lsls	r3, r3, #18
 8001734:	4013      	ands	r3, r2
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x5aa>
 8001738:	e024      	b.n	8001784 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e01f      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_RCC_OscConfig+0x620>)
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	429a      	cmp	r2, r3
 8001760:	d10e      	bne.n	8001780 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	220f      	movs	r2, #15
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	23f0      	movs	r3, #240	@ 0xf0
 8001774:	039b      	lsls	r3, r3, #14
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b008      	add	sp, #32
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	00001388 	.word	0x00001388
 8001798:	efffffff 	.word	0xefffffff
 800179c:	feffffff 	.word	0xfeffffff
 80017a0:	ffc2ffff 	.word	0xffc2ffff

080017a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b3      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d911      	bls.n	80017ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b58      	ldr	r3, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e09a      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2204      	movs	r2, #4
 80017fa:	4013      	ands	r3, r2
 80017fc:	d006      	beq.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fe:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001804:	21e0      	movs	r1, #224	@ 0xe0
 8001806:	00c9      	lsls	r1, r1, #3
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	22f0      	movs	r2, #240	@ 0xf0
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d040      	beq.n	80018ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d114      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06e      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d108      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e062      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e05b      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff f9ec 	bl	8000c58 <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001884:	e009      	b.n	800189a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f9e7 	bl	8000c58 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <HAL_RCC_ClockConfig+0x18c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e042      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	220c      	movs	r2, #12
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1ec      	bne.n	8001886 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d211      	bcs.n	80018de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x184>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e020      	b.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	d009      	beq.n	80018fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_RCC_ClockConfig+0x190>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fc:	f000 f82e 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001900:	0001      	movs	r1, r0
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x188>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	220f      	movs	r2, #15
 800190a:	4013      	ands	r3, r2
 800190c:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_RCC_ClockConfig+0x194>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	000a      	movs	r2, r1
 8001912:	40da      	lsrs	r2, r3
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x198>)
 8001916:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001918:	2003      	movs	r0, #3
 800191a:	f7ff f957 	bl	8000bcc <HAL_InitTick>
  
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b004      	add	sp, #16
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	00001388 	.word	0x00001388
 8001934:	fffff8ff 	.word	0xfffff8ff
 8001938:	08001cc8 	.word	0x08001cc8
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <HAL_RCC_EnableCSS+0x18>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_RCC_EnableCSS+0x18>)
 800194a:	2180      	movs	r1, #128	@ 0x80
 800194c:	0309      	lsls	r1, r1, #12
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	220c      	movs	r2, #12
 8001980:	4013      	ands	r3, r2
 8001982:	2b04      	cmp	r3, #4
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x30>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x36>
 800198a:	e02c      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800198e:	613b      	str	r3, [r7, #16]
      break;
 8001990:	e02c      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	220f      	movs	r2, #15
 8001998:	4013      	ands	r3, r2
 800199a:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	220f      	movs	r2, #15
 80019a6:	4013      	ands	r3, r2
 80019a8:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	025b      	lsls	r3, r3, #9
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	4810      	ldr	r0, [pc, #64]	@ (80019fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80019bc:	f7fe fbac 	bl	8000118 <__udivsi3>
 80019c0:	0003      	movs	r3, r0
 80019c2:	001a      	movs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4353      	muls	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e009      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	000a      	movs	r2, r1
 80019d0:	0152      	lsls	r2, r2, #5
 80019d2:	1a52      	subs	r2, r2, r1
 80019d4:	0193      	lsls	r3, r2, #6
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	185b      	adds	r3, r3, r1
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
      break;
 80019e4:	e002      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80019e8:	613b      	str	r3, [r7, #16]
      break;
 80019ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ec:	693b      	ldr	r3, [r7, #16]
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b006      	add	sp, #24
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	08001cd8 	.word	0x08001cd8
 8001a04:	08001ce8 	.word	0x08001ce8

08001a08 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b80      	cmp	r3, #128	@ 0x80
 8001a16:	d104      	bne.n	8001a22 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001a18:	f000 f80a 	bl	8001a30 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_RCC_NMI_IRQHandler+0x24>)
 8001a1e:	2280      	movs	r2, #128	@ 0x80
 8001a20:	701a      	strb	r2, [r3, #0]
  }
}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	4002100a 	.word	0x4002100a

08001a30 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <malloc>:
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <malloc+0x10>)
 8001a40:	0001      	movs	r1, r0
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f000 f826 	bl	8001a94 <_malloc_r>
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <sbrk_aligned>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	4e0f      	ldr	r6, [pc, #60]	@ (8001a90 <sbrk_aligned+0x40>)
 8001a54:	000d      	movs	r5, r1
 8001a56:	6831      	ldr	r1, [r6, #0]
 8001a58:	0004      	movs	r4, r0
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d102      	bne.n	8001a64 <sbrk_aligned+0x14>
 8001a5e:	f000 f8b1 	bl	8001bc4 <_sbrk_r>
 8001a62:	6030      	str	r0, [r6, #0]
 8001a64:	0029      	movs	r1, r5
 8001a66:	0020      	movs	r0, r4
 8001a68:	f000 f8ac 	bl	8001bc4 <_sbrk_r>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d103      	bne.n	8001a78 <sbrk_aligned+0x28>
 8001a70:	2501      	movs	r5, #1
 8001a72:	426d      	negs	r5, r5
 8001a74:	0028      	movs	r0, r5
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	2303      	movs	r3, #3
 8001a7a:	1cc5      	adds	r5, r0, #3
 8001a7c:	439d      	bics	r5, r3
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d0f8      	beq.n	8001a74 <sbrk_aligned+0x24>
 8001a82:	1a29      	subs	r1, r5, r0
 8001a84:	0020      	movs	r0, r4
 8001a86:	f000 f89d 	bl	8001bc4 <_sbrk_r>
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	d1f2      	bne.n	8001a74 <sbrk_aligned+0x24>
 8001a8e:	e7ef      	b.n	8001a70 <sbrk_aligned+0x20>
 8001a90:	20000084 	.word	0x20000084

08001a94 <_malloc_r>:
 8001a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a96:	2203      	movs	r2, #3
 8001a98:	1ccb      	adds	r3, r1, #3
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	0005      	movs	r5, r0
 8001aa0:	001f      	movs	r7, r3
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d234      	bcs.n	8001b10 <_malloc_r+0x7c>
 8001aa6:	270c      	movs	r7, #12
 8001aa8:	42b9      	cmp	r1, r7
 8001aaa:	d833      	bhi.n	8001b14 <_malloc_r+0x80>
 8001aac:	0028      	movs	r0, r5
 8001aae:	f000 f871 	bl	8001b94 <__malloc_lock>
 8001ab2:	4e37      	ldr	r6, [pc, #220]	@ (8001b90 <_malloc_r+0xfc>)
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	001c      	movs	r4, r3
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d12f      	bne.n	8001b1c <_malloc_r+0x88>
 8001abc:	0039      	movs	r1, r7
 8001abe:	0028      	movs	r0, r5
 8001ac0:	f7ff ffc6 	bl	8001a50 <sbrk_aligned>
 8001ac4:	0004      	movs	r4, r0
 8001ac6:	1c43      	adds	r3, r0, #1
 8001ac8:	d15f      	bne.n	8001b8a <_malloc_r+0xf6>
 8001aca:	6834      	ldr	r4, [r6, #0]
 8001acc:	9400      	str	r4, [sp, #0]
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d14a      	bne.n	8001b6a <_malloc_r+0xd6>
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d052      	beq.n	8001b7e <_malloc_r+0xea>
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	0028      	movs	r0, r5
 8001adc:	18e3      	adds	r3, r4, r3
 8001ade:	9900      	ldr	r1, [sp, #0]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	f000 f86f 	bl	8001bc4 <_sbrk_r>
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	4283      	cmp	r3, r0
 8001aea:	d148      	bne.n	8001b7e <_malloc_r+0xea>
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	0028      	movs	r0, r5
 8001af0:	1aff      	subs	r7, r7, r3
 8001af2:	0039      	movs	r1, r7
 8001af4:	f7ff ffac 	bl	8001a50 <sbrk_aligned>
 8001af8:	3001      	adds	r0, #1
 8001afa:	d040      	beq.n	8001b7e <_malloc_r+0xea>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	19db      	adds	r3, r3, r7
 8001b00:	6023      	str	r3, [r4, #0]
 8001b02:	6833      	ldr	r3, [r6, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d133      	bne.n	8001b72 <_malloc_r+0xde>
 8001b0a:	9b00      	ldr	r3, [sp, #0]
 8001b0c:	6033      	str	r3, [r6, #0]
 8001b0e:	e019      	b.n	8001b44 <_malloc_r+0xb0>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dac9      	bge.n	8001aa8 <_malloc_r+0x14>
 8001b14:	230c      	movs	r3, #12
 8001b16:	602b      	str	r3, [r5, #0]
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b1c:	6821      	ldr	r1, [r4, #0]
 8001b1e:	1bc9      	subs	r1, r1, r7
 8001b20:	d420      	bmi.n	8001b64 <_malloc_r+0xd0>
 8001b22:	290b      	cmp	r1, #11
 8001b24:	d90a      	bls.n	8001b3c <_malloc_r+0xa8>
 8001b26:	19e2      	adds	r2, r4, r7
 8001b28:	6027      	str	r7, [r4, #0]
 8001b2a:	42a3      	cmp	r3, r4
 8001b2c:	d104      	bne.n	8001b38 <_malloc_r+0xa4>
 8001b2e:	6032      	str	r2, [r6, #0]
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	6011      	str	r1, [r2, #0]
 8001b34:	6053      	str	r3, [r2, #4]
 8001b36:	e005      	b.n	8001b44 <_malloc_r+0xb0>
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e7f9      	b.n	8001b30 <_malloc_r+0x9c>
 8001b3c:	6862      	ldr	r2, [r4, #4]
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	d10e      	bne.n	8001b60 <_malloc_r+0xcc>
 8001b42:	6032      	str	r2, [r6, #0]
 8001b44:	0028      	movs	r0, r5
 8001b46:	f000 f82d 	bl	8001ba4 <__malloc_unlock>
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	300b      	adds	r0, #11
 8001b50:	1d23      	adds	r3, r4, #4
 8001b52:	4390      	bics	r0, r2
 8001b54:	1ac2      	subs	r2, r0, r3
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d0df      	beq.n	8001b1a <_malloc_r+0x86>
 8001b5a:	1a1b      	subs	r3, r3, r0
 8001b5c:	50a3      	str	r3, [r4, r2]
 8001b5e:	e7dc      	b.n	8001b1a <_malloc_r+0x86>
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e7ef      	b.n	8001b44 <_malloc_r+0xb0>
 8001b64:	0023      	movs	r3, r4
 8001b66:	6864      	ldr	r4, [r4, #4]
 8001b68:	e7a6      	b.n	8001ab8 <_malloc_r+0x24>
 8001b6a:	9c00      	ldr	r4, [sp, #0]
 8001b6c:	6863      	ldr	r3, [r4, #4]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	e7ad      	b.n	8001ace <_malloc_r+0x3a>
 8001b72:	001a      	movs	r2, r3
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	42a3      	cmp	r3, r4
 8001b78:	d1fb      	bne.n	8001b72 <_malloc_r+0xde>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e7da      	b.n	8001b34 <_malloc_r+0xa0>
 8001b7e:	230c      	movs	r3, #12
 8001b80:	0028      	movs	r0, r5
 8001b82:	602b      	str	r3, [r5, #0]
 8001b84:	f000 f80e 	bl	8001ba4 <__malloc_unlock>
 8001b88:	e7c6      	b.n	8001b18 <_malloc_r+0x84>
 8001b8a:	6007      	str	r7, [r0, #0]
 8001b8c:	e7da      	b.n	8001b44 <_malloc_r+0xb0>
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	20000088 	.word	0x20000088

08001b94 <__malloc_lock>:
 8001b94:	b510      	push	{r4, lr}
 8001b96:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <__malloc_lock+0xc>)
 8001b98:	f000 f850 	bl	8001c3c <__retarget_lock_acquire_recursive>
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	200001c8 	.word	0x200001c8

08001ba4 <__malloc_unlock>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <__malloc_unlock+0xc>)
 8001ba8:	f000 f849 	bl	8001c3e <__retarget_lock_release_recursive>
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	200001c8 	.word	0x200001c8

08001bb4 <memset>:
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	1882      	adds	r2, r0, r2
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d100      	bne.n	8001bbe <memset+0xa>
 8001bbc:	4770      	bx	lr
 8001bbe:	7019      	strb	r1, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	e7f9      	b.n	8001bb8 <memset+0x4>

08001bc4 <_sbrk_r>:
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	b570      	push	{r4, r5, r6, lr}
 8001bc8:	4d06      	ldr	r5, [pc, #24]	@ (8001be4 <_sbrk_r+0x20>)
 8001bca:	0004      	movs	r4, r0
 8001bcc:	0008      	movs	r0, r1
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	f7fe ff82 	bl	8000ad8 <_sbrk>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d103      	bne.n	8001be0 <_sbrk_r+0x1c>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d000      	beq.n	8001be0 <_sbrk_r+0x1c>
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	200001c4 	.word	0x200001c4

08001be8 <__errno>:
 8001be8:	4b01      	ldr	r3, [pc, #4]	@ (8001bf0 <__errno+0x8>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	4770      	bx	lr
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <__libc_init_array>:
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	4c0c      	ldr	r4, [pc, #48]	@ (8001c2c <__libc_init_array+0x38>)
 8001bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8001c30 <__libc_init_array+0x3c>)
 8001bfc:	1b64      	subs	r4, r4, r5
 8001bfe:	10a4      	asrs	r4, r4, #2
 8001c00:	42a6      	cmp	r6, r4
 8001c02:	d109      	bne.n	8001c18 <__libc_init_array+0x24>
 8001c04:	2600      	movs	r6, #0
 8001c06:	f000 f825 	bl	8001c54 <_init>
 8001c0a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <__libc_init_array+0x40>)
 8001c0c:	4d0a      	ldr	r5, [pc, #40]	@ (8001c38 <__libc_init_array+0x44>)
 8001c0e:	1b64      	subs	r4, r4, r5
 8001c10:	10a4      	asrs	r4, r4, #2
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d105      	bne.n	8001c22 <__libc_init_array+0x2e>
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	00b3      	lsls	r3, r6, #2
 8001c1a:	58eb      	ldr	r3, [r5, r3]
 8001c1c:	4798      	blx	r3
 8001c1e:	3601      	adds	r6, #1
 8001c20:	e7ee      	b.n	8001c00 <__libc_init_array+0xc>
 8001c22:	00b3      	lsls	r3, r6, #2
 8001c24:	58eb      	ldr	r3, [r5, r3]
 8001c26:	4798      	blx	r3
 8001c28:	3601      	adds	r6, #1
 8001c2a:	e7f2      	b.n	8001c12 <__libc_init_array+0x1e>
 8001c2c:	08001cf8 	.word	0x08001cf8
 8001c30:	08001cf8 	.word	0x08001cf8
 8001c34:	08001cfc 	.word	0x08001cfc
 8001c38:	08001cf8 	.word	0x08001cf8

08001c3c <__retarget_lock_acquire_recursive>:
 8001c3c:	4770      	bx	lr

08001c3e <__retarget_lock_release_recursive>:
 8001c3e:	4770      	bx	lr

08001c40 <memcpy>:
 8001c40:	2300      	movs	r3, #0
 8001c42:	b510      	push	{r4, lr}
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d100      	bne.n	8001c4a <memcpy+0xa>
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	5ccc      	ldrb	r4, [r1, r3]
 8001c4c:	54c4      	strb	r4, [r0, r3]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	e7f8      	b.n	8001c44 <memcpy+0x4>
	...

08001c54 <_init>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5a:	bc08      	pop	{r3}
 8001c5c:	469e      	mov	lr, r3
 8001c5e:	4770      	bx	lr

08001c60 <_fini>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr
